{
    "command-line": "3danisosmooth [PREFIX] [ITERS] [2D] [3D] [MASK] [AUTOMASK] [VIEWER] [NOSMOOTH] [SIGMA1] [SIGMA2] [DELTAT] [SAVETEMPDATA] [SAVE_TEMP_WITH_DIFF_MEASURES] [PHIDING] [PHIEXP] [NONEG] [SETNEG] [EDGEFRACTION] [DATUM] [MATCHORIG] [HELP] [DATASET]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-prefix",
            "description": "Use 'pname' for output dataset prefix name.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-iters",
            "description": "compute nnn iterations (default=10)",
            "id": "ITERS",
            "name": "ITERS",
            "optional": true,
            "type": "String",
            "value-key": "[ITERS]"
        },
        {
            "command-line-flag": "-2D",
            "description": "smooth a slice at a time (default)",
            "id": "2D",
            "name": "2D",
            "optional": true,
            "type": "String",
            "value-key": "[2D]"
        },
        {
            "command-line-flag": "-3D",
            "description": "smooth through slices. Can not be combined with 2D option",
            "id": "3D",
            "name": "3D",
            "optional": true,
            "type": "String",
            "value-key": "[3D]"
        },
        {
            "command-line-flag": "-mask",
            "description": "use dset as mask to include/exclude voxels",
            "id": "MASK",
            "name": "MASK",
            "optional": true,
            "type": "String",
            "value-key": "[MASK]"
        },
        {
            "command-line-flag": "-automask",
            "description": "automatically compute mask for dataset Can not be combined with -mask",
            "id": "AUTOMASK",
            "name": "AUTOMASK",
            "optional": true,
            "type": "String",
            "value-key": "[AUTOMASK]"
        },
        {
            "command-line-flag": "-viewer",
            "description": "show central axial slice image every iteration. Starts aiv program internally.",
            "id": "VIEWER",
            "name": "VIEWER",
            "optional": true,
            "type": "String",
            "value-key": "[VIEWER]"
        },
        {
            "command-line-flag": "-nosmooth",
            "description": "do not do intermediate smoothing of gradients",
            "id": "NOSMOOTH",
            "name": "NOSMOOTH",
            "optional": true,
            "type": "String",
            "value-key": "[NOSMOOTH]"
        },
        {
            "command-line-flag": "-sigma1",
            "description": "-sigma1 n.nnn = assign Gaussian smoothing sigma before gradient computation for calculation of structure tensor. Default = 0.5",
            "id": "SIGMA1",
            "name": "SIGMA1",
            "optional": true,
            "type": "String",
            "value-key": "[SIGMA1]"
        },
        {
            "command-line-flag": "-sigma2",
            "description": "-sigma2 n.nnn = assign Gaussian smoothing sigma after gradient matrix computation for calculation of structure tensor. Default = 1.0",
            "id": "SIGMA2",
            "name": "SIGMA2",
            "optional": true,
            "type": "String",
            "value-key": "[SIGMA2]"
        },
        {
            "command-line-flag": "-deltat",
            "description": "-deltat n.nnn = assign pseudotime step. Default = 0.25",
            "id": "DELTAT",
            "name": "DELTAT",
            "optional": true,
            "type": "String",
            "value-key": "[DELTAT]"
        },
        {
            "command-line-flag": "-savetempdata",
            "description": "save temporary datasets each iteration. Dataset prefixes are Gradient, Eigens, phi, Dtensor. Ematrix, Flux and Gmatrix are also stored for the first sub-brick. Where appropriate, the filename is suffixed by .ITER where ITER is the iteration number. Existing datasets will get overwritten.",
            "id": "SAVETEMPDATA",
            "name": "SAVETEMPDATA",
            "optional": true,
            "type": "String",
            "value-key": "[SAVETEMPDATA]"
        },
        {
            "command-line-flag": "-save_temp_with_diff_measures",
            "description": "Like -savetempdata, but with a dataset named Diff_measures.ITER containing FA, MD, Cl, Cp, and Cs values.",
            "id": "SAVE_TEMP_WITH_DIFF_MEASURES",
            "name": "SAVE_TEMP_WITH_DIFF_MEASURES",
            "optional": true,
            "type": "String",
            "value-key": "[SAVE_TEMP_WITH_DIFF_MEASURES]"
        },
        {
            "command-line-flag": "-phiding",
            "description": "use Ding method for computing phi (default)",
            "id": "PHIDING",
            "name": "PHIDING",
            "optional": true,
            "type": "String",
            "value-key": "[PHIDING]"
        },
        {
            "command-line-flag": "-phiexp",
            "description": "use exponential method for computing phi",
            "id": "PHIEXP",
            "name": "PHIEXP",
            "optional": true,
            "type": "String",
            "value-key": "[PHIEXP]"
        },
        {
            "command-line-flag": "-noneg",
            "description": "set negative voxels to 0",
            "id": "NONEG",
            "name": "NONEG",
            "optional": true,
            "type": "String",
            "value-key": "[NONEG]"
        },
        {
            "command-line-flag": "-setneg",
            "description": "set negative voxels to NEGVAL",
            "id": "SETNEG",
            "name": "SETNEG",
            "optional": true,
            "type": "String",
            "value-key": "[SETNEG]"
        },
        {
            "command-line-flag": "-edgefraction",
            "description": "-edgefraction n.nnn = adjust the fraction of the anisotropic component to be added to the original image. Can vary between 0 and 1. Default =0.5",
            "id": "EDGEFRACTION",
            "name": "EDGEFRACTION",
            "optional": true,
            "type": "String",
            "value-key": "[EDGEFRACTION]"
        },
        {
            "command-line-flag": "-datum",
            "description": "Coerce the output data to be stored as the given type which may be byte, short or float. [default=float]",
            "id": "DATUM",
            "name": "DATUM",
            "optional": true,
            "type": "String",
            "value-key": "[DATUM]"
        },
        {
            "command-line-flag": "-matchorig",
            "description": "-matchorig - match datum type and clip min and max to match input data",
            "id": "MATCHORIG",
            "name": "MATCHORIG",
            "optional": true,
            "type": "String",
            "value-key": "[MATCHORIG]"
        },
        {
            "command-line-flag": "-help",
            "description": "print this help screen  References: Z Ding, JC Gore, AW Anderson, Reduction of Noise in Diffusion Tensor Images Using Anisotropic Smoothing, Mag. Res. Med., 53:485-490, 2005 J Weickert, H Scharr, A Scheme for Coherence-Enhancing Diffusion Filtering with Optimized Rotation Invariance, CVGPR Group Technical Report at the Department of Mathematics and Computer Science,University of Mannheim,Germany,TR 4/2000. J.Weickert,H.Scharr. A scheme for coherence-enhancing diffusion filtering with optimized rotation invariance. J Visual Communication and Image Representation, Special Issue On Partial Differential Equations In Image Processing,Comp Vision Computer Graphics, pages 103-118, 2002. Gerig, G., Kubler, O., Kikinis, R., Jolesz, F., Nonlinear anisotropic filtering of MRI data, IEEE Trans. Med. Imaging 11 (2), 221-232, 1992.   INPUT DATASET NAMES ------------------- This program accepts datasets that are modified on input according to the following schemes: 'r1+orig[3..5]'                                    {sub-brick selector} 'r1+orig<100..200>'                                {sub-range selector} 'r1+orig[3..5]<100..200>'                          {both selectors} '3dcalc( -a r1+orig -b r2+orig -expr 0.5*(a+b) )'  {calculation} For the gruesome details, see the output of 'afni -help'.  ++ Compile date = Sep  7 2018 {:}",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "description": "NA",
            "id": "dataset",
            "name": "dataset",
            "optional": false,
            "type": "String",
            "value-key": "[DATASET]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}