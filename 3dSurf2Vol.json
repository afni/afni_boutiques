{
    "command-line": "3dSurf2Vol [SDATA_1D] [SPEC] [SURF_A] [SURF_B] [SV] [SURF_XYZ_1D] [GRID_PARENT] [MAP_FUNC] [PREFIX] [SDATA] [F_STEPS] [F_INDEX] [F_PN_XX] [F_P1_FR] [F_PN_FR] [F_P1_MM] [F_PN_MM] [STOP_GAP] [CMASK] [DATA_EXPR] [DATUM] [DEBUG] [DNODE] [DVOXEL] [HIST] [HELP] [NOSCALE] [SXYZ_ORIENT_AS_GPAR] [VERSION] [\\]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-sdata_1D",
            "description": "-sdata_1D     sdata_10.1D                             \\ -map_func     ave                                     \\ -f_steps      15                                      \\ -f_index      points                                  \\ -prefix       fred_surf_ave  3. The inputs in this example are identical to those in example 2, including the surface dataset, sdata_10.1D. Again, the output dataset will have 10 sub-bricks.  The surface values will be applied via the 'max_abs' filter, with the intention of assigning to each voxel the node value with the most significance.  Here, the index method does not matter, so it is left as the default, 'voxel'.  In this example, each node pair segment will be extended by 20% into the white matter, and by 10% outside of the grey matter, generating a \"thicker\" result.  3dSurf2Vol                       \\ -spec         fred.spec                               \\ -surf_A       smoothwm                                \\ -surf_B       pial                                    \\ -sv           fred_anat+orig                          \\ -grid_parent 'fred_func+orig[0]'                      \\ -cmask       '-a fred_func+orig[2] -expr step(a-0.6)' \\",
            "id": "SDATA_1D",
            "name": "SDATA_1D",
            "optional": true,
            "type": "String",
            "value-key": "[SDATA_1D]"
        },
        {
            "command-line-flag": "-spec",
            "description": "SUMA spec file  e.g. -spec fred.spec  The surface specification file contains the list of mappable surfaces that are used.  See @SUMA_Make_Spec_FS and @SUMA_Make_Spec_SF.  Note: this option, along with '-sv', may be replaced by the '-surf_xyz_1D' option.",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-surf_A",
            "description": "specify surface A (from spec file)",
            "id": "SURF_A",
            "name": "SURF_A",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_A]"
        },
        {
            "command-line-flag": "-surf_B",
            "description": "specify surface B (from spec file)  e.g. -surf_A smoothwm e.g. -surf_A lh.smoothwm e.g. -surf_B lh.pial  This parameter is used to tell the program with surfaces to use.  The '-surf_A' parameter is required, but the '-surf_B' parameter is an option.  The surface names must uniquely match those in the spec file, though a sub-string match is good enough.  The surface names are compared with the names of the surface node coordinate files.  For instance, given a spec file that has only the left hemisphere in it, 'pial' should produce a unique match with lh.pial.asc.  But if both hemispheres are included, then 'pial' would not be unique (matching rh.pial.asc, also).  In that case, 'lh.pial' would be better.",
            "id": "SURF_B",
            "name": "SURF_B",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_B]"
        },
        {
            "command-line-flag": "-sv",
            "description": "AFNI dataset  e.g. -sv fred_anat+orig  This is the AFNI dataset that the surface is mapped to. This dataset is used for the initial surface node to xyz coordinate mapping, in the Dicom orientation.  Note: this option, along with '-spec', may be replaced by the '-surf_xyz_1D' option.",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-surf_xyz_1D",
            "description": "1D coordinate file  e.g. -surf_xyz_1D my_surf_coords.1D  This ascii file contains a list of xyz coordinates to be considered as a surface, or 2 sets of xyz coordinates to considered as a surface pair.  As usual, these points are assumed to be in Dicom orientation.  Another option for coordinate orientation is to use that of the grid parent dataset.  See '-sxyz_orient_as_gpar' for details.  This option is an alternative to the pair of options, '-spec' and '-sv'.  The number of rows of the file should equal the number of nodes on each surface.  The number of columns should be either 3 for a single surface, or 6 for two surfaces.  sample line of an input file (one surface):  11.970287  2.850751  90.896111  sample line of an input file (two surfaces):  11.97  2.85  90.90    12.97  2.63  91.45",
            "id": "SURF_XYZ_1D",
            "name": "SURF_XYZ_1D",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_XYZ_1D]"
        },
        {
            "command-line-flag": "-grid_parent",
            "description": "AFNI dataset  e.g. -grid_parent fred_function+orig  This dataset is used as a grid and orientation master for the output AFNI dataset.",
            "id": "GRID_PARENT",
            "name": "GRID_PARENT",
            "optional": true,
            "type": "String",
            "value-key": "[GRID_PARENT]"
        },
        {
            "command-line-flag": "-map_func",
            "description": "surface to dataset function  e.g. -map_func max e.g. -map_func mask -f_steps 20  This function applies to the case where multiple data points get mapped to a single voxel, which is expected since surfaces tend to have a much higher resolution than AFNI volumes.  In the general case data points come from each point on each partitioned line segment, with one segment per node pair.  Note that these segments may have length zero, such as when only a single surface is input.  See \"Mapping Functions\" above, for more information.  The current mapping function for one surface is:  mask   : For each xyz location, set the corresponding voxel to 1.  The current mapping functions for two surfaces are as follows.  These descriptions are per output voxel, and over the values of all points mapped to a given voxel.  mask2  : if any points are mapped to the voxel, set the voxel value to 1  ave    : average all values  nzave  : ave, but ignorning any zero values  count  : count the number of mapped data points  min    : find the minimum value from all mapped points  max    : find the maximum value from all mapped points  max_abs: find the number with maximum absolute value (the resulting value will retain its sign)  median : median of all mapped values  nzmedian: median, but ignoring any zero values  mode   : apply the most common value per voxel (appropriate where surf ROIs overlap)  nzmode : mode, but ignoring any zero values",
            "id": "MAP_FUNC",
            "name": "MAP_FUNC",
            "optional": true,
            "type": "String",
            "value-key": "[MAP_FUNC]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "prefix for the output dataset  e.g. -prefix anat_surf_mask  This is used to specify the prefix of the resulting AFNI dataset.  ------------------------------ SUB-SURFACE DATA FILE OPTIONS:",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-sdata",
            "description": "NIML, or GIFTI formatted dataset.  ------------------------------ OPTIONS SPECIFIC TO SEGMENT SELECTION:  (see \"The basic form of the algorithm\" for more details)",
            "id": "SDATA",
            "name": "SDATA",
            "optional": true,
            "type": "String",
            "value-key": "[SDATA]"
        },
        {
            "command-line-flag": "-f_steps",
            "description": "partition segments  e.g. -f_steps 10 default: -f_steps 2   (or 1, the number of surfaces)  This option specifies the number of points to divide each line segment into, before mapping the points to the AFNI volume domain.  The default is the number of input surfaces (usually, 2).  The default operation is to have the segment endpoints be the actual surface nodes, unless they are altered with the -f_pX_XX options.",
            "id": "F_STEPS",
            "name": "F_STEPS",
            "optional": true,
            "type": "String",
            "value-key": "[F_STEPS]"
        },
        {
            "command-line-flag": "-f_index",
            "description": "index by points or voxels  e.g. -f_index points e.g. -f_index voxels default: -f_index voxels  Along a single segment, the default operation is to apply only those points mapping to a new voxel.  The effect of the default is that a given voxel will have at most one value applied per voxel pair.  If the user applies this option with 'points' or 'nodes' as the argument, then every point along the segment will be applied.  This may be preferred if, for example, the user wishes to have the average weighted by the number of points occupying a voxel, not just the number of node pair segments.  Note: the following -f_pX_XX options are used to alter the locations of the segment endpoints, per node pair. The segments are directed, from the node on the first surface to the node on the second surface.  To modify the first endpoint, use a -f_p1_XX option, and use",
            "id": "F_INDEX",
            "name": "F_INDEX",
            "optional": true,
            "type": "String",
            "value-key": "[F_INDEX]"
        },
        {
            "command-line-flag": "-f_pn_XX",
            "description": "-f_pn_XX to modify the second.",
            "id": "F_PN_XX",
            "name": "F_PN_XX",
            "optional": true,
            "type": "String",
            "value-key": "[F_PN_XX]"
        },
        {
            "command-line-flag": "-f_p1_fr",
            "description": "offset p1 by a length fraction  e.g. -f_p1_fr -0.2 e.g. -f_p1_fr -0.2  -f_pn_fr 0.2  This option moves the first endpoint, p1, by a distance of the FRACTION times the original segment length.  If the FRACTION is positive, it moves in the direction of the second endpoint, pn.  In the example, p1 is moved by 20% away from pn, which will increase the length of each segment.",
            "id": "F_P1_FR",
            "name": "F_P1_FR",
            "optional": true,
            "type": "String",
            "value-key": "[F_P1_FR]"
        },
        {
            "command-line-flag": "-f_pn_fr",
            "description": "offset pn by a length fraction  e.g. -f_pn_fr  0.2 e.g. -f_p1_fr -0.2  -f_pn_fr 0.2  This option moves pn by a distance of the FRACTION times the original segment length, in the direction from p1 to pn.  So a positive fraction extends the segment, and a negative fraction reduces it.  In the example above, using 0.2 adds 20% to the segment length past the original pn.",
            "id": "F_PN_FR",
            "name": "F_PN_FR",
            "optional": true,
            "type": "String",
            "value-key": "[F_PN_FR]"
        },
        {
            "command-line-flag": "-f_p1_mm",
            "description": "offset p1 by a distance in mm.  e.g. -f_p1_mm -1.0 e.g. -f_p1_mm -1.0  -f_pn_fr 1.0  This option moves p1 by DISTANCE mm., in the direction of pn.  If the DISTANCE is positive, the segment gets shorter.  If DISTANCE is negative, the segment will get longer.  In the example, p1 is moved away from pn, extending the segment by 1 millimeter.",
            "id": "F_P1_MM",
            "name": "F_P1_MM",
            "optional": true,
            "type": "String",
            "value-key": "[F_P1_MM]"
        },
        {
            "command-line-flag": "-f_pn_mm",
            "description": "offset pn by a distance in mm.  e.g. -f_pn_mm  1.0 e.g. -f_p1_mm -1.0  -f_pn_fr 1.0  This option moves pn by DISTANCE mm., in the direction from the first point to the second.  So if DISTANCE is positive, the segment will get longer.  If DISTANCE is negative, the segment will get shorter.  In the example, pn is moved 1 millimeter farther from p1, extending the segment by that distance.",
            "id": "F_PN_MM",
            "name": "F_PN_MM",
            "optional": true,
            "type": "String",
            "value-key": "[F_PN_MM]"
        },
        {
            "command-line-flag": "-stop_gap",
            "description": "stop when a zero gap has been hit  This limits segment processing such that once a non-zero mask value has been encountered, the segment will be terminated on any subsequent zero mask value.  The goal is to prevent mixing masked cortex regions.  ------------------------------ GENERAL OPTIONS:",
            "id": "STOP_GAP",
            "name": "STOP_GAP",
            "optional": true,
            "type": "String",
            "value-key": "[STOP_GAP]"
        },
        {
            "command-line-flag": "-cmask",
            "description": "command for dataset mask  e.g. -cmask '-a fred_func+orig[2] -expr step(a-0.8)'  This option will produce a mask to be applied to the output dataset.  Note that this mask should form a single sub-brick.  This option follows the style of 3dmaskdump (since the code for it was, uh, borrowed from there (thanks Bob!)).  See '3dmaskdump -help' for more information.",
            "id": "CMASK",
            "name": "CMASK",
            "optional": true,
            "type": "String",
            "value-key": "[CMASK]"
        },
        {
            "command-line-flag": "-data_expr",
            "description": "apply expression to surface input  e.g. -data_expr 17 e.g. -data_expr '(a+b+c+d)/4' e.g. -data_expr '(sin(a)+sin(b))/2'  This expression is applied to the list of data values from the surface data file input via '-sdata_1D'.  The expression is applied for each node or node pair, to the list of data values corresponding to that node.  The letters 'a' through 'z' may be used as input, and refer to columns 1 through 26 of the data file (where column 0 is a surface node index).  The data file must have enough columns to support the expression.  It is valid to have a constant expression without a data file.",
            "id": "DATA_EXPR",
            "name": "DATA_EXPR",
            "optional": true,
            "type": "String",
            "value-key": "[DATA_EXPR]"
        },
        {
            "command-line-flag": "-datum",
            "description": "set data type in output dataset  e.g. -datum short default: same as that of grid parent  This option specifies the data type for the output AFNI dataset.  Valid choices are byte, short and float, which are 1, 2 and 4 bytes for each data point, respectively.",
            "id": "DATUM",
            "name": "DATUM",
            "optional": true,
            "type": "String",
            "value-key": "[DATUM]"
        },
        {
            "command-line-flag": "-debug",
            "description": "verbose output  e.g. -debug 2  This option is used to print out status information during the execution of the program.  Current levels are from 0 to 5.",
            "id": "DEBUG",
            "name": "DEBUG",
            "optional": true,
            "type": "String",
            "value-key": "[DEBUG]"
        },
        {
            "command-line-flag": "-dnode",
            "description": "extra output for that node  e.g. -dnode 123456  This option requests additional debug output for the given surface node.  This index is with respect to the input surface (included in the spec file, or through the '-surf_xyz_1D' option).  This will have no effect without the '-debug' option.",
            "id": "DNODE",
            "name": "DNODE",
            "optional": true,
            "type": "String",
            "value-key": "[DNODE]"
        },
        {
            "command-line-flag": "-dvoxel",
            "description": "extra output for that voxel  e.g. -dvoxel 234567  This option requests additional debug output for the given volume voxel.  This 1-D index is with respect to the output AFNI dataset.  One good way to find a voxel index to supply is from output via the '-dnode' option.  This will have no effect without the '-debug' option.",
            "id": "DVOXEL",
            "name": "DVOXEL",
            "optional": true,
            "type": "String",
            "value-key": "[DVOXEL]"
        },
        {
            "command-line-flag": "-hist",
            "description": "show revision history  Display module history over time.",
            "id": "HIST",
            "name": "HIST",
            "optional": true,
            "type": "String",
            "value-key": "[HIST]"
        },
        {
            "command-line-flag": "-help",
            "description": "show this help  If you can't get help here, please get help somewhere.",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-noscale",
            "description": "no scale factor in output dataset  If the output dataset is an integer type (byte, shorts or ints), then the output dataset may end up with a scale factor attached (see 3dcalc -help).  With this option, the output dataset will not be scaled.",
            "id": "NOSCALE",
            "name": "NOSCALE",
            "optional": true,
            "type": "String",
            "value-key": "[NOSCALE]"
        },
        {
            "command-line-flag": "-sxyz_orient_as_gpar",
            "description": "assume gpar orientation for sxyz  This option specifies that the surface coordinate points in the '-surf_xyz_1D' option file have the orientation of the grid parent dataset.  When the '-surf_xyz_1D' option is applied the surface coordinates are assumed to be in Dicom orientation, by default.  This '-sxyz_orient_as_gpar' option overrides the Dicom default, specifying that the node coordinates are in the same orientation as the grid parent dataset.  See the '-surf_xyz_1D' option for more information.",
            "id": "SXYZ_ORIENT_AS_GPAR",
            "name": "SXYZ_ORIENT_AS_GPAR",
            "optional": true,
            "type": "String",
            "value-key": "[SXYZ_ORIENT_AS_GPAR]"
        },
        {
            "command-line-flag": "-version",
            "description": "show version information  Show version and compile date.  ------------------------------------------------------------  Author: R. Reynolds  - version  3.8 (April 4, 2011)  (many thanks to Z. Saad and R.W. Cox)",
            "id": "VERSION",
            "name": "VERSION",
            "optional": true,
            "type": "String",
            "value-key": "[VERSION]"
        },
        {
            "description": "NA",
            "id": "\\",
            "name": "\\",
            "optional": false,
            "type": "String",
            "value-key": "[\\]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}