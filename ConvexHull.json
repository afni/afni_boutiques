{
    "command-line": "ConvexHull [INPUT] [ISOVAL] [ISORANGE] [ISOCMASK] [I_TYPE] [INPUT_1D] [Q_OPT] [PROJ_XY] [ORIG_COORD] [THESE_COORDS] [XFORM] [SV] [O_TYPE] [ONESTATE] [ANATOMICAL] [I] [O_SF] [H] [HELP] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS] [PROGRAM] [TO] [FIND] [THE] [CONVEX] [HULL,] [OR] [PERFORM] [A] [DELAUNAY] [TRIANGULATION]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-input",
            "description": "Input AFNI (or AFNI readable) volume. You must use one of the following iso* options:",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-isoval",
            "description": "Create isosurface where volume = V",
            "id": "ISOVAL",
            "name": "ISOVAL",
            "optional": true,
            "type": "String",
            "value-key": "[ISOVAL]"
        },
        {
            "command-line-flag": "-isorange",
            "description": "Create isosurface where V0 <= volume < V1",
            "id": "ISORANGE",
            "name": "ISORANGE",
            "optional": true,
            "type": "String",
            "value-key": "[ISORANGE]"
        },
        {
            "command-line-flag": "-isocmask",
            "description": "Create isosurface where MASK_COM != 0 For example: -isocmask '-a VOL+orig -expr (1-bool(a-V))' is equivalent to using -isoval V. NOTE: -isorange and -isocmask are only allowed with -xform mask See -xform below for details.  Usage 2:",
            "id": "ISOCMASK",
            "name": "ISOCMASK",
            "optional": true,
            "type": "String",
            "value-key": "[ISOCMASK]"
        },
        {
            "command-line-flag": "-i_TYPE",
            "description": "Use the nodes of a surface model for input. See help for i_TYPE usage below.  Usage 3:",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-input_1D",
            "description": "Construct the triangulation of the points contained in 1D file XYZ. If the file has more than 3 columns, use AFNI's [] selectors to specify the XYZ columns.",
            "id": "INPUT_1D",
            "name": "INPUT_1D",
            "optional": true,
            "type": "String",
            "value-key": "[INPUT_1D]"
        },
        {
            "command-line-flag": "-q_opt",
            "description": "Meshing option OPT can be one of. convex_hull: For convex hull of points (default) triangulate_xy: Delaunay triangulation using x y coords  These three options are only useful with -q_opt triangulate_xy",
            "id": "Q_OPT",
            "name": "Q_OPT",
            "optional": true,
            "type": "String",
            "value-key": "[Q_OPT]"
        },
        {
            "command-line-flag": "-proj_xy",
            "description": "Project points onto plane whose normal is the third principal component. Then rotate projection so that plane in parallel to Z = constant.",
            "id": "PROJ_XY",
            "name": "PROJ_XY",
            "optional": true,
            "type": "String",
            "value-key": "[PROJ_XY]"
        },
        {
            "command-line-flag": "-orig_coord",
            "description": "Use original coordinates when writing surface, not transformed ones.",
            "id": "ORIG_COORD",
            "name": "ORIG_COORD",
            "optional": true,
            "type": "String",
            "value-key": "[ORIG_COORD]"
        },
        {
            "command-line-flag": "-these_coords",
            "description": "-these_coords COORDS.1D: Use coordinates in COORDS.1D when writing surface.  Optional Parameters: Usage 1 only:",
            "id": "THESE_COORDS",
            "name": "THESE_COORDS",
            "optional": true,
            "type": "String",
            "value-key": "[THESE_COORDS]"
        },
        {
            "command-line-flag": "-xform",
            "description": "Transform to apply to volume values before searching for sign change boundary. XFORM can be one of: mask: values that meet the iso* conditions are set to 1. All other values are set to -1. This is the default XFORM. shift: subtract V from the dataset and then search for 0 isosurface. This has the effect of constructing the V isosurface if your dataset has a continuum of values. This option can only be used with -isoval V. none: apply no transforms. This assumes that your volume has a continuum of values from negative to positive and that you are seeking to 0 isosurface. This option can only be used with -isoval 0. Usage 2 only:",
            "id": "XFORM",
            "name": "XFORM",
            "optional": true,
            "type": "String",
            "value-key": "[XFORM]"
        },
        {
            "command-line-flag": "-sv",
            "description": "Specify a surface volume which contains a transform to apply to the surface node coordinates prior to constructing the convex hull. All Usage:",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-o_TYPE",
            "description": "prefix of output surface. where TYPE specifies the format of the surface and PREFIX is, well, the prefix. TYPE is one of: fs, 1d (or vec), sf, ply. Default is: -o_ply  Specifying input surfaces using -i or -i_TYPE options: -i_TYPE inSurf specifies the input surface, TYPE is one of the following: fs: FreeSurfer surface. If surface name has .asc it is assumed to be in ASCII format. Otherwise it is assumed to be in BINARY_BE (Big Endian) format. Patches in Binary format cannot be read at the moment. sf: SureFit surface. You must specify the .coord followed by the .topo file. vec (or 1D): Simple ascii matrix format. You must specify the coord (NodeList) file followed by the topo (FaceSetList) file. coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. Only vertex and triangulation info is preserved. stl: STL format, ascii or binary. This format of no use for much of the surface-based analyses. Objects are defined as a soup of triangles with no information about which edges they share. STL is only useful for taking surface models to some 3D printing software. mni: MNI .obj format, ascii only. Only vertex, triangulation, and node normals info is preserved. byu: BYU format, ascii. Polygons with more than 3 edges are turned into triangles. bv: BrainVoyager format. Only vertex and triangulation info is preserved. dx: OpenDX ascii mesh format. Only vertex and triangulation info is preserved. Requires presence of 3 objects, the one of class 'field' should contain 2 components 'positions' and 'connections' that point to the two objects containing node coordinates and topology, respectively. gii: GIFTI XML surface format. obj: OBJ file format for triangular meshes only. The following primitives are preserved: v (vertices), (faces, triangles only), and p (points) Note that if the surface filename has the proper extension, it is enough to use the -i option and let the programs guess the type from the extension.  You can also specify multiple surfaces after -i option. This makes it possible to use wildcards on the command line for reading in a bunch of surfaces at once.",
            "id": "O_TYPE",
            "name": "O_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[O_TYPE]"
        },
        {
            "command-line-flag": "-onestate",
            "description": "Make all -i_* surfaces have the same state, i.e. they all appear at the same time in the viewer. By default, each -i_* surface has its own state. For -onestate to take effect, it must precede all -i options with on the command line.",
            "id": "ONESTATE",
            "name": "ONESTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ONESTATE]"
        },
        {
            "command-line-flag": "-anatomical",
            "description": "Label all -i surfaces as anatomically correct. Again, this option should precede the -i_* options.  More variants for option -i: ----------------------------- You can also load standard-mesh spheres that are formed in memory with the following notation",
            "id": "ANATOMICAL",
            "name": "ANATOMICAL",
            "optional": true,
            "type": "String",
            "value-key": "[ANATOMICAL]"
        },
        {
            "command-line-flag": "-i",
            "description": "Where NUM is the parameter controlling the mesh density exactly as the parameter -ld linDepth does in CreateIcosahedron. For example: suma -i ld60 create on the fly a surface that is identical to the one produced by: CreateIcosahedron -ld 60 -tosphere",
            "id": "I",
            "name": "I",
            "optional": true,
            "type": "String",
            "value-key": "[I]"
        },
        {
            "command-line-flag": "-o_sf",
            "description": "-o_sf. If that character is a '-' then you have supplied a prefix and the program will generate the coord and topo names. vec (or 1D): Simple ascii matrix format. For most programs, you are expected to specify prefix: i.e. -o_1D brain. In some programs, you are allowed to specify both coord and topo file names: i.e. -o_1D brain.1D.coord brain.1D.topo coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. stl: STL format, ascii or binary (see also STL under option -i_TYPE). byu: BYU format, ascii or binary. mni: MNI obj format, ascii only. gii: GIFTI format, ascii. You can also enforce the encoding of data arrays by using gii_asc, gii_b64, or gii_b64gz for ASCII, Base64, or Base64 Gzipped. If AFNI_NIML_TEXT_DATA environment variable is set to YES, the the default encoding is ASCII, otherwise it is Base64. obj: No support for writing OBJ format exists yet. Note that if the surface filename has the proper extension, it is enough to use the -o option and let the programs guess the type from the extension.   [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "O_SF",
            "name": "O_SF",
            "optional": true,
            "type": "String",
            "value-key": "[O_SF]"
        },
        {
            "command-line-flag": "-h",
            "description": "Mini help, at time, same as -help in many cases.",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-help",
            "description": "The entire help output",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.    Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        },
        {
            "description": "NA",
            "id": "program",
            "name": "program",
            "optional": false,
            "type": "String",
            "value-key": "[PROGRAM]"
        },
        {
            "description": "NA",
            "id": "to",
            "name": "to",
            "optional": false,
            "type": "String",
            "value-key": "[TO]"
        },
        {
            "description": "NA",
            "id": "find",
            "name": "find",
            "optional": false,
            "type": "String",
            "value-key": "[FIND]"
        },
        {
            "description": "NA",
            "id": "the",
            "name": "the",
            "optional": false,
            "type": "String",
            "value-key": "[THE]"
        },
        {
            "description": "NA",
            "id": "convex",
            "name": "convex",
            "optional": false,
            "type": "String",
            "value-key": "[CONVEX]"
        },
        {
            "description": "NA",
            "id": "hull,",
            "name": "hull,",
            "optional": false,
            "type": "String",
            "value-key": "[HULL,]"
        },
        {
            "description": "NA",
            "id": "or",
            "name": "or",
            "optional": false,
            "type": "String",
            "value-key": "[OR]"
        },
        {
            "description": "NA",
            "id": "perform",
            "name": "perform",
            "optional": false,
            "type": "String",
            "value-key": "[PERFORM]"
        },
        {
            "description": "NA",
            "id": "a",
            "name": "a",
            "optional": false,
            "type": "String",
            "value-key": "[A]"
        },
        {
            "description": "NA",
            "id": "delaunay",
            "name": "delaunay",
            "optional": false,
            "type": "String",
            "value-key": "[DELAUNAY]"
        },
        {
            "description": "NA",
            "id": "triangulation",
            "name": "triangulation",
            "optional": false,
            "type": "String",
            "value-key": "[TRIANGULATION]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}