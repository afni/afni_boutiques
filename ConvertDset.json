{
    "command-line": "ConvertDset [O_TYPE] [INPUT] [DSET_LABELS] [ADD_NODE_INDEX] [NODE_INDEX_1D] [NODE_SELECT_1D] [PREPEND_NODE_INDEX_1D] [PAD_TO_NODE] [LABELIZE] [GRAPHIZE] [GRAPH_NODELIST_1D] [GRAPH_FULL_NODELIST_1D] [GRAPH_NAMED_NODELIST_TXT] [GRAPH_XYZ_LPI] [GRAPH_EDGELIST_1D] [ONEGRAPH] [MULTIGRAPH] [I_TYPE] [PREFIX] [SPLIT] [NO_HISTORY] [THIS] [THE] [N_MASK] [B_MASK] [C_MASK] [H] [HELP] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-o_TYPE",
            "description": "TYPE of output datasets where TYPE is one of: niml_asc (or niml): for ASCII niml format. niml_bi:            for BINARY niml format. 1D:                 for AFNI's 1D ascii format. 1Dp:                like 1D but with no comments or other 1D formatting gimmicks. 1Dpt:               like 1Dp but transpose the output. gii:                GIFTI format default . gii_asc:            GIFTI format with ascii DataArrays. gii_b64:            GIFTI format with Base 64 encoded DataArrays. gii_b64gz:          GIFTI format with B64 enconding and gzipping. For stderr and stdout output use one of: 1D_stderr, 1D_stdout, niml_stderr, or niml_stdout, 1Dp_stdout, 1Dp_stderr, 1Dpt_stdout, 1Dpt_stderr Actually, this parameter is not that mandatory, the program can look at extensions on the prefix to guess the output format. If the prefix has no extension and o_TYPE is not specified, then the output format is the same as that of the input.",
            "id": "O_TYPE",
            "name": "O_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[O_TYPE]"
        },
        {
            "command-line-flag": "-input",
            "description": "Input dataset to be converted. See more on input datasets below.",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-dset_labels",
            "description": "-dset_labels 'SB_LABEL_0 SB_LABEL_1 ...' Label the columns (sub-bricks) of the output dataset You must have as many labels as you have sub-bricks in the output dataset.  Optional parameters:",
            "id": "DSET_LABELS",
            "name": "DSET_LABELS",
            "optional": true,
            "type": "String",
            "value-key": "[DSET_LABELS]"
        },
        {
            "command-line-flag": "-add_node_index",
            "description": "Add a node index element if one does not exist in the input dset. With this option, the indexing is assumed to be implicit (0,1,2,3.... for rows 0,1 2,3,...). If that is not the case, use -node_index_1D option below. ** NOTE: It is highly recommended you use one of -node_index_1D or -add_node_index when going from 1D format to NIML GIFTI formats.",
            "id": "ADD_NODE_INDEX",
            "name": "ADD_NODE_INDEX",
            "optional": true,
            "type": "String",
            "value-key": "[ADD_NODE_INDEX]"
        },
        {
            "command-line-flag": "-node_index_1D",
            "description": "-node_index_1D INDEX.1D: Specify file containing node indices Use this to provide node indices with a .1D dset. In many cases for .1D data this option is DSET.1D'[0]'",
            "id": "NODE_INDEX_1D",
            "name": "NODE_INDEX_1D",
            "optional": true,
            "type": "String",
            "value-key": "[NODE_INDEX_1D]"
        },
        {
            "command-line-flag": "-node_select_1D",
            "description": "-node_select_1D MASK.1D: Specify the nodes you want to keep in the output. The order of the rows in the output dataset reflects the order of the nodes in MASK.1D. Note that the presence of duplicate nodes in MASK.1D is not allowed, so if MASK.1D came from ROI2dataset's -nodelist, recreate it with option -nodelist.nodups instead. Also, node indices that do not have data in the input dataset will be ignored. When in doubt, use the 1D output format along with -prepend_node_index_1D and spot check your results.",
            "id": "NODE_SELECT_1D",
            "name": "NODE_SELECT_1D",
            "optional": true,
            "type": "String",
            "value-key": "[NODE_SELECT_1D]"
        },
        {
            "command-line-flag": "-prepend_node_index_1D",
            "description": "Add a node index column to the data, rather than keep it as part of the metadata.",
            "id": "PREPEND_NODE_INDEX_1D",
            "name": "PREPEND_NODE_INDEX_1D",
            "optional": true,
            "type": "String",
            "value-key": "[PREPEND_NODE_INDEX_1D]"
        },
        {
            "command-line-flag": "-pad_to_node",
            "description": "Output a full dset from node 0 to node MAX_INDEX (a total of MAX_INDEX + 1 nodes). Nodes that get no value from input DSET are assigned a value of 0 If MAX_INDEX is set to 0 it means you want to pad the maximum node in the input dataset. ** Notice that padding gets done at the very end. ** Instead of directly setting MAX_INDEX to an integer you can set MAX_INDEX to something like: ld120 (or rd17) which sets MAX_INDEX to be the maximum node index on an Icosahedron with -ld 120. See CreateIcosahedron for details. d:DSET.niml.dset which sets MAX_INDEX to the maximum node found in dataset DSET.niml.dset.",
            "id": "PAD_TO_NODE",
            "name": "PAD_TO_NODE",
            "optional": true,
            "type": "String",
            "value-key": "[PAD_TO_NODE]"
        },
        {
            "command-line-flag": "-labelize",
            "description": "Turn the dataset into a labeled set per the colormap in CMAP. A CMAP can easily be generated with MakeColorMap's options -usercolorlutfile and -suma_cmap.",
            "id": "LABELIZE",
            "name": "LABELIZE",
            "optional": true,
            "type": "String",
            "value-key": "[LABELIZE]"
        },
        {
            "command-line-flag": "-graphize",
            "description": "Turn the dataset into a SUMA graph dataset. See input format constraints under -onegraph and -multigraph",
            "id": "GRAPHIZE",
            "name": "GRAPHIZE",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPHIZE]"
        },
        {
            "command-line-flag": "-graph_nodelist_1D",
            "description": "-graph_nodelist_1D NODEINDLIST.1D NODELIST.1D: Two files specifying the indices and the coordinates of the graph's nodes. In sum you need I X Y Z (RAI mm). but the I comes from NODEINDLIST.1D and the X Y Z coordinates from NODELIST.1D If you have everything in one file, use the same filename twice with proper column selectors.",
            "id": "GRAPH_NODELIST_1D",
            "name": "GRAPH_NODELIST_1D",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPH_NODELIST_1D]"
        },
        {
            "command-line-flag": "-graph_full_nodelist_1D",
            "description": "-graph_full_nodelist_1D NODELIST.1D: Same as above, but without the need for NODEINDLIST.1D. In that case, indices will implicitly go from 0 to N-1, with N being the number of nodes.",
            "id": "GRAPH_FULL_NODELIST_1D",
            "name": "GRAPH_FULL_NODELIST_1D",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPH_FULL_NODELIST_1D]"
        },
        {
            "command-line-flag": "-graph_named_nodelist_txt",
            "description": "-graph_named_nodelist_txt NODENAMES.txt NODELIST.1D: Two files used to specify graph node indices, string labels, and their coordinates. In sum you need I LABEL X Y Z (RAI mm). The I and LABEL come from NODENAMES.txt and the X Y Z coordinates from NODELIST.1D Also, you can assign to each graph node a group ID and nodes with the same group ID can be displayed with the same color in SUMA. To do so, add a third column to NODENAMES.txt so that you have: I LABEL GID with GID being the integer group ID. Color selection for the different group IDs is done automatically with ConvertDset, but you can set your own by appending three more columns to NODENAMES.txt to have: I LABEL GID R G B with R, G, and B values between 0 and 1.0",
            "id": "GRAPH_NAMED_NODELIST_TXT",
            "name": "GRAPH_NAMED_NODELIST_TXT",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPH_NAMED_NODELIST_TXT]"
        },
        {
            "command-line-flag": "-graph_XYZ_LPI",
            "description": "Coords in NodeList.1D are in LPI instead of RAI",
            "id": "GRAPH_XYZ_LPI",
            "name": "GRAPH_XYZ_LPI",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPH_XYZ_LPI]"
        },
        {
            "command-line-flag": "-graph_edgelist_1D",
            "description": "-graph_edgelist_1D EDGELIST.1D: i j indices of graph nodes defining edge with each row matching the input dset row. This option only works with -multigraph This option also marks the graph as being a sparse matrix, even if a square matrix is provided.",
            "id": "GRAPH_EDGELIST_1D",
            "name": "GRAPH_EDGELIST_1D",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPH_EDGELIST_1D]"
        },
        {
            "command-line-flag": "-onegraph",
            "description": "Expect input dataset to be one square matrix defining the graph (default).",
            "id": "ONEGRAPH",
            "name": "ONEGRAPH",
            "optional": true,
            "type": "String",
            "value-key": "[ONEGRAPH]"
        },
        {
            "command-line-flag": "-multigraph",
            "description": "Expect each column in input dataset to define an entire graph. Each column in this case should be a column-stacked square matrix.",
            "id": "MULTIGRAPH",
            "name": "MULTIGRAPH",
            "optional": true,
            "type": "String",
            "value-key": "[MULTIGRAPH]"
        },
        {
            "command-line-flag": "-i_TYPE",
            "description": "TYPE of input datasets where TYPE is one of: niml: for niml data sets. 1D:   for AFNI's 1D ascii format. dx: OpenDX format, expects to work on 1st object only. If no format is specified, the program will guess using the extension first and the file content next. However the latter operation might slow operations down considerably.",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Output prefix for data set. Default is something based on the input prefix.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-split",
            "description": "Split a multi-column dataset into about N output datasets with all having the same number of columns, except perhaps for the last one. Confused? try: ConvertDset -i v2s.lh.TS.niml.dset -split 3 \\ -prefix Split3 3dinfo -n4 -label Split3.000* v2s.lh.TS.niml.dset\\",
            "id": "SPLIT",
            "name": "SPLIT",
            "optional": true,
            "type": "String",
            "value-key": "[SPLIT]"
        },
        {
            "command-line-flag": "-no_history",
            "description": "Do not include a history element in the output Notes:",
            "id": "NO_HISTORY",
            "name": "NO_HISTORY",
            "optional": true,
            "type": "String",
            "value-key": "[NO_HISTORY]"
        },
        {
            "command-line-flag": "-This",
            "description": "-This program will not overwrite pre-existing files.",
            "id": "THIS",
            "name": "THIS",
            "optional": true,
            "type": "String",
            "value-key": "[THIS]"
        },
        {
            "command-line-flag": "-The",
            "description": "-The new data set is given a new idcode.  SUMA dataset input options:",
            "id": "THE",
            "name": "THE",
            "optional": true,
            "type": "String",
            "value-key": "[THE]"
        },
        {
            "command-line-flag": "-n_mask",
            "description": "Apply operations to nodes listed in INDEXMASK  only. INDEXMASK is a 1D file.",
            "id": "N_MASK",
            "name": "N_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[N_MASK]"
        },
        {
            "command-line-flag": "-b_mask",
            "description": "Similar to -n_mask, except that the BINARYMASK 1D file contains 1 for nodes to filter and 0 for nodes to be ignored. The number of rows in filter_binary_mask must be equal to the number of nodes forming the surface.",
            "id": "B_MASK",
            "name": "B_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[B_MASK]"
        },
        {
            "command-line-flag": "-c_mask",
            "description": "Masking based on the result of EXPR. Use like afni's -cmask options. See explanation in 3dmaskdump -help and examples in output of 3dVol2Surf -help NOTE: Unless stated otherwise, if n_mask, b_mask and c_mask are used simultaneously, the resultant mask is the intersection (AND operation) of all masks.   [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "C_MASK",
            "name": "C_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[C_MASK]"
        },
        {
            "command-line-flag": "-h",
            "description": "Mini help, at time, same as -help in many cases.",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-help",
            "description": "The entire help output",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.   Examples: 1-   Plot a node's time series from a niml dataset: ConvertDset -input DemoSubj_EccCntavir.niml.dset'#5779#' \\ -o_1D_stdout | 1dplot -nopush -stdin  2-   Change a dataset to a labeled dataset using the colormap generated in Example 5 of MakeColorMap's help ConvertDset -i you_look_marvellous.niml.dset \\ -o you_look_labeled.niml.dset -labelize toylut.niml.cmap The advantage of having a labeled dataset is that you can see the label of a node when you click on it in SUMA, and you can extract regions based on their labels. For example, with the dataset created above you can run the following command to extract a mask of the nodes labeled 'Small_Face' with something like: 3dcalc -a you_look_labeled.niml.dset'<Small_Face>' \\ -expr 'a' -prefix Small_Face.only This assumes of course that your colormap toylut.niml.cmap does have an entry labeled 'Small_Face'     Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}