{
    "command-line": "SurfaceMetrics [METRIC1] [VOL] [CONV] [CLOSEST_NODE] [AREA] [TRI_SINES] [TRI_COSINES] [TRI_ANGLES] [NODE_ANGLES] [CURV] [EDGES] [NODE_NORMALS] [FACE_NORMALS] [NORMALS_SCALE] [COORDS] [SPH_COORDS] [SPH_COORDS_CENTER] [BOUNDARY_NODES] [BOUNDARY_TRIANGLES] [INTERNAL_NODES] [SV] [TLRC] [PREFIX] [QUIET] [XMAT_1D] [IXMAT_1D] [SEED] [XCENTER] [POLAR_DECOMP] [H] [HELP] [I_TYPE] [ONESTATE] [ANATOMICAL] [I] [TN] [TSN] [SPEC] [SURF_A] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS] [<-METRIC1>] [[] [...]]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-Metric1",
            "description": "Replace -Metric1 with the following:",
            "id": "METRIC1",
            "name": "METRIC1",
            "optional": true,
            "type": "String",
            "value-key": "[METRIC1]"
        },
        {
            "command-line-flag": "-vol",
            "description": "calculates the volume of a surface. Volume unit is the cube of your surface's coordinates unit, obviously. Volume's sign depends on the orientation of the surface's mesh. Make sure your surface is a closed one and that winding is consistent. Use SurfQual to check the surface. If your surface's mesh has problems, the result is incorrect. Volume is calculated using Gauss's theorem, see [Hughes, S.W. et al. 'Application of a new discreet form of Gauss's theorem for measuring volume' in Phys. Med. Biol. 1996].",
            "id": "VOL",
            "name": "VOL",
            "optional": true,
            "type": "String",
            "value-key": "[VOL]"
        },
        {
            "command-line-flag": "-conv",
            "description": "output surface convexity at each node. Output file is prefix.conv. Results in two columns: Col.0: Node Index Col.1: Convexity This is the measure used to shade sulci and gyri in SUMA. C[i] = Sum(dj/dij) over all neighbors j of i dj is the distance of neighboring node j to the tangent plane at i dij is the length of the segment ij Note: This option produces a .1D file, and a NIML dataset with similar content.",
            "id": "CONV",
            "name": "CONV",
            "optional": true,
            "type": "String",
            "value-key": "[CONV]"
        },
        {
            "command-line-flag": "-closest_node",
            "description": "-closest_node XYZ_LIST.1D: Find the closest node on the surface to each XYZ triplet in XYZ_LIST.1D Note that it is assumed that the XYZ coordinates are in RAI (DICOM) per AFNI's coordinate convention. For correspondence with coordinates observed in SUMA and AFNI be sure to use the proper -sv parameter for the surface and XYZ coordinates in question. Output file is prefix.closest.1D. Results in 8 columns: Col.0: Index of closest node. Col.1: Distance of closest node to XYZ reference point. Col.2..4: XYZ of reference point (same as XYZ_LIST.1D, copied here for clarity). Col.5..7: XYZ of closest node (after proper surface coordinate transformation, including SurfaceVolume transform.",
            "id": "CLOSEST_NODE",
            "name": "CLOSEST_NODE",
            "optional": true,
            "type": "String",
            "value-key": "[CLOSEST_NODE]"
        },
        {
            "command-line-flag": "-area",
            "description": "output area of each triangle. Output file is prefix.area. Results in two columns: Col.0: Triangle Index Col.1: Triangle Area",
            "id": "AREA",
            "name": "AREA",
            "optional": true,
            "type": "String",
            "value-key": "[AREA]"
        },
        {
            "command-line-flag": "-tri_sines",
            "description": "-tri_sines/-tri_cosines: (co)sine of angles at nodes forming triangles. Output file is prefix.(co)sine. Results in 4 columns: Col.0: Triangle Index Col.1: (co)sine of angle at node 0 Col.2: (co)sine of angle at node 1 Col.3: (co)sine of angle at node 2",
            "id": "TRI_SINES",
            "name": "TRI_SINES",
            "optional": true,
            "type": "String",
            "value-key": "[TRI_SINES]"
        },
        {
            "command-line-flag": "-tri_CoSines",
            "description": "Both cosines and sines.",
            "id": "TRI_COSINES",
            "name": "TRI_COSINES",
            "optional": true,
            "type": "String",
            "value-key": "[TRI_COSINES]"
        },
        {
            "command-line-flag": "-tri_angles",
            "description": "Unsigned angles in radians of triangles. Col.0: Triangle Index Col.1: angle at node 0 Col.2: angle at node 1 Col.3: angle at node 2",
            "id": "TRI_ANGLES",
            "name": "TRI_ANGLES",
            "optional": true,
            "type": "String",
            "value-key": "[TRI_ANGLES]"
        },
        {
            "command-line-flag": "-node_angles",
            "description": "Unsigned angles in radians at nodes of surface. Col.0: Node Index Col.1: minimum angle at node Col.2: maximum angle at node Col.3: average angle at node",
            "id": "NODE_ANGLES",
            "name": "NODE_ANGLES",
            "optional": true,
            "type": "String",
            "value-key": "[NODE_ANGLES]"
        },
        {
            "command-line-flag": "-curv",
            "description": "output curvature at each node. Output file is prefix.curv. Results in nine columns: Col.0: Node Index Col.1-3: vector of 1st principal direction of surface Col.4-6: vector of 2nd principal direction of surface Col.7: Curvature along T1 Col.8: Curvature along T2 Col.9: Curvature magnitude sqrt(c7*c7+c8*c8) Curvature algorithm by G. Taubin from: 'Estimating the tensor of curvature of surface from a polyhedral approximation.' Note: This option produces a .1D file, a NIML dataset with similar content, and Displayable Objects (DO) file containing the principal directions at each node. You can load these objects with SUMA's 'Alt+Ctrl+s' option.",
            "id": "CURV",
            "name": "CURV",
            "optional": true,
            "type": "String",
            "value-key": "[CURV]"
        },
        {
            "command-line-flag": "-edges",
            "description": "outputs info on each edge. Output file is prefix.edges. Results in five columns: Col.0: Edge Index (into a SUMA structure). Col.1: Index of the first node forming the edge Col.2: Index of the second node forming the edge Col.3: Number of triangles containing edge Col.4: Length of edge.",
            "id": "EDGES",
            "name": "EDGES",
            "optional": true,
            "type": "String",
            "value-key": "[EDGES]"
        },
        {
            "command-line-flag": "-node_normals",
            "description": "Outputs segments along node normals. Segments begin at node and have a default magnitude of 1. See option 'Alt+Ctrl+s' in SUMA for visualization. Note: This option produces a .1D file and a Displayable Objects file containing  the principal directions at each node. You can load these objects with SUMA's 'Alt+Ctrl+s' option.",
            "id": "NODE_NORMALS",
            "name": "NODE_NORMALS",
            "optional": true,
            "type": "String",
            "value-key": "[NODE_NORMALS]"
        },
        {
            "command-line-flag": "-face_normals",
            "description": "Outputs segments along triangle normals. Segments begin at centroid of triangles and have a default magnitude of 1. See option 'Alt+Ctrl+s' in SUMA for visualization.",
            "id": "FACE_NORMALS",
            "name": "FACE_NORMALS",
            "optional": true,
            "type": "String",
            "value-key": "[FACE_NORMALS]"
        },
        {
            "command-line-flag": "-normals_scale",
            "description": "Scale the normals by SCALE (1.0 default) For use with options -node_normals and -face_normals",
            "id": "NORMALS_SCALE",
            "name": "NORMALS_SCALE",
            "optional": true,
            "type": "String",
            "value-key": "[NORMALS_SCALE]"
        },
        {
            "command-line-flag": "-coords",
            "description": "Output coords of each node after any transformation that is normally carried out by SUMA on such a surface. Col. 0: Node Index Col. 1: X Col. 2: Y Col. 3: Z",
            "id": "COORDS",
            "name": "COORDS",
            "optional": true,
            "type": "String",
            "value-key": "[COORDS]"
        },
        {
            "command-line-flag": "-sph_coords",
            "description": "Output spherical coords of each node.",
            "id": "SPH_COORDS",
            "name": "SPH_COORDS",
            "optional": true,
            "type": "String",
            "value-key": "[SPH_COORDS]"
        },
        {
            "command-line-flag": "-sph_coords_center",
            "description": "Shift each node by  x y z before calculating spherical coordinates. Default is the center of the surface. Both sph_coords options output the following: Col. 0: Node Index Col. 1: R (radius) Col. 2: T (azimuth) Col. 3: P (elevation)",
            "id": "SPH_COORDS_CENTER",
            "name": "SPH_COORDS_CENTER",
            "optional": true,
            "type": "String",
            "value-key": "[SPH_COORDS_CENTER]"
        },
        {
            "command-line-flag": "-boundary_nodes",
            "description": "Output nodes that form a boundary of a surface i.e. they form edges that belong to one and only one triangle.",
            "id": "BOUNDARY_NODES",
            "name": "BOUNDARY_NODES",
            "optional": true,
            "type": "String",
            "value-key": "[BOUNDARY_NODES]"
        },
        {
            "command-line-flag": "-boundary_triangles",
            "description": "Output triangles that form a boundary of a surface i.e. they contain edges that belong to one and only one triangle.",
            "id": "BOUNDARY_TRIANGLES",
            "name": "BOUNDARY_TRIANGLES",
            "optional": true,
            "type": "String",
            "value-key": "[BOUNDARY_TRIANGLES]"
        },
        {
            "command-line-flag": "-internal_nodes",
            "description": "Output nodes that are not a boundary. i.e. they form edges that belong to more than one triangle.  You can use any or all of these metrics simultaneously.  (-SURF_1):  An option for specifying the surface. (For option's syntax, see 'Specifying input surfaces' section below).",
            "id": "INTERNAL_NODES",
            "name": "INTERNAL_NODES",
            "optional": true,
            "type": "String",
            "value-key": "[INTERNAL_NODES]"
        },
        {
            "command-line-flag": "-sv",
            "description": "-sv SurfaceVolume [VolParam for sf surfaces]: Specify a surface volume for surface alignment. See ConvertSurface -help for more info.",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-tlrc",
            "description": "Apply Talairach transform to surface. See ConvertSurface -help for more info.",
            "id": "TLRC",
            "name": "TLRC",
            "optional": true,
            "type": "String",
            "value-key": "[TLRC]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Use prefix for output files. (default is prefix of inSurf)",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-quiet",
            "description": "Quiet  Options for applying arbitrary affine transform: [xyz_new] = [Mr] * [xyz_old - cen] + D + cen",
            "id": "QUIET",
            "name": "QUIET",
            "optional": true,
            "type": "String",
            "value-key": "[QUIET]"
        },
        {
            "command-line-flag": "-xmat_1D",
            "description": "Apply transformation specified in 1D file mat.1D. to the surface's coordinates. [mat] = [Mr][D] is of the form: r11 r12 r13 D1 r21 r22 r23 D2 r31 r32 r33 D3 or r11 r12 r13 D1 r21 r22 r23 D2 r31 r32 r33 D3",
            "id": "XMAT_1D",
            "name": "XMAT_1D",
            "optional": true,
            "type": "String",
            "value-key": "[XMAT_1D]"
        },
        {
            "command-line-flag": "-ixmat_1D",
            "description": "Same as xmat_1D except that mat is replaced by inv(mat)  NOTE: For both -xmat_1D and -ixmat_1D, you can replace mat with one of the special strings: 'RandShift', 'RandRigid', or 'RandAffine' which would create a transform on the fly.",
            "id": "IXMAT_1D",
            "name": "IXMAT_1D",
            "optional": true,
            "type": "String",
            "value-key": "[IXMAT_1D]"
        },
        {
            "command-line-flag": "-seed",
            "description": "Use SEED to seed the random number generator for random matrix generation",
            "id": "SEED",
            "name": "SEED",
            "optional": true,
            "type": "String",
            "value-key": "[SEED]"
        },
        {
            "command-line-flag": "-xcenter",
            "description": "Use vector cen = [x y z]' for rotation center. Default is cen = [0 0 0]'",
            "id": "XCENTER",
            "name": "XCENTER",
            "optional": true,
            "type": "String",
            "value-key": "[XCENTER]"
        },
        {
            "command-line-flag": "-polar_decomp",
            "description": "Apply polar decomposition to mat and preserve orthogonal component and shift only. For more information, see cat_matvec's -P option. This option can only be used in conjunction with -xmat_1D",
            "id": "POLAR_DECOMP",
            "name": "POLAR_DECOMP",
            "optional": true,
            "type": "String",
            "value-key": "[POLAR_DECOMP]"
        },
        {
            "command-line-flag": "-h",
            "description": "Show most of the options",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-help",
            "description": "Show all of the options  Specifying input surfaces using -i or -i_TYPE options:",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-i_TYPE",
            "description": "-i_TYPE inSurf specifies the input surface, TYPE is one of the following: fs: FreeSurfer surface. If surface name has .asc it is assumed to be in ASCII format. Otherwise it is assumed to be in BINARY_BE (Big Endian) format. Patches in Binary format cannot be read at the moment. sf: SureFit surface. You must specify the .coord followed by the .topo file. vec (or 1D): Simple ascii matrix format. You must specify the coord (NodeList) file followed by the topo (FaceSetList) file. coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. Only vertex and triangulation info is preserved. stl: STL format, ascii or binary. This format of no use for much of the surface-based analyses. Objects are defined as a soup of triangles with no information about which edges they share. STL is only useful for taking surface models to some 3D printing software. mni: MNI .obj format, ascii only. Only vertex, triangulation, and node normals info is preserved. byu: BYU format, ascii. Polygons with more than 3 edges are turned into triangles. bv: BrainVoyager format. Only vertex and triangulation info is preserved. dx: OpenDX ascii mesh format. Only vertex and triangulation info is preserved. Requires presence of 3 objects, the one of class 'field' should contain 2 components 'positions' and 'connections' that point to the two objects containing node coordinates and topology, respectively. gii: GIFTI XML surface format. obj: OBJ file format for triangular meshes only. The following primitives are preserved: v (vertices), (faces, triangles only), and p (points) Note that if the surface filename has the proper extension, it is enough to use the -i option and let the programs guess the type from the extension.  You can also specify multiple surfaces after -i option. This makes it possible to use wildcards on the command line for reading in a bunch of surfaces at once.",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-onestate",
            "description": "Make all -i_* surfaces have the same state, i.e. they all appear at the same time in the viewer. By default, each -i_* surface has its own state. For -onestate to take effect, it must precede all -i options with on the command line.",
            "id": "ONESTATE",
            "name": "ONESTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ONESTATE]"
        },
        {
            "command-line-flag": "-anatomical",
            "description": "Label all -i surfaces as anatomically correct. Again, this option should precede the -i_* options.  More variants for option -i: ----------------------------- You can also load standard-mesh spheres that are formed in memory with the following notation",
            "id": "ANATOMICAL",
            "name": "ANATOMICAL",
            "optional": true,
            "type": "String",
            "value-key": "[ANATOMICAL]"
        },
        {
            "command-line-flag": "-i",
            "description": "Where NUM is the parameter controlling the mesh density exactly as the parameter -ld linDepth does in CreateIcosahedron. For example: suma -i ld60 create on the fly a surface that is identical to the one produced by: CreateIcosahedron -ld 60 -tosphere",
            "id": "I",
            "name": "I",
            "optional": true,
            "type": "String",
            "value-key": "[I]"
        },
        {
            "command-line-flag": "-tn",
            "description": "specify surface type and name. See below for help on the parameters.",
            "id": "TN",
            "name": "TN",
            "optional": true,
            "type": "String",
            "value-key": "[TN]"
        },
        {
            "command-line-flag": "-tsn",
            "description": "specify surface type state and name. TYPE: Choose from the following (case sensitive): 1D: 1D format FS: FreeSurfer ascii format PLY: ply format MNI: MNI obj ascii format BYU: byu format SF: Caret/SureFit format BV: BrainVoyager format GII: GIFTI format NAME: Name of surface file. For SF and 1D formats, NAME is composed of two names the coord file followed by the topo file STATE: State of the surface. Default is S1, S2.... for each surface. Specifying a Surface Volume:",
            "id": "TSN",
            "name": "TSN",
            "optional": true,
            "type": "String",
            "value-key": "[TSN]"
        },
        {
            "command-line-flag": "-spec",
            "description": "specify the name of the SPEC file. As with option -i, you can load template spec files with symbolic notation trickery as in: suma -spec MNI_N27 which will load the all the surfaces from template MNI_N27 at the original FreeSurfer mesh density. The string following -spec is formatted in the following manner: HEMI:TEMPLATE:DENSITY where: HEMI specifies a hemisphere. Choose from 'l', 'r', 'lh', 'rh', 'lr', or 'both' which is the default if you do not specify a hemisphere. TEMPLATE: Specify the template name. For now, choose from MNI_N27 if you want surfaces from the MNI_N27 volume, or TT_N27 for the Talairach version. Those templates must be installed under this directory: /root/.afni/data/ If you have no surface templates there, download one of: https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_TT_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI152_2009.tgz and untar them under directory /root/.afni/data/ DENSITY: Use if you want to load standard-mesh versions of the template surfaces. Note that only ld20, ld60, ld120, and ld141 are in the current distributed templates. You can create other densities if you wish with MapIcosahedron, but follow the same naming convention to enable SUMA to find them. This parameter is optional. The order in which you specify HEMI, TEMPLATE, and DENSITY, does not matter. For template surfaces, the -sv option is provided automatically, so you can have SUMA talking to AFNI with something like: suma -spec MNI_N27:ld60 & afni -niml /root/.afni/data/suma_MNI_N27  Specifying a surface using -surf_? method:",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-surf_A",
            "description": "specify the name of the first surface to load. If the program requires or allows multiple surfaces, use -surf_B ... -surf_Z . You need not use _A if only one surface is expected. SURFACE is the name of the surface as specified in the SPEC file. The use of -surf_ option requires the use of -spec option.  [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "SURF_A",
            "name": "SURF_A",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_A]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.    Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        },
        {
            "description": "NA",
            "id": "<-Metric1>",
            "name": "<-Metric1>",
            "optional": false,
            "type": "String",
            "value-key": "[<-METRIC1>]"
        },
        {
            "description": "NA",
            "id": "[",
            "name": "[",
            "optional": false,
            "type": "String",
            "value-key": "[[]"
        },
        {
            "description": "NA",
            "id": "...]",
            "name": "...]",
            "optional": false,
            "type": "String",
            "value-key": "[...]]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}