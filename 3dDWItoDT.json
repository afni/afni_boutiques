{
    "command-line": "3dDWItoDT [PREFIX] [AUTOMASK] [MASK] [BMATRIX_NZ] [BMATRIX_Z] [BMATRIX_FULL] [SCALE_OUT_1000] [BMAX_REF] [NONLINEAR] [LINEAR] [REWEIGHT] [MAX_ITER] [MAX_ITER_RW] [EIGS] [DEBUG_BRIKS] [CUMULATIVE_WTS] [VERBOSE] [DRIVE_AFNI] [SEP_DSETS] [CSF_VAL] [MIN_BAD_MD] [CSF_FA] [OPT] [MEAN_B0] [GRADIENT-FILE] [DATASET]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-prefix",
            "description": "Use 'pname' for the output dataset prefix name. [default='DT']",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-automask",
            "description": "mask dataset so that the tensors are computed only for high-intensity (presumably brain) voxels.  The intensity level is determined the same way that 3dClipLevel works.",
            "id": "AUTOMASK",
            "name": "AUTOMASK",
            "optional": true,
            "type": "String",
            "value-key": "[AUTOMASK]"
        },
        {
            "command-line-flag": "-mask",
            "description": "use dset as mask to include/exclude voxels",
            "id": "MASK",
            "name": "MASK",
            "optional": true,
            "type": "String",
            "value-key": "[MASK]"
        },
        {
            "command-line-flag": "-bmatrix_NZ",
            "description": "switch to note that the input dataset is b-matrix, not gradient directions, and there is *no* row of zeros at the top of the file, similar to the format for the grad input: N-1 rows in this file for N vols in matched data set. There must be 6 columns of data, representing either elements of G_{ij} = g_i*g_j (i.e., dyad of gradients, without b-value included) or of the DW scaled version, B_{ij} = b*g_i*g_j. The order of components is: G_xx G_yy G_zz G_xy G_xz G_yz.",
            "id": "BMATRIX_NZ",
            "name": "BMATRIX_NZ",
            "optional": true,
            "type": "String",
            "value-key": "[BMATRIX_NZ]"
        },
        {
            "command-line-flag": "-bmatrix_Z",
            "description": "similar to '-bmatrix_NZ' above, but assumes that first row of the file is all zeros (or whatever the b-value for the reference volume was!), i.e. there are N rows to the text file and N volumes in the matched data set.",
            "id": "BMATRIX_Z",
            "name": "BMATRIX_Z",
            "optional": true,
            "type": "String",
            "value-key": "[BMATRIX_Z]"
        },
        {
            "command-line-flag": "-bmatrix_FULL",
            "description": "exact same as '-bmatrix_Z FF' above (i.e. there are N rows to the text file and N volumes in the matched data set) with just a lot more commonsensical name.  Definitely would be preferred way to go, for ease of usage!",
            "id": "BMATRIX_FULL",
            "name": "BMATRIX_FULL",
            "optional": true,
            "type": "String",
            "value-key": "[BMATRIX_FULL]"
        },
        {
            "command-line-flag": "-scale_out_1000",
            "description": "increase output parameters that have physical units (DT, MD, RD, L1, L2 and L3) by multiplying them by 1000. This might be convenient, as the input bmatrix/gradient values can have their physical magnitudes of ~1000 s/mm^2, for which typical adult WM has diffusion values of MD~0.0007 (in physical units of mm^2/s), and people might not like so many decimal points output; using this option rescales the input b-values and would lead to having a typical MD~0.7 (now in units of x10^{-3} mm^2/s).  If you are not using bmatrix/gradient values that have their physical scalings, then using this switch probably wouldn't make much sense. FA, V1, V2 and V3 are unchanged.",
            "id": "SCALE_OUT_1000",
            "name": "SCALE_OUT_1000",
            "optional": true,
            "type": "String",
            "value-key": "[SCALE_OUT_1000]"
        },
        {
            "command-line-flag": "-bmax_ref",
            "description": "if the 'reference' bvalue is actually >0, you can flag that here.  Otherwise, it is assumed to be zero. At present, this is probably only useful/meaningful if using the '-bmatrix_Z ...' or '-bmatrix_FULL ...' option, where the reference bvalue must be found and identified from the input info alone.",
            "id": "BMAX_REF",
            "name": "BMAX_REF",
            "optional": true,
            "type": "String",
            "value-key": "[BMAX_REF]"
        },
        {
            "command-line-flag": "-nonlinear",
            "description": "compute iterative solution to avoid negative eigenvalues. This is the default method.",
            "id": "NONLINEAR",
            "name": "NONLINEAR",
            "optional": true,
            "type": "String",
            "value-key": "[NONLINEAR]"
        },
        {
            "command-line-flag": "-linear",
            "description": "compute simple linear solution.",
            "id": "LINEAR",
            "name": "LINEAR",
            "optional": true,
            "type": "String",
            "value-key": "[LINEAR]"
        },
        {
            "command-line-flag": "-reweight",
            "description": "recompute weight factors at end of iterations and restart",
            "id": "REWEIGHT",
            "name": "REWEIGHT",
            "optional": true,
            "type": "String",
            "value-key": "[REWEIGHT]"
        },
        {
            "command-line-flag": "-max_iter",
            "description": "maximum number of iterations for convergence (Default=10). Values can range from -1 to any positive integer less than 101. A value of -1 is equivalent to the linear solution. A value of 0 results in only the initial estimate of the diffusion tensor solution adjusted to avoid negative eigenvalues.",
            "id": "MAX_ITER",
            "name": "MAX_ITER",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_ITER]"
        },
        {
            "command-line-flag": "-max_iter_rw",
            "description": "max number of iterations after reweighting (Default=5) values can range from 1 to any positive integer less than 101.",
            "id": "MAX_ITER_RW",
            "name": "MAX_ITER_RW",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_ITER_RW]"
        },
        {
            "command-line-flag": "-eigs",
            "description": "compute eigenvalues, eigenvectors, fractional anisotropy and mean diffusivity in sub-briks 6-19. Computed as in 3dDTeig",
            "id": "EIGS",
            "name": "EIGS",
            "optional": true,
            "type": "String",
            "value-key": "[EIGS]"
        },
        {
            "command-line-flag": "-debug_briks",
            "description": "add sub-briks with Ed (error functional), Ed0 (orig. error), number of steps to convergence and I0 (modeled B0 volume). [May, 2017] This also now calculates two goodness-of-fit measures and outputs a new PREFIX_CHI* dset that has two briks: brik [0]: chi^2_p, brik [1]: chi^2_c. These values are essentially calculated according to Papadakis et al. (2003, JMRI), Eqs. 4 and 3, respectively (in chi^2_c, the sigma value is the variance of measured DWIs *per voxel*). Note for both chi* values, only DWI signal values are used in the calculation (i.e., where b>THR; by default, THR=0.01, which can be changed using '-bmax_ref ...'). In general, chi^2_p values seem to be <<1, consistent with Papadakis et al.'s Fig. 4; the chi^2_c values are are also pretty consistent with the same fig and seem to be best viewed with the upper limit being roughly =Ndwi or =Ndwi-7 (with the latter being the given degrees of freedom value by Papadakis et al.)",
            "id": "DEBUG_BRIKS",
            "name": "DEBUG_BRIKS",
            "optional": true,
            "type": "String",
            "value-key": "[DEBUG_BRIKS]"
        },
        {
            "command-line-flag": "-cumulative_wts",
            "description": "show overall weight factors for each gradient level May be useful as a quality control",
            "id": "CUMULATIVE_WTS",
            "name": "CUMULATIVE_WTS",
            "optional": true,
            "type": "String",
            "value-key": "[CUMULATIVE_WTS]"
        },
        {
            "command-line-flag": "-verbose",
            "description": "print convergence steps every nnnnn voxels that survive to convergence loops (can be quite lengthy).",
            "id": "VERBOSE",
            "name": "VERBOSE",
            "optional": true,
            "type": "String",
            "value-key": "[VERBOSE]"
        },
        {
            "command-line-flag": "-drive_afni",
            "description": "show convergence graphs every nnnnn voxels that survive to convergence loops. AFNI must have NIML communications on (afni -niml)",
            "id": "DRIVE_AFNI",
            "name": "DRIVE_AFNI",
            "optional": true,
            "type": "String",
            "value-key": "[DRIVE_AFNI]"
        },
        {
            "command-line-flag": "-sep_dsets",
            "description": "save tensor, eigenvalues, vectors, FA, MD in separate datasets",
            "id": "SEP_DSETS",
            "name": "SEP_DSETS",
            "optional": true,
            "type": "String",
            "value-key": "[SEP_DSETS]"
        },
        {
            "command-line-flag": "-csf_val",
            "description": "-csf_val n.nnn = assign diffusivity value to DWI data where the mean values for b=0 volumes is less than the mean of the remaining volumes at each voxel. The default value is '1.0 divided by the max bvalue in the grads/bmatrices'. The assumption is that there are flow artifacts in CSF and blood vessels that give rise to lower b=0 voxels. NB: MD, RD L1, L2, L3, Dxx, Dyy, etc. values are all scaled in the same way.",
            "id": "CSF_VAL",
            "name": "CSF_VAL",
            "optional": true,
            "type": "String",
            "value-key": "[CSF_VAL]"
        },
        {
            "command-line-flag": "-min_bad_md",
            "description": "change the min MD value used as a 'badness check' for tensor fits that have veeery (-> unreasonably) large MD values. Voxels where MD > N*(csf_val) will be treated like CSF and turned into spheres with radius csf_val (default N=100).",
            "id": "MIN_BAD_MD",
            "name": "MIN_BAD_MD",
            "optional": true,
            "type": "String",
            "value-key": "[MIN_BAD_MD]"
        },
        {
            "command-line-flag": "-csf_fa",
            "description": "-csf_fa n.nnn  = assign a specific FA value to those voxels described above The default is 0.012345678 for use in tractography programs that may make special use of these voxels",
            "id": "CSF_FA",
            "name": "CSF_FA",
            "optional": true,
            "type": "String",
            "value-key": "[CSF_FA]"
        },
        {
            "command-line-flag": "-opt",
            "description": "if mname is 'powell', use Powell's 2004 method for optimization. If mname is 'gradient' use gradient descent method. If mname is 'hybrid', use combination of methods. MJD Powell, \"The NEWUOA software for unconstrained optimization without derivatives\", Technical report DAMTP 2004/NA08, Cambridge University Numerical Analysis Group -- http://www.damtp.cam.ac.uk/user/na/reports.html",
            "id": "OPT",
            "name": "OPT",
            "optional": true,
            "type": "String",
            "value-key": "[OPT]"
        },
        {
            "command-line-flag": "-mean_b0",
            "description": "use mean of all b=0 volumes for linear computation and initial linear for nonlinear method  Example: 3dDWItoDT -prefix rw01 -automask -reweight -max_iter 10 \\ -max_iter_rw 10 tensor25.1D grad02+orig.  The output is a 6 sub-brick bucket dataset containing Dxx, Dxy, Dyy, Dxz, Dyz, Dzz (the lower triangular, row-wise elements of the tensor in symmetric matrix form). Additional sub-briks may be appended with the -eigs and -debug_briks options.  These results are appropriate as the input to 3dDTeig.   INPUT DATASET NAMES ------------------- This program accepts datasets that are modified on input according to the following schemes: 'r1+orig[3..5]'                                    {sub-brick selector} 'r1+orig<100..200>'                                {sub-range selector} 'r1+orig[3..5]<100..200>'                          {both selectors} '3dcalc( -a r1+orig -b r2+orig -expr 0.5*(a+b) )'  {calculation} For the gruesome details, see the output of 'afni -help'.",
            "id": "MEAN_B0",
            "name": "MEAN_B0",
            "optional": true,
            "type": "String",
            "value-key": "[MEAN_B0]"
        },
        {
            "description": "NA",
            "id": "gradient-file",
            "name": "gradient-file",
            "optional": false,
            "type": "String",
            "value-key": "[GRADIENT-FILE]"
        },
        {
            "description": "NA",
            "id": "dataset",
            "name": "dataset",
            "optional": false,
            "type": "String",
            "value-key": "[DATASET]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}