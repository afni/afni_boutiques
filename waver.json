{
    "command-line": "waver [WAV] [GAM] [EXPR] [FILE] [DELAYTIME] [RISETIME] [FALLTIME] [UNDERSHOOT] [RESTORETIME] [GAMB] [GAMC] [GAMD] [PEAK] [DT] [TR] [XYOUT] [INPUT] [INLINE] [TSTIM] [WHEN] [NUMOUT] [VER] [>] [OUTPUT_FILENAME]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-WAV",
            "description": "Sets waveform to Cox special                    [default] cf. AFNI FAQ list for formulas: https://afni.nimh.nih.gov/afni/doc/faq/17",
            "id": "WAV",
            "name": "WAV",
            "optional": true,
            "type": "String",
            "value-key": "[WAV]"
        },
        {
            "command-line-flag": "-GAM",
            "description": "Sets waveform to form t^b * exp(-t/c) (cf. Mark Cohen)",
            "id": "GAM",
            "name": "GAM",
            "optional": true,
            "type": "String",
            "value-key": "[GAM]"
        },
        {
            "command-line-flag": "-EXPR",
            "description": "-EXPR \"expression\" = Sets waveform to the expression given, which should depend on the variable 't'. e.g.: -EXPR \"step(t-2)*step(12-t)*(t-2)*(12-t)\" N.B.: The peak value of the expression on the '-dt' grid will be scaled to the value given by '-peak'; if this is not desired, set '-peak 0', and the 'natural' peak value of the expression will be used.",
            "id": "EXPR",
            "name": "EXPR",
            "optional": true,
            "type": "String",
            "value-key": "[EXPR]"
        },
        {
            "command-line-flag": "-FILE",
            "description": "Sets waveform to the values read from the file 'wname', which should be a single column .1D file (i.e., 1 ASCII number per line).  The 'dt value is the time step (in seconds) between lines in 'wname'; the first value will be at t=0, the second at t='dt', etc.  Intermediate time values will be linearly interpolated.  Times past the the end of the 'wname' file length will have the waveform value set to zero. *** N.B.: If the -peak option is used AFTER -FILE, its value will be multiplied into the result.  These options set parameters for the -WAV waveform.",
            "id": "FILE",
            "name": "FILE",
            "optional": true,
            "type": "String",
            "value-key": "[FILE]"
        },
        {
            "command-line-flag": "-delaytime",
            "description": "-delaytime #   = Sets delay time to # seconds                [2]",
            "id": "DELAYTIME",
            "name": "DELAYTIME",
            "optional": true,
            "type": "String",
            "value-key": "[DELAYTIME]"
        },
        {
            "command-line-flag": "-risetime",
            "description": "-risetime #    = Sets rise time to # seconds                 [4]",
            "id": "RISETIME",
            "name": "RISETIME",
            "optional": true,
            "type": "String",
            "value-key": "[RISETIME]"
        },
        {
            "command-line-flag": "-falltime",
            "description": "-falltime #    = Sets fall time to # seconds                 [6]",
            "id": "FALLTIME",
            "name": "FALLTIME",
            "optional": true,
            "type": "String",
            "value-key": "[FALLTIME]"
        },
        {
            "command-line-flag": "-undershoot",
            "description": "-undershoot #  = Sets undershoot to # times the peak         [0.2] (this should be a nonnegative factor)",
            "id": "UNDERSHOOT",
            "name": "UNDERSHOOT",
            "optional": true,
            "type": "String",
            "value-key": "[UNDERSHOOT]"
        },
        {
            "command-line-flag": "-restoretime",
            "description": "-restoretime # = Sets time to restore from undershoot        [2]  These options set parameters for the -GAM waveform:",
            "id": "RESTORETIME",
            "name": "RESTORETIME",
            "optional": true,
            "type": "String",
            "value-key": "[RESTORETIME]"
        },
        {
            "command-line-flag": "-gamb",
            "description": "-gamb #        = Sets the parameter 'b' to #                 [8.6]",
            "id": "GAMB",
            "name": "GAMB",
            "optional": true,
            "type": "String",
            "value-key": "[GAMB]"
        },
        {
            "command-line-flag": "-gamc",
            "description": "-gamc #        = Sets the parameter 'c' to #                 [0.547]",
            "id": "GAMC",
            "name": "GAMC",
            "optional": true,
            "type": "String",
            "value-key": "[GAMC]"
        },
        {
            "command-line-flag": "-gamd",
            "description": "-gamd #        = Sets the delay time to # seconds            [0.0]  These options apply to all waveform types:",
            "id": "GAMD",
            "name": "GAMD",
            "optional": true,
            "type": "String",
            "value-key": "[GAMD]"
        },
        {
            "command-line-flag": "-peak",
            "description": "-peak #        = Sets peak value to #                        [100]",
            "id": "PEAK",
            "name": "PEAK",
            "optional": true,
            "type": "String",
            "value-key": "[PEAK]"
        },
        {
            "command-line-flag": "-dt",
            "description": "-dt #          = Sets time step of output AND input          [0.1]",
            "id": "DT",
            "name": "DT",
            "optional": true,
            "type": "String",
            "value-key": "[DT]"
        },
        {
            "command-line-flag": "-TR",
            "description": "-TR #          = '-TR' is equivalent to '-dt'  The default is just to output the waveform defined by the parameters above.  If an input file is specified by one the options below, then the timeseries defined by that file will be convolved with the ideal waveform defined above -- that is, each nonzero point in the input timeseries will generate a copy of the waveform starting at that point in time, with the amplitude scaled by the input timeseries value.",
            "id": "TR",
            "name": "TR",
            "optional": true,
            "type": "String",
            "value-key": "[TR]"
        },
        {
            "command-line-flag": "-xyout",
            "description": "Output data in 2 columns: 1=time 2=waveform (useful for graphing) [default is 1 column=waveform]",
            "id": "XYOUT",
            "name": "XYOUT",
            "optional": true,
            "type": "String",
            "value-key": "[XYOUT]"
        },
        {
            "command-line-flag": "-input",
            "description": "Read timeseries from *.1D formatted 'infile'; convolve with waveform to produce output N.B.: you can use a sub-vector selector to choose a particular column of infile, as in -input 'fred.1D[3]'",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-inline",
            "description": "Read timeseries from command line DATA; convolve with waveform to produce output DATA is in the form of numbers and count@value, as in -inline 20@0.0 5@1.0 30@0.0 1.0 20@0.0 2.0 which means a timeseries with 20 zeros, then 5 ones, then 30 zeros, a single 1, 20 more zeros, and a final 2. [The '@' character may actually be any of: '@', '*', 'x', 'X'. Note that * must be typed as \\* to prevent the shell from trying to interpret it as a filename wildcard.]",
            "id": "INLINE",
            "name": "INLINE",
            "optional": true,
            "type": "String",
            "value-key": "[INLINE]"
        },
        {
            "command-line-flag": "-tstim",
            "description": "Read discrete stimulation times from the command line and convolve the waveform with delta-functions at those times.  In this input format, the times do NOT have to be at intervals of '-dt'.  For example",
            "id": "TSTIM",
            "name": "TSTIM",
            "optional": true,
            "type": "String",
            "value-key": "[TSTIM]"
        },
        {
            "command-line-flag": "-when",
            "description": "Read time blocks when stimulus is 'on' (=1) from the command line and convolve the waveform with with a zero-one input.  For example: -when 20..40 60..80 means that the stimulus function is 1.0 for time steps number 20 to 40, and 60 to 80 (inclusive), and zero otherwise.  (The first time step is numbered 0.)",
            "id": "WHEN",
            "name": "WHEN",
            "optional": true,
            "type": "String",
            "value-key": "[WHEN]"
        },
        {
            "command-line-flag": "-numout",
            "description": "Output a timeseries with NN points; if this option is not given, then enough points are output to let the result tail back down to zero.",
            "id": "NUMOUT",
            "name": "NUMOUT",
            "optional": true,
            "type": "String",
            "value-key": "[NUMOUT]"
        },
        {
            "command-line-flag": "-ver",
            "description": "Output version information and exit.  * Only one of the 3 timeseries input options above can be used at a time. * Using the AFNI program 1dplot, you can do something like the following, to check if the results make sense: waver -GAM -tstim 0 7.7 | 1dplot -stdin * Note that program 3dDeconvolve can now generate many different waveforms internally, markedly reducing the need for this program. * If a square wave is desired, see the 'sqwave' program.  ++ Compile date = Sep  7 2018 {:}",
            "id": "VER",
            "name": "VER",
            "optional": true,
            "type": "String",
            "value-key": "[VER]"
        },
        {
            "description": "NA",
            "id": ">",
            "name": ">",
            "optional": false,
            "type": "String",
            "value-key": "[>]"
        },
        {
            "description": "NA",
            "id": "output_filename",
            "name": "output_filename",
            "optional": false,
            "type": "String",
            "value-key": "[OUTPUT_FILENAME]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}