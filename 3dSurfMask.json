{
    "command-line": "3dSurfMask [I_TYPE] [PREFIX] [GRID_PARENT] [MASK_ONLY] [FLIP_ORIENTATION] [FILL_METHOD] [NO_DIST] [ONESTATE] [ANATOMICAL] [I] [TN] [TSN] [SV] [SPEC] [SURF_A] [<-I_TYPE] [SURFACE>] [<-PREFIX] [PREFIX>]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-i_TYPE",
            "description": "Specify input surface. You can also use -t* and -spec and -surf methods to input surfaces. See below for more details.",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Prefix of output dataset.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-grid_parent",
            "description": "Specifies the grid for the output volume. Other parameters:",
            "id": "GRID_PARENT",
            "name": "GRID_PARENT",
            "optional": true,
            "type": "String",
            "value-key": "[GRID_PARENT]"
        },
        {
            "command-line-flag": "-mask_only",
            "description": "Produce an output dataset where voxels are 1 inside the surface and 0 outside, instead of the more nuanced output above.",
            "id": "MASK_ONLY",
            "name": "MASK_ONLY",
            "optional": true,
            "type": "String",
            "value-key": "[MASK_ONLY]"
        },
        {
            "command-line-flag": "-flip_orientation",
            "description": "Flip triangle winding of surface mesh. Use this option when the sign of the distances in PREFIX.m comes out wrong. Voxels inside the surface have a positive distance. This can happen when the winding of the triangles is reversed.",
            "id": "FLIP_ORIENTATION",
            "name": "FLIP_ORIENTATION",
            "optional": true,
            "type": "String",
            "value-key": "[FLIP_ORIENTATION]"
        },
        {
            "command-line-flag": "-fill_method",
            "description": "METH can take two values; SLOW, and FAST[default]. FAST can produce holes under certain conditions.",
            "id": "FILL_METHOD",
            "name": "FILL_METHOD",
            "optional": true,
            "type": "String",
            "value-key": "[FILL_METHOD]"
        },
        {
            "command-line-flag": "-no_dist",
            "description": "Do not compute the distances, just the mask from the first step.  Example: (tcsh syntax) 1- Find distance of voxels around and inside of toy surface:  echo 'Create toy data' @auto_tlrc -base TT_N27+tlrc -base_copy ToyVolume  CreateIcosahedron -rad 50 -ld 1 sed 's/Anatomical = N/Anatomical = Y/' CreateIco.spec > __ttt mv __ttt CreateIco.spec  echo 'Do computations' 3dSurfMask -i_fs CreateIco.asc -sv ToyVolume+tlrc \\ -prefix ToyMasks -flip_orientation   \\ -grid_parent ToyVolume+tlrc  echo 'Cut and paste commands below to show you the results' suma -npb 70 -niml -spec CreateIco.spec -sv ToyVolume+tlrc & afni -npb 70 -niml -yesplugouts & DriveSuma -npb 70 -com viewer_cont -key 't' plugout_drive -npb 70 -com 'SET_OVERLAY A ToyMasks.d' \\ -com 'SET_THRESHOLD A.0'  \\ -com 'SET_PBAR_NUMBER A.10'  \\ -quit  See also examples in SurfPatch -help  Specifying input surfaces using -i or -i_TYPE options: -i_TYPE inSurf specifies the input surface, TYPE is one of the following: fs: FreeSurfer surface. If surface name has .asc it is assumed to be in ASCII format. Otherwise it is assumed to be in BINARY_BE (Big Endian) format. Patches in Binary format cannot be read at the moment. sf: SureFit surface. You must specify the .coord followed by the .topo file. vec (or 1D): Simple ascii matrix format. You must specify the coord (NodeList) file followed by the topo (FaceSetList) file. coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. Only vertex and triangulation info is preserved. stl: STL format, ascii or binary. This format of no use for much of the surface-based analyses. Objects are defined as a soup of triangles with no information about which edges they share. STL is only useful for taking surface models to some 3D printing software. mni: MNI .obj format, ascii only. Only vertex, triangulation, and node normals info is preserved. byu: BYU format, ascii. Polygons with more than 3 edges are turned into triangles. bv: BrainVoyager format. Only vertex and triangulation info is preserved. dx: OpenDX ascii mesh format. Only vertex and triangulation info is preserved. Requires presence of 3 objects, the one of class 'field' should contain 2 components 'positions' and 'connections' that point to the two objects containing node coordinates and topology, respectively. gii: GIFTI XML surface format. obj: OBJ file format for triangular meshes only. The following primitives are preserved: v (vertices), (faces, triangles only), and p (points) Note that if the surface filename has the proper extension, it is enough to use the -i option and let the programs guess the type from the extension.  You can also specify multiple surfaces after -i option. This makes it possible to use wildcards on the command line for reading in a bunch of surfaces at once.",
            "id": "NO_DIST",
            "name": "NO_DIST",
            "optional": true,
            "type": "String",
            "value-key": "[NO_DIST]"
        },
        {
            "command-line-flag": "-onestate",
            "description": "Make all -i_* surfaces have the same state, i.e. they all appear at the same time in the viewer. By default, each -i_* surface has its own state. For -onestate to take effect, it must precede all -i options with on the command line.",
            "id": "ONESTATE",
            "name": "ONESTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ONESTATE]"
        },
        {
            "command-line-flag": "-anatomical",
            "description": "Label all -i surfaces as anatomically correct. Again, this option should precede the -i_* options.  More variants for option -i: ----------------------------- You can also load standard-mesh spheres that are formed in memory with the following notation",
            "id": "ANATOMICAL",
            "name": "ANATOMICAL",
            "optional": true,
            "type": "String",
            "value-key": "[ANATOMICAL]"
        },
        {
            "command-line-flag": "-i",
            "description": "Where NUM is the parameter controlling the mesh density exactly as the parameter -ld linDepth does in CreateIcosahedron. For example: suma -i ld60 create on the fly a surface that is identical to the one produced by: CreateIcosahedron -ld 60 -tosphere",
            "id": "I",
            "name": "I",
            "optional": true,
            "type": "String",
            "value-key": "[I]"
        },
        {
            "command-line-flag": "-tn",
            "description": "specify surface type and name. See below for help on the parameters.",
            "id": "TN",
            "name": "TN",
            "optional": true,
            "type": "String",
            "value-key": "[TN]"
        },
        {
            "command-line-flag": "-tsn",
            "description": "specify surface type state and name. TYPE: Choose from the following (case sensitive): 1D: 1D format FS: FreeSurfer ascii format PLY: ply format MNI: MNI obj ascii format BYU: byu format SF: Caret/SureFit format BV: BrainVoyager format GII: GIFTI format NAME: Name of surface file. For SF and 1D formats, NAME is composed of two names the coord file followed by the topo file STATE: State of the surface. Default is S1, S2.... for each surface. Specifying a Surface Volume:",
            "id": "TSN",
            "name": "TSN",
            "optional": true,
            "type": "String",
            "value-key": "[TSN]"
        },
        {
            "command-line-flag": "-sv",
            "description": "-sv SurfaceVolume [VolParam for sf surfaces] If you supply a surface volume, the coordinates of the input surface. are modified to SUMA's convention and aligned with SurfaceVolume. You must also specify a VolParam file for SureFit surfaces. Specifying a surface specification (spec) file:",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-spec",
            "description": "specify the name of the SPEC file. As with option -i, you can load template spec files with symbolic notation trickery as in: suma -spec MNI_N27 which will load the all the surfaces from template MNI_N27 at the original FreeSurfer mesh density. The string following -spec is formatted in the following manner: HEMI:TEMPLATE:DENSITY where: HEMI specifies a hemisphere. Choose from 'l', 'r', 'lh', 'rh', 'lr', or 'both' which is the default if you do not specify a hemisphere. TEMPLATE: Specify the template name. For now, choose from MNI_N27 if you want surfaces from the MNI_N27 volume, or TT_N27 for the Talairach version. Those templates must be installed under this directory: /root/.afni/data/ If you have no surface templates there, download one of: https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_TT_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI152_2009.tgz and untar them under directory /root/.afni/data/ DENSITY: Use if you want to load standard-mesh versions of the template surfaces. Note that only ld20, ld60, ld120, and ld141 are in the current distributed templates. You can create other densities if you wish with MapIcosahedron, but follow the same naming convention to enable SUMA to find them. This parameter is optional. The order in which you specify HEMI, TEMPLATE, and DENSITY, does not matter. For template surfaces, the -sv option is provided automatically, so you can have SUMA talking to AFNI with something like: suma -spec MNI_N27:ld60 & afni -niml /root/.afni/data/suma_MNI_N27  Specifying a surface using -surf_? method:",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-surf_A",
            "description": "specify the name of the first surface to load. If the program requires or allows multiple surfaces, use -surf_B ... -surf_Z . You need not use _A if only one surface is expected. SURFACE is the name of the surface as specified in the SPEC file. The use of -surf_ option requires the use of -spec option.  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "SURF_A",
            "name": "SURF_A",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_A]"
        },
        {
            "description": "NA",
            "id": "<-i_TYPE",
            "name": "<-i_TYPE",
            "optional": false,
            "type": "String",
            "value-key": "[<-I_TYPE]"
        },
        {
            "description": "NA",
            "id": "SURFACE>",
            "name": "SURFACE>",
            "optional": false,
            "type": "String",
            "value-key": "[SURFACE>]"
        },
        {
            "description": "NA",
            "id": "<-prefix",
            "name": "<-prefix",
            "optional": false,
            "type": "String",
            "value-key": "[<-PREFIX]"
        },
        {
            "description": "NA",
            "id": "PREFIX>",
            "name": "PREFIX>",
            "optional": false,
            "type": "String",
            "value-key": "[PREFIX>]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}