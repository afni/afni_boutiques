{
    "command-line": "3dGenPriors [SIG] [TDIST] [PREFIX] [PPREFIX] [CPREFIX] [PGPREFIX] [LABELTABLE] [CMASK] [MASK] [MRANGE] [DO] [DEBUG] [VOX_DEBUG] [VOX_DEBUG_FILE] [UID] [USE_TMP] [NO_TMP] [PSET] [CSET] [REGROUP_CLASSES] [CLASSES] [FEATURES] [STRICT_FEATURE_MATCH] [FEATGROUPS] [SHOWTHISDIST] [FAST] [SLOW]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-sig",
            "description": "Signatures dataset. A dataset with F features per voxel.",
            "id": "SIG",
            "name": "SIG",
            "optional": true,
            "type": "String",
            "value-key": "[SIG]"
        },
        {
            "command-line-flag": "-tdist",
            "description": "Training results. This file is generated by 3dSignatures. ONLY training files generated by 3dSignatures' method 'prob' can be used by this program. The number of features in this file should match the number of features (F) in SIGS This file also contains the names of the K classes that will be references in the output datasets",
            "id": "TDIST",
            "name": "TDIST",
            "optional": true,
            "type": "String",
            "value-key": "[TDIST]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Specify root prefix and let program suffix it for output Volumes. This way you need not use the -*prefix options below.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-pprefix",
            "description": "Prefix for probability dset",
            "id": "PPREFIX",
            "name": "PPREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PPREFIX]"
        },
        {
            "command-line-flag": "-cprefix",
            "description": "Prefix for class dset If you use -regroup_classes then you can also specify:",
            "id": "CPREFIX",
            "name": "CPREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[CPREFIX]"
        },
        {
            "command-line-flag": "-pgprefix",
            "description": "-pgprefix PGPREF, and -cgprefix CGPREF",
            "id": "PGPREFIX",
            "name": "PGPREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PGPREFIX]"
        },
        {
            "command-line-flag": "-labeltable",
            "description": "Labeltable to attach to output dset This labeltable should contain all the classes in TDIST",
            "id": "LABELTABLE",
            "name": "LABELTABLE",
            "optional": true,
            "type": "String",
            "value-key": "[LABELTABLE]"
        },
        {
            "command-line-flag": "-cmask",
            "description": "Provide cmask expression. Voxels where expression is 0 are excluded from computations",
            "id": "CMASK",
            "name": "CMASK",
            "optional": true,
            "type": "String",
            "value-key": "[CMASK]"
        },
        {
            "command-line-flag": "-mask",
            "description": "Provide mask dset To run the program on one voxel only, you can set MASK to the key word VOX_DEBUG. In this mode a mask is created with only the one voxel specified in -vox_debug set to 1.",
            "id": "MASK",
            "name": "MASK",
            "optional": true,
            "type": "String",
            "value-key": "[MASK]"
        },
        {
            "command-line-flag": "-mrange",
            "description": "Consider MASK only for values between M0 and M1, inclusive",
            "id": "MRANGE",
            "name": "MRANGE",
            "optional": true,
            "type": "String",
            "value-key": "[MRANGE]"
        },
        {
            "command-line-flag": "-do",
            "description": "Specify the output that this program should create. Each character in WHAT specifies an output. a 'c' produces the most likely class a 'p' produces probability of belonging to a class a 'pc' produces both of the above and that is the default. You'd be deranged to use anything else at the moment.",
            "id": "DO",
            "name": "DO",
            "optional": true,
            "type": "String",
            "value-key": "[DO]"
        },
        {
            "command-line-flag": "-debug",
            "description": "Set debug level",
            "id": "DEBUG",
            "name": "DEBUG",
            "optional": true,
            "type": "String",
            "value-key": "[DEBUG]"
        },
        {
            "command-line-flag": "-vox_debug",
            "description": "1D index of voxel to debug. OR",
            "id": "VOX_DEBUG",
            "name": "VOX_DEBUG",
            "optional": true,
            "type": "String",
            "value-key": "[VOX_DEBUG]"
        },
        {
            "command-line-flag": "-vox_debug_file",
            "description": "File in which debug information is output use '-' for stdout, '+' for stderr.",
            "id": "VOX_DEBUG_FILE",
            "name": "VOX_DEBUG_FILE",
            "optional": true,
            "type": "String",
            "value-key": "[VOX_DEBUG_FILE]"
        },
        {
            "command-line-flag": "-uid",
            "description": "User identifier string. It is used to generate names for temporary files to speed up the process. You must use different UID for different subjects otherwise you will run the risk of using bad temporary files. By default, uid is set to a random string.",
            "id": "UID",
            "name": "UID",
            "optional": true,
            "type": "String",
            "value-key": "[UID]"
        },
        {
            "command-line-flag": "-use_tmp",
            "description": "Use temporary storage to speed up the program (see -uid ) This is the default",
            "id": "USE_TMP",
            "name": "USE_TMP",
            "optional": true,
            "type": "String",
            "value-key": "[USE_TMP]"
        },
        {
            "command-line-flag": "-no_tmp",
            "description": "Opposite of use_tmp",
            "id": "NO_TMP",
            "name": "NO_TMP",
            "optional": true,
            "type": "String",
            "value-key": "[NO_TMP]"
        },
        {
            "command-line-flag": "-pset",
            "description": "Reuse probability output from an earlier run.",
            "id": "PSET",
            "name": "PSET",
            "optional": true,
            "type": "String",
            "value-key": "[PSET]"
        },
        {
            "command-line-flag": "-cset",
            "description": "Reuse classification output from an earlier run.",
            "id": "CSET",
            "name": "CSET",
            "optional": true,
            "type": "String",
            "value-key": "[CSET]"
        },
        {
            "command-line-flag": "-regroup_classes",
            "description": "-regroup_classes 'C1 C2 C3': Regroup classes into parent classes C1 C2 C3 For this to work, the original classes must be named something like C1.*, C2.*, etc. This option can be used to replace @RegroupLabels script. For example: 3dGenPriors      -sig sigs+orig \\ -tdist train.niml.td \\ -pprefix anat.p \\ -cprefix anat.c   \\ -labeltable DSC.niml.lt \\ -do pc   \\",
            "id": "REGROUP_CLASSES",
            "name": "REGROUP_CLASSES",
            "optional": true,
            "type": "String",
            "value-key": "[REGROUP_CLASSES]"
        },
        {
            "command-line-flag": "-classes",
            "description": "-classes 'C1 C2 C3': Classify into these classes only. Alternative is to classify from all the classes in the training data",
            "id": "CLASSES",
            "name": "CLASSES",
            "optional": true,
            "type": "String",
            "value-key": "[CLASSES]"
        },
        {
            "command-line-flag": "-features",
            "description": "-features 'F1 F2 F3 ...': Use these features only. Otherwise use all features in the signature file will be used. Note that partial matching is used to resolve which features to keep from training set. If you want exact feature name matching, use option -strict_feature_match",
            "id": "FEATURES",
            "name": "FEATURES",
            "optional": true,
            "type": "String",
            "value-key": "[FEATURES]"
        },
        {
            "command-line-flag": "-strict_feature_match",
            "description": "Use strict feature name matching when resolving which feature to keep from the traning set.",
            "id": "STRICT_FEATURE_MATCH",
            "name": "STRICT_FEATURE_MATCH",
            "optional": true,
            "type": "String",
            "value-key": "[STRICT_FEATURE_MATCH]"
        },
        {
            "command-line-flag": "-featgroups",
            "description": "-featgroups 'G1 G2 G3 ...': TO BE WRITTEN Example: -featgroups 'MEDI MAD. P2S'",
            "id": "FEATGROUPS",
            "name": "FEATGROUPS",
            "optional": true,
            "type": "String",
            "value-key": "[FEATGROUPS]"
        },
        {
            "command-line-flag": "-ShowThisDist",
            "description": "Show information obtained from the training data about the distribution of DIST. For example: - -ShowThisDist 'd(mean.20_mm|PER02)' Set DIST to ALL to see them all.",
            "id": "SHOWTHISDIST",
            "name": "SHOWTHISDIST",
            "optional": true,
            "type": "String",
            "value-key": "[SHOWTHISDIST]"
        },
        {
            "command-line-flag": "-fast",
            "description": "Use OpenMPized routines (default). Considerably faster than alternative.",
            "id": "FAST",
            "name": "FAST",
            "optional": true,
            "type": "String",
            "value-key": "[FAST]"
        },
        {
            "command-line-flag": "-slow",
            "description": "Not -fast.   ========================================================================= * This binary version of 3dGenPriors is compiled using OpenMP, a semi- automatic parallelizer software toolkit, which splits the work across multiple CPUs/cores on the same shared memory computer. * OpenMP is NOT like MPI -- it does not work with CPUs connected only by a network (e.g., OpenMP doesn't work with 'cluster' setups). * For implementation and compilation details, please see https://afni.nimh.nih.gov/pub/dist/doc/misc/OpenMP.html * The number of CPU threads used will default to the maximum number on your system. You can control this value by setting environment variable OMP_NUM_THREADS to some smaller value (including 1). * Un-setting OMP_NUM_THREADS resets OpenMP back to its default state of using all CPUs available. ++ However, on some systems, it seems to be necessary to set variable OMP_NUM_THREADS explicitly, or you only get one CPU. ++ On other systems with many CPUS, you probably want to limit the CPU count, since using more than (say) 16 threads is probably useless. * You must set OMP_NUM_THREADS in the shell BEFORE running the program, since OpenMP queries this variable BEFORE the program actually starts. ++ You can't usefully set this variable in your ~/.afnirc file or on the command line with the '-D' option. * How many threads are useful? That varies with the program, and how well it was coded. You'll have to experiment on your own systems! * The number of CPUs on this particular computer system is ...... 4. * The maximum number of CPUs that will be used is now set to .... 4. =========================================================================",
            "id": "SLOW",
            "name": "SLOW",
            "optional": true,
            "type": "String",
            "value-key": "[SLOW]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}