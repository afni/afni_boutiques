{
    "command-line": "3dLocalPV [MASK] [AUTOMASK] [PREFIX] [PREFIX2] [EVPREFIX] [INPUT] [NBHD] [DESPIKE] [POLORT] [VNORM] [VPROJ] [INPUTDATASET]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-mask",
            "description": "restrict operations to this mask",
            "id": "MASK",
            "name": "MASK",
            "optional": true,
            "type": "String",
            "value-key": "[MASK]"
        },
        {
            "command-line-flag": "-automask",
            "description": "create a mask from time series dataset",
            "id": "AUTOMASK",
            "name": "AUTOMASK",
            "optional": true,
            "type": "String",
            "value-key": "[AUTOMASK]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "save SVD vector result into this new dataset [default = 'LocalPV']",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-prefix2",
            "description": "save second principal vector into this new dataset [default = don't save it]",
            "id": "PREFIX2",
            "name": "PREFIX2",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX2]"
        },
        {
            "command-line-flag": "-evprefix",
            "description": "save singular value at each voxel into this dataset [default = don't save]",
            "id": "EVPREFIX",
            "name": "EVPREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[EVPREFIX]"
        },
        {
            "command-line-flag": "-input",
            "description": "input time series dataset",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-nbhd",
            "description": "e.g., 'SPHERE(5)' 'TOHD(7)' etc.",
            "id": "NBHD",
            "name": "NBHD",
            "optional": true,
            "type": "String",
            "value-key": "[NBHD]"
        },
        {
            "command-line-flag": "-despike",
            "description": "remove time series spikes from input dataset",
            "id": "DESPIKE",
            "name": "DESPIKE",
            "optional": true,
            "type": "String",
            "value-key": "[DESPIKE]"
        },
        {
            "command-line-flag": "-polort",
            "description": "detrending",
            "id": "POLORT",
            "name": "POLORT",
            "optional": true,
            "type": "String",
            "value-key": "[POLORT]"
        },
        {
            "command-line-flag": "-vnorm",
            "description": "normalize data vectors [strongly recommended]",
            "id": "VNORM",
            "name": "VNORM",
            "optional": true,
            "type": "String",
            "value-key": "[VNORM]"
        },
        {
            "command-line-flag": "-vproj",
            "description": "-vproj [2]          = project central data time series onto local SVD vector; if followed by '2', then the central data time series will be projected on the 2-dimensional subspace spanned by the first 2 principal SVD vectors. [default: just output principal singular vector] [for 'smoothing' purposes, '-vnorm -vproj' is an idea]  Notes: * On my Mac Pro, about 30% faster than 3dLocalSVD computing the same thing. * If you're curious, the 'special method' used for the eigensolution is a variant of matrix power iteration, called 'simultaneous iteration'. * By contrast, 3dLocalSVD uses EISPACK functions for eigensolution-izing.  ========================================================================= * This binary version of 3dLocalPV is compiled using OpenMP, a semi- automatic parallelizer software toolkit, which splits the work across multiple CPUs/cores on the same shared memory computer. * OpenMP is NOT like MPI -- it does not work with CPUs connected only by a network (e.g., OpenMP doesn't work with 'cluster' setups). * For implementation and compilation details, please see https://afni.nimh.nih.gov/pub/dist/doc/misc/OpenMP.html * The number of CPU threads used will default to the maximum number on your system. You can control this value by setting environment variable OMP_NUM_THREADS to some smaller value (including 1). * Un-setting OMP_NUM_THREADS resets OpenMP back to its default state of using all CPUs available. ++ However, on some systems, it seems to be necessary to set variable OMP_NUM_THREADS explicitly, or you only get one CPU. ++ On other systems with many CPUS, you probably want to limit the CPU count, since using more than (say) 16 threads is probably useless. * You must set OMP_NUM_THREADS in the shell BEFORE running the program, since OpenMP queries this variable BEFORE the program actually starts. ++ You can't usefully set this variable in your ~/.afnirc file or on the command line with the '-D' option. * How many threads are useful? That varies with the program, and how well it was coded. You'll have to experiment on your own systems! * The number of CPUs on this particular computer system is ...... 4. * The maximum number of CPUs that will be used is now set to .... 4. =========================================================================  ++ Compile date = Sep  7 2018 {:}",
            "id": "VPROJ",
            "name": "VPROJ",
            "optional": true,
            "type": "String",
            "value-key": "[VPROJ]"
        },
        {
            "description": "NA",
            "id": "inputdataset",
            "name": "inputdataset",
            "optional": false,
            "type": "String",
            "value-key": "[INPUTDATASET]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}