{
    "command-line": "3dvolreg [VERBOSE] [FOURIER] [HEPTIC] [QUINTIC] [CUBIC] [LINEAR] [CLIPIT] [NOCLIP] [ZPAD] [PREFIX] [FLOAT] [BASE] [DFILE] [ROTATE] [1DFILE] [1DMATRIX_SAVE] [ROTCOM] [MAXDISP] [NOMAXDISP] [MAXDISP1D] [SAVEDISP] [TSHIFT] [ROTPARENT] [GRIDPARENT] [MAXITE] [X_THRESH] [ROT_THRESH] [DELTA] [FINAL] [WEIGHT] [EDGING] [TWOPASS] [TWOBLUR] [TWODUP] [SINIT] [COARSE] [COARSEROT] [NOCOARSEROT] [WTINP] [DATASET]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-verbose",
            "description": "-verbose        Print progress reports.  Use twice for LOTS of output.",
            "id": "VERBOSE",
            "name": "VERBOSE",
            "optional": true,
            "type": "String",
            "value-key": "[VERBOSE]"
        },
        {
            "command-line-flag": "-Fourier",
            "description": "-Fourier        Perform the alignments using Fourier interpolation.",
            "id": "FOURIER",
            "name": "FOURIER",
            "optional": true,
            "type": "String",
            "value-key": "[FOURIER]"
        },
        {
            "command-line-flag": "-heptic",
            "description": "-heptic         Use heptic polynomial interpolation.",
            "id": "HEPTIC",
            "name": "HEPTIC",
            "optional": true,
            "type": "String",
            "value-key": "[HEPTIC]"
        },
        {
            "command-line-flag": "-quintic",
            "description": "-quintic        Use quintic polynomical interpolation.",
            "id": "QUINTIC",
            "name": "QUINTIC",
            "optional": true,
            "type": "String",
            "value-key": "[QUINTIC]"
        },
        {
            "command-line-flag": "-cubic",
            "description": "-cubic          Use cubic polynomial interpolation.",
            "id": "CUBIC",
            "name": "CUBIC",
            "optional": true,
            "type": "String",
            "value-key": "[CUBIC]"
        },
        {
            "command-line-flag": "-linear",
            "description": "-linear         Use linear interpolation. -->>   OLD Default = Fourier [slowest and most accurate interpolator] -->>   NEW Default = Heptic [7th order polynomials]",
            "id": "LINEAR",
            "name": "LINEAR",
            "optional": true,
            "type": "String",
            "value-key": "[LINEAR]"
        },
        {
            "command-line-flag": "-clipit",
            "description": "-clipit         Clips the values in each output sub-brick to be in the same range as the corresponding input volume. The interpolation schemes can produce values outside the input range, which is sometimes annoying. [16 Apr 2002: -clipit is now the default]",
            "id": "CLIPIT",
            "name": "CLIPIT",
            "optional": true,
            "type": "String",
            "value-key": "[CLIPIT]"
        },
        {
            "command-line-flag": "-noclip",
            "description": "-noclip         Turns off -clipit",
            "id": "NOCLIP",
            "name": "NOCLIP",
            "optional": true,
            "type": "String",
            "value-key": "[NOCLIP]"
        },
        {
            "command-line-flag": "-zpad",
            "description": "-zpad n         Zeropad around the edges by 'n' voxels during rotations (these edge values will be stripped off in the output) N.B.: Unlike to3d, in this program '-zpad' adds zeros in all directions. N.B.: The environment variable AFNI_ROTA_ZPAD can be used to set a nonzero default value for this parameter.",
            "id": "ZPAD",
            "name": "ZPAD",
            "optional": true,
            "type": "String",
            "value-key": "[ZPAD]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "-prefix fname   Use 'fname' for the output dataset prefix. The program tries not to overwrite an existing dataset. Default = 'volreg'. N.B.: If the prefix is 'NULL', no output dataset will be written.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-float",
            "description": "-float          Force output dataset to be written in floating point format. N.B.: If the input dataset has scale factors attached to ANY sub-bricks, then the output will always be written in float format!",
            "id": "FLOAT",
            "name": "FLOAT",
            "optional": true,
            "type": "String",
            "value-key": "[FLOAT]"
        },
        {
            "command-line-flag": "-base",
            "description": "-base n         Sets the base brick to be the 'n'th sub-brick from the input dataset (indexing starts at 0). Default = 0 (first sub-brick).",
            "id": "BASE",
            "name": "BASE",
            "optional": true,
            "type": "String",
            "value-key": "[BASE]"
        },
        {
            "command-line-flag": "-dfile",
            "description": "-dfile dname    Save the motion parameters in file 'dname'. The output is in 9 ASCII formatted columns:  n  roll  pitch  yaw  dS  dL  dP  rmsold rmsnew  where:   n     = sub-brick index roll  = rotation about the I-S axis } pitch = rotation about the R-L axis } degrees CCW yaw   = rotation about the A-P axis } dS  = displacement in the Superior direction  } dL  = displacement in the Left direction      } mm dP  = displacement in the Posterior direction } rmsold = RMS difference between input brick and base brick rmsnew = RMS difference between output brick and base brick N.B.: If the '-dfile' option is not given, the parameters aren't saved. N.B.: The motion parameters are those needed to bring the sub-brick back into alignment with the base.  In 3drotate, it is as if the following options were applied to each input sub-brick:",
            "id": "DFILE",
            "name": "DFILE",
            "optional": true,
            "type": "String",
            "value-key": "[DFILE]"
        },
        {
            "command-line-flag": "-rotate",
            "description": "-rotate 'roll'I 'pitch'R 'yaw'A  -ashift 'dS'S 'dL'L 'dP'P",
            "id": "ROTATE",
            "name": "ROTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ROTATE]"
        },
        {
            "command-line-flag": "-1Dfile",
            "description": "-1Dfile ename   Save the motion parameters ONLY in file 'ename'. The output is in 6 ASCII formatted columns:  roll pitch yaw dS  dL  dP  This file can be used in FIM as an 'ort', to detrend the data against correlation with the movements. This type of analysis can be useful in removing errors made in the interpolation.",
            "id": "1DFILE",
            "name": "1DFILE",
            "optional": true,
            "type": "String",
            "value-key": "[1DFILE]"
        },
        {
            "command-line-flag": "-1Dmatrix_save",
            "description": "Save the matrix transformation from base to input coordinates in file 'ff' (1 row per sub-brick in the input dataset).  If 'ff' does NOT end in '.1D', then the program will append '.aff12.1D' to 'ff' to make the output filename. *N.B.: This matrix is the coordinate transformation from base to input DICOM coordinates.  To get the inverse matrix (input to base), use the cat_matvec program, as in cat_matvec fred.aff12.1D -I *N.B.: This matrix is the inverse of the matrix stored in the output dataset VOLREG_MATVEC_* attributes. The base-to-input convention followed with this option corresponds to the convention in 3dAllineate. *N.B.: 3dvolreg does not have a '-1Dmatrix_apply' option. See 3dAllineate for this function.  Also confer with program cat_matvec.",
            "id": "1DMATRIX_SAVE",
            "name": "1DMATRIX_SAVE",
            "optional": true,
            "type": "String",
            "value-key": "[1DMATRIX_SAVE]"
        },
        {
            "command-line-flag": "-rotcom",
            "description": "-rotcom         Write the fragmentary 3drotate commands needed to perform the realignments to stdout; for example: 3drotate -rotate 7.2I 3.2R -5.7A -ashift 2.7S -3.8L 4.9P The purpose of this is to make it easier to shift other datasets using exactly the same parameters.",
            "id": "ROTCOM",
            "name": "ROTCOM",
            "optional": true,
            "type": "String",
            "value-key": "[ROTCOM]"
        },
        {
            "command-line-flag": "-maxdisp",
            "description": "Print the maximum displacement (in mm) for brain voxels. ('Brain' here is defined by the same algorithm as used in the command '3dAutomask -clfrac 0.33'; the displacement for each non-interior point in this mask is calculated.) If '-verbose' is given, the max displacement will be printed to the screen for each sub-brick; otherwise, just the overall maximum displacement will get output. ** This displacement is relative to the base volume. [-maxdisp is now turned on by default]",
            "id": "MAXDISP",
            "name": "MAXDISP",
            "optional": true,
            "type": "String",
            "value-key": "[MAXDISP]"
        },
        {
            "command-line-flag": "-nomaxdisp",
            "description": "Do NOT calculate and print the maximum displacement. [maybe it offends you in some theological sense?] [maybe you have some real 'need for speed'?]",
            "id": "NOMAXDISP",
            "name": "NOMAXDISP",
            "optional": true,
            "type": "String",
            "value-key": "[NOMAXDISP]"
        },
        {
            "command-line-flag": "-maxdisp1D",
            "description": "Do '-maxdisp' and also write the max displacement for each sub-brick into file 'mm' in 1D (columnar) format. You may find that graphing this file (cf. 1dplot) is a useful diagnostic tool for your FMRI datasets. [the 'mm' filename can be '-', which means stdout] ** The program also outputs the maximum change (delta) in displacement between 2 successive time points, into the file with name 'mm_delt'.  This output can let you see when there is a sudden head jerk, for example. [22 Jun 2015]",
            "id": "MAXDISP1D",
            "name": "MAXDISP1D",
            "optional": true,
            "type": "String",
            "value-key": "[MAXDISP1D]"
        },
        {
            "command-line-flag": "-savedisp",
            "description": "Save 3 3D+time datasets with the x,y,z displacments at each voxel at each time point.  The prefix for the x displacement dataset will be the string 'sss' with '_DX' appended, etc. This option is intended for use with various processing scripts now under construction, and is probably otherwise completely useless.",
            "id": "SAVEDISP",
            "name": "SAVEDISP",
            "optional": true,
            "type": "String",
            "value-key": "[SAVEDISP]"
        },
        {
            "command-line-flag": "-tshift",
            "description": "-tshift ii      If the input dataset is 3D+time and has slice-dependent time-offsets (cf. the output of 3dinfo -v), then this option tells 3dvolreg to time shift it to the average slice time-offset prior to doing the spatial registration. The integer 'ii' is the number of time points at the beginning to ignore in the time shifting.  The results should like running program 3dTshift first, then running 3dvolreg -- this is primarily a convenience option. N.B.: If the base brick is taken from this dataset, as in '-base 4', then it will be the time shifted brick. If for some bizarre reason this is undesirable, you could use '-base this+orig[4]' instead.",
            "id": "TSHIFT",
            "name": "TSHIFT",
            "optional": true,
            "type": "String",
            "value-key": "[TSHIFT]"
        },
        {
            "command-line-flag": "-rotparent",
            "description": "-rotparent rset Specifies that AFTER the registration algorithm finds the best transformation for each sub-brick of the input, an additional rotation+translation should be performed before computing the final output dataset; this extra transformation is taken from the first 3dvolreg transformation found in dataset 'rset'.",
            "id": "ROTPARENT",
            "name": "ROTPARENT",
            "optional": true,
            "type": "String",
            "value-key": "[ROTPARENT]"
        },
        {
            "command-line-flag": "-gridparent",
            "description": "-gridparent gset Specifies that the output dataset of 3dvolreg should be shifted to match the grid of dataset 'gset'.  Can only be used with -rotparent. This dataset should be one this is properly aligned with 'rset' when overlaid in AFNI. * If 'gset' has a different number of slices than the input dataset, then the output dataset will be zero-padded in the slice direction to match 'gset'. * These options are intended to be used to align datasets between sessions: S1 = SPGR from session 1    E1 = EPI from session 1 S2 = SPGR from session 2    E2 = EPI from session 2 3dvolreg -twopass -twodup -base S1+orig -prefix S2reg S2+orig 3dvolreg -rotparent S2reg+orig -gridparent E1+orig -prefix E2reg \\",
            "id": "GRIDPARENT",
            "name": "GRIDPARENT",
            "optional": true,
            "type": "String",
            "value-key": "[GRIDPARENT]"
        },
        {
            "command-line-flag": "-maxite",
            "description": "Allow up to 'm' iterations for convergence [default = 19].",
            "id": "MAXITE",
            "name": "MAXITE",
            "optional": true,
            "type": "String",
            "value-key": "[MAXITE]"
        },
        {
            "command-line-flag": "-x_thresh",
            "description": "Iterations converge when maximum movement is less than 'x' voxels [default=0.020000],",
            "id": "X_THRESH",
            "name": "X_THRESH",
            "optional": true,
            "type": "String",
            "value-key": "[X_THRESH]"
        },
        {
            "command-line-flag": "-rot_thresh",
            "description": "And when maximum rotation is less than 'r' degrees [default=0.030000].",
            "id": "ROT_THRESH",
            "name": "ROT_THRESH",
            "optional": true,
            "type": "String",
            "value-key": "[ROT_THRESH]"
        },
        {
            "command-line-flag": "-delta",
            "description": "Distance, in voxel size, used to compute image derivatives using finite differences [default=0.700000].",
            "id": "DELTA",
            "name": "DELTA",
            "optional": true,
            "type": "String",
            "value-key": "[DELTA]"
        },
        {
            "command-line-flag": "-final",
            "description": "Do the final interpolation using the method defined by 'mode', which is one of the strings 'NN', 'cubic', 'quintic', 'heptic', or 'Fourier' or 'linear' [default=mode used to estimate parameters].",
            "id": "FINAL",
            "name": "FINAL",
            "optional": true,
            "type": "String",
            "value-key": "[FINAL]"
        },
        {
            "command-line-flag": "-weight",
            "description": "-weight 'wset[n]' = Set the weighting applied to each voxel proportional to the brick specified here [default=smoothed base brick]. N.B.: if no weight is given, and -twopass is engaged, then the first pass weight is the blurred sum of the base brick and the first data brick to be registered.",
            "id": "WEIGHT",
            "name": "WEIGHT",
            "optional": true,
            "type": "String",
            "value-key": "[WEIGHT]"
        },
        {
            "command-line-flag": "-edging",
            "description": "Set the size of the region around the edges of the base volume where the default weight will be set to zero.  If 'ee' is a plain number, then it is a voxel count, giving the thickness along each face of the 3D brick.  If 'ee' is of the form '5%', then it is a fraction of of each brick size.  For example, '5%' of a 256x256x124 volume means that 13 voxels on each side of the xy-axes will get zero weight, and 6 along the z-axis.  If this option is not used, then 'ee' is read from the environment variable AFNI_VOLREG_EDGING. If that variable is not set, then 5% is used. N.B.: This option has NO effect if the -weight option is used. N.B.: The largest % value allowed is 25%.",
            "id": "EDGING",
            "name": "EDGING",
            "optional": true,
            "type": "String",
            "value-key": "[EDGING]"
        },
        {
            "command-line-flag": "-twopass",
            "description": "Do two passes of the registration algorithm: (1) with smoothed base and data bricks, with linear interpolation, to get a crude alignment, then (2) with the input base and data bricks, to get a fine alignment. This method is useful when aligning high- resolution datasets that may need to be moved more than a few voxels to be aligned.",
            "id": "TWOPASS",
            "name": "TWOPASS",
            "optional": true,
            "type": "String",
            "value-key": "[TWOPASS]"
        },
        {
            "command-line-flag": "-twoblur",
            "description": "'bb' is the blurring factor for pass 1 of the -twopass registration.  This should be a number >= 2.0 (which is the default). Larger values would be reasonable if pass 1 has to move the input dataset a long ways. Use '-verbose -verbose' to check on the iterative progress of the passes. N.B.: when using -twopass, and you expect the data bricks to move a long ways, you might want to use '-heptic' rather than the default '-Fourier', since you can get wraparound from Fourier interpolation.",
            "id": "TWOBLUR",
            "name": "TWOBLUR",
            "optional": true,
            "type": "String",
            "value-key": "[TWOBLUR]"
        },
        {
            "command-line-flag": "-twodup",
            "description": "If this option is set, along with -twopass, then the output dataset will have its xyz-axes origins reset to those of the base dataset.  This is equivalent to using '3drefit -duporigin' on the output dataset.",
            "id": "TWODUP",
            "name": "TWODUP",
            "optional": true,
            "type": "String",
            "value-key": "[TWODUP]"
        },
        {
            "command-line-flag": "-sinit",
            "description": "When using -twopass registration on volumes whose magnitude differs significantly, the least squares fitting procedure is started by doing a zero-th pass estimate of the scale difference between the bricks. Use this option to turn this feature OFF.",
            "id": "SINIT",
            "name": "SINIT",
            "optional": true,
            "type": "String",
            "value-key": "[SINIT]"
        },
        {
            "command-line-flag": "-coarse",
            "description": "When doing the first pass, the first step is to do a number of coarse shifts in order to find a starting point for the iterations. 'del' is the size of these steps, in voxels; 'num' is the number of these steps along each direction (+x,-x,+y,-y,+z,-z).  The default values are del=10 and num=2.  If you don't want this step performed, set num=0.  Note that the amount of computation grows as num**3, so don't increase num past 4, or the program will run forever! N.B.: The 'del' parameter cannot be larger than 10% of the smallest dimension of the input dataset.",
            "id": "COARSE",
            "name": "COARSE",
            "optional": true,
            "type": "String",
            "value-key": "[COARSE]"
        },
        {
            "command-line-flag": "-coarserot",
            "description": "-coarserot        Also do a coarse search in angle for the starting point of the first pass.",
            "id": "COARSEROT",
            "name": "COARSEROT",
            "optional": true,
            "type": "String",
            "value-key": "[COARSEROT]"
        },
        {
            "command-line-flag": "-nocoarserot",
            "description": "-nocoarserot      Don't search angles coarsely. [-coarserot is now the default - RWCox]",
            "id": "NOCOARSEROT",
            "name": "NOCOARSEROT",
            "optional": true,
            "type": "String",
            "value-key": "[NOCOARSEROT]"
        },
        {
            "command-line-flag": "-wtinp",
            "description": "Use sub-brick[0] of the input dataset as the weight brick in the final registration pass.  N.B.: * This program can consume VERY large quantities of memory. (Rule of thumb: 40 bytes per input voxel.) Use of '-verbose -verbose' will show the amount of workspace, and the steps used in each iteration. * ALWAYS check the results visually to make sure that the program wasn't trapped in a 'false optimum'. * The default rotation threshold is reasonable for 64x64 images. You may want to decrease it proportionally for larger datasets. * -twopass resets the -maxite parameter to 66; if you want to use a different value, use -maxite AFTER the -twopass option. * The -twopass option can be slow; several CPU minutes for a 256x256x124 volume is a typical run time. * After registering high-resolution anatomicals, you may need to set their origins in 3D space to match.  This can be done using the '-duporigin' option to program 3drefit, or by using the '-twodup' option to this program.  ++ Compile date = Sep  7 2018 {:}",
            "id": "WTINP",
            "name": "WTINP",
            "optional": true,
            "type": "String",
            "value-key": "[WTINP]"
        },
        {
            "description": "NA",
            "id": "dataset",
            "name": "dataset",
            "optional": false,
            "type": "String",
            "value-key": "[DATASET]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}