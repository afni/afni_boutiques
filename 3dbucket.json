{
    "command-line": "3dbucket [PREFIX] [SESSION] [GLUETO] [AGLUETO] [DRY] [VERB] [FBUC] [ABUC] [OPTIONS]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-prefix",
            "description": "Use 'pname' for the output dataset prefix name. OR  -output pname     [default='buck']",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-session",
            "description": "Use 'dir' for the output dataset session directory. [default='./'=current working directory]",
            "id": "SESSION",
            "name": "SESSION",
            "optional": true,
            "type": "String",
            "value-key": "[SESSION]"
        },
        {
            "command-line-flag": "-glueto",
            "description": "Append bricks to the end of the 'fname' dataset. This command is an alternative to the -prefix and -session commands. * Note that fname should include the view, as in 3dbucket -glueto newset+orig oldset+orig'[7]'",
            "id": "GLUETO",
            "name": "GLUETO",
            "optional": true,
            "type": "String",
            "value-key": "[GLUETO]"
        },
        {
            "command-line-flag": "-aglueto",
            "description": "If fname dset does not exist, create it (like -prefix). Otherwise append to fname (like -glueto). This option is useful when appending in a loop. * As with -glueto, fname should include the view, e.g. 3dbucket -aglueto newset+orig oldset+orig'[7]'",
            "id": "AGLUETO",
            "name": "AGLUETO",
            "optional": true,
            "type": "String",
            "value-key": "[AGLUETO]"
        },
        {
            "command-line-flag": "-dry",
            "description": "Execute a 'dry run'; that is, only print out what would be done.  This is useful when combining sub-bricks from multiple inputs.",
            "id": "DRY",
            "name": "DRY",
            "optional": true,
            "type": "String",
            "value-key": "[DRY]"
        },
        {
            "command-line-flag": "-verb",
            "description": "Print out some verbose output as the program proceeds (-dry implies -verb).",
            "id": "VERB",
            "name": "VERB",
            "optional": true,
            "type": "String",
            "value-key": "[VERB]"
        },
        {
            "command-line-flag": "-fbuc",
            "description": "Create a functional bucket.",
            "id": "FBUC",
            "name": "FBUC",
            "optional": true,
            "type": "String",
            "value-key": "[FBUC]"
        },
        {
            "command-line-flag": "-abuc",
            "description": "Create an anatomical bucket.  If neither of these options is given, the output type is determined from the first input type.  Command line arguments after the above are taken as input datasets. A dataset is specified using one of these forms: 'prefix+view', 'prefix+view.HEAD', or 'prefix+view.BRIK'. You can also add a sub-brick selection list after the end of the dataset name.  This allows only a subset of the sub-bricks to be included into the output (by default, all of the input dataset is copied into the output).  A sub-brick selection list looks like one of the following forms: fred+orig[5]                     ==> use only sub-brick #5 fred+orig[5,9,17]                ==> use #5, #9, and #17 fred+orig[5..8]     or [5-8]     ==> use #5, #6, #7, and #8 fred+orig[5..13(2)] or [5-13(2)] ==> use #5, #7, #9, #11, and #13 Sub-brick indexes start at 0.  You can use the character '$' to indicate the last sub-brick in a dataset; for example, you can select every third sub-brick by using the selection list fred+orig[0..$(3)]  Notes: ~1~ N.B.: The sub-bricks are output in the order specified, which may not be the order in the original datasets.  For example, using fred+orig[0..$(2),1..$(2)] will cause the sub-bricks in fred+orig to be output into the new dataset in an interleaved fashion.  Using fred+orig[$..0] will reverse the order of the sub-bricks in the output.  N.B.: Bucket datasets have multiple sub-bricks, but do NOT have a time dimension.  You can input sub-bricks from a 3D+time dataset into a bucket dataset.  You can use the '3dinfo' program to see how many sub-bricks a 3D+time or a bucket dataset contains.  N.B.: The '$', '(', ')', '[', and ']' characters are special to the shell, so you will have to escape them.  This is most easily done by putting the entire dataset plus selection list inside single quotes, as in 'fred+orig[5..7,9]'.  N.B.: In non-bucket functional datasets (like the 'fico' datasets output by FIM, or the 'fitt' datasets output by 3dttest), sub-brick [0] is the 'intensity' and sub-brick [1] is the statistical parameter used as a threshold.  Thus, to create a bucket dataset using the intensity from dataset A and the threshold from dataset B, and calling the output dataset C, you would type 3dbucket -prefix C -fbuc 'A+orig[0]' -fbuc 'B+orig[1]'  WARNING: ~1~ Using this program, it is possible to create a dataset that has different basic datum types for different sub-bricks (e.g., shorts for brick 0, floats for brick 1). Do NOT do this!  Very few AFNI programs will work correctly with such datasets!  ++ Compile date = Sep  7 2018 {:}",
            "id": "ABUC",
            "name": "ABUC",
            "optional": true,
            "type": "String",
            "value-key": "[ABUC]"
        },
        {
            "description": "NA",
            "id": "options",
            "name": "options",
            "optional": false,
            "type": "String",
            "value-key": "[OPTIONS]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}