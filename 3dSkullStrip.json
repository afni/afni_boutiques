{
    "command-line": "3dSkullStrip [INPUT] [MONKEY] [MARMOSET] [RAT] [SURFACE_COIL] [O_TYPE] [SKULLS] [4TOM] [PREFIX] [NORM_VOL] [ORIG_VOL] [MASK_VOL] [SPAT_NORM] [NO_SPATNORM] [SPATNORM_DXYZ] [WRITE_SPATNORM] [NITER] [LD] [SHRINK_FAC] [VAR_SHRINK_FAC] [NO_VAR_SHRINK_FAC] [SHRINK_FAC_BOT_LIM] [PUSHOUT] [NO_PUSHOUT] [EXP_FRAC] [TOUCHUP] [NO_TOUCHUP] [FILL_HOLE] [NN_SMOOTH] [SMOOTH_FINAL] [AVOID_VENT] [NO_AVOID_VENT] [INIT_RADIUS] [AVOID_EYES] [NO_AVOID_EYES] [USE_EDGE] [NO_USE_EDGE] [PUSH_TO_EDGE] [NO_PUSH_TO_EDGE] [USE_SKULL] [NO_USE_SKULL] [SEND_NO_SKULL] [PERC_INT] [MAX_INTER_ITER] [BLUR_FWHM] [INTERACTIVE] [DEMO_PAUSE] [FAC] [O_SF] [TALK_SUMA] [REFRESH_RATE] [SEND_KTH] [SH] [NI_TEXT] [NI_BINARY] [FEED_AFNI] [NP] [NPQ] [NPB] [MAX_PORT_BLOC] [MAX_PORT_BLOC_QUIET] [NUM_ASSIGNED_PORTS] [NUM_ASSIGNED_PORTS_QUIET] [VISUAL] [DEBUG] [NODE_DEBUG] [BRAIN_CONTOUR_XYZ_FILE] [BRAIN_HULL_XYZ_FILE] [SKULL_OUTER_XYZ_FILE] [HELP] [H] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS] [PROGRAM] [TO] [EXTRACT] [THE] [BRAIN] [FROM] [SURROUNDING.]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-input",
            "description": "Input AFNI (or AFNI readable) volume.   Optional Parameters:",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-monkey",
            "description": "the brain of a monkey.",
            "id": "MONKEY",
            "name": "MONKEY",
            "optional": true,
            "type": "String",
            "value-key": "[MONKEY]"
        },
        {
            "command-line-flag": "-marmoset",
            "description": "the brain of a marmoset. this one was tested on one dataset and may not work with non default options. Check your results!",
            "id": "MARMOSET",
            "name": "MARMOSET",
            "optional": true,
            "type": "String",
            "value-key": "[MARMOSET]"
        },
        {
            "command-line-flag": "-rat",
            "description": "the brain of a rat. By default, no_touchup is used with the rat.",
            "id": "RAT",
            "name": "RAT",
            "optional": true,
            "type": "String",
            "value-key": "[RAT]"
        },
        {
            "command-line-flag": "-surface_coil",
            "description": "Data acquired with a surface coil.",
            "id": "SURFACE_COIL",
            "name": "SURFACE_COIL",
            "optional": true,
            "type": "String",
            "value-key": "[SURFACE_COIL]"
        },
        {
            "command-line-flag": "-o_TYPE",
            "description": "prefix of output surface. where TYPE specifies the format of the surface and PREFIX is, well, the prefix. TYPE is one of: fs, 1d (or vec), sf, ply. More on that below.",
            "id": "O_TYPE",
            "name": "O_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[O_TYPE]"
        },
        {
            "command-line-flag": "-skulls",
            "description": "Output surface models of the skull.",
            "id": "SKULLS",
            "name": "SKULLS",
            "optional": true,
            "type": "String",
            "value-key": "[SKULLS]"
        },
        {
            "command-line-flag": "-4Tom",
            "description": "The output surfaces are named based on PREFIX following -o_TYPE option below.",
            "id": "4TOM",
            "name": "4TOM",
            "optional": true,
            "type": "String",
            "value-key": "[4TOM]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "prefix of output volume. If not specified, the prefix is the same as the one used with -o_TYPE. The output volume is skull stripped version of the input volume. In the earlier version of the program, a mask volume was written out. You can still get that mask volume instead of the skull-stripped volume with the option -mask_vol . NOTE: In the default setting, the output volume does not have values identical to those in the input. In particular, the range might be larger and some low-intensity values are set to 0. If you insist on having the same range of values as in the input, then either use option -orig_vol, or run: 3dcalc -nscale -a VOL+VIEW -b VOL_PREFIX+VIEW \\ -expr 'a*step(b)' -prefix VOL_SAME_RANGE With the command above, you can preserve the range of values of the input but some low-intensity voxels would still be masked. If you want to preserve them, then use -mask_vol in the 3dSkullStrip command that would produce VOL_MASK_PREFIX+VIEW. Then run 3dcalc masking with voxels inside the brain surface envelope: 3dcalc -nscale -a VOL+VIEW -b VOL_MASK_PREFIX+VIEW \\ -expr 'a*step(b-3.01)' -prefix VOL_SAME_RANGE_KEEP_LOW",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-norm_vol",
            "description": "Output a masked and somewhat intensity normalized and thresholded version of the input. This is the default, and you can use -orig_vol to override it.",
            "id": "NORM_VOL",
            "name": "NORM_VOL",
            "optional": true,
            "type": "String",
            "value-key": "[NORM_VOL]"
        },
        {
            "command-line-flag": "-orig_vol",
            "description": "Output a masked version of the input AND do not modify the values inside the brain as -norm_vol would.",
            "id": "ORIG_VOL",
            "name": "ORIG_VOL",
            "optional": true,
            "type": "String",
            "value-key": "[ORIG_VOL]"
        },
        {
            "command-line-flag": "-mask_vol",
            "description": "Output a mask volume instead of a skull-stripped volume. The mask volume containes: 0: Voxel outside surface 1: Voxel just outside the surface. This means the voxel center is outside the surface but inside the bounding box of a triangle in the mesh. 2: Voxel intersects the surface (a triangle), but center lies outside. 3: Voxel contains a surface node. 4: Voxel intersects the surface (a triangle), center lies inside surface. 5: Voxel just inside the surface. This means the voxel center is inside the surface and inside the bounding box of a triangle in the mesh. 6: Voxel inside the surface.",
            "id": "MASK_VOL",
            "name": "MASK_VOL",
            "optional": true,
            "type": "String",
            "value-key": "[MASK_VOL]"
        },
        {
            "command-line-flag": "-spat_norm",
            "description": "(Default) Perform spatial normalization first. This is a necessary step unless the volume has been 'spatnormed' already.",
            "id": "SPAT_NORM",
            "name": "SPAT_NORM",
            "optional": true,
            "type": "String",
            "value-key": "[SPAT_NORM]"
        },
        {
            "command-line-flag": "-no_spatnorm",
            "description": "Do not perform spatial normalization. Use this option only when the volume has been run through the 'spatnorm' process",
            "id": "NO_SPATNORM",
            "name": "NO_SPATNORM",
            "optional": true,
            "type": "String",
            "value-key": "[NO_SPATNORM]"
        },
        {
            "command-line-flag": "-spatnorm_dxyz",
            "description": "Use DXY for the spatial resolution of the spatially normalized volume. The default is the lowest of all three dimensions. For human brains, use DXYZ of 1.0, for primate brain, use the default setting.",
            "id": "SPATNORM_DXYZ",
            "name": "SPATNORM_DXYZ",
            "optional": true,
            "type": "String",
            "value-key": "[SPATNORM_DXYZ]"
        },
        {
            "command-line-flag": "-write_spatnorm",
            "description": "Write the 'spatnormed' volume to disk.",
            "id": "WRITE_SPATNORM",
            "name": "WRITE_SPATNORM",
            "optional": true,
            "type": "String",
            "value-key": "[WRITE_SPATNORM]"
        },
        {
            "command-line-flag": "-niter",
            "description": "Number of iterations. Default is 250 For denser meshes, you need more iterations N_ITER of 750 works for LD of 50.",
            "id": "NITER",
            "name": "NITER",
            "optional": true,
            "type": "String",
            "value-key": "[NITER]"
        },
        {
            "command-line-flag": "-ld",
            "description": "Parameter to control the density of the surface. Default is 20 if -no_use_edge is used, 30 with -use_edge. See CreateIcosahedron -help for details on this option.",
            "id": "LD",
            "name": "LD",
            "optional": true,
            "type": "String",
            "value-key": "[LD]"
        },
        {
            "command-line-flag": "-shrink_fac",
            "description": "Parameter controlling the brain vs non-brain intensity threshold (tb). Default is 0.6. tb = (Imax - t2) SF + t2 where t2 is the 2 percentile value and Imax is the local maximum, limited to the median intensity value. For more information on tb, t2, etc. read the BET paper mentioned above. Note that in 3dSkullStrip, SF can vary across iterations and might be automatically clipped in certain areas. SF can vary between 0 and 1. 0: Intensities < median inensity are considered non-brain 1: Intensities < t2 are considered non-brain",
            "id": "SHRINK_FAC",
            "name": "SHRINK_FAC",
            "optional": true,
            "type": "String",
            "value-key": "[SHRINK_FAC]"
        },
        {
            "command-line-flag": "-var_shrink_fac",
            "description": "Vary the shrink factor with the number of iterations. This reduces the likelihood of a surface getting stuck on large pools of CSF before reaching the outer surface of the brain. (Default)",
            "id": "VAR_SHRINK_FAC",
            "name": "VAR_SHRINK_FAC",
            "optional": true,
            "type": "String",
            "value-key": "[VAR_SHRINK_FAC]"
        },
        {
            "command-line-flag": "-no_var_shrink_fac",
            "description": "Do not use var_shrink_fac.",
            "id": "NO_VAR_SHRINK_FAC",
            "name": "NO_VAR_SHRINK_FAC",
            "optional": true,
            "type": "String",
            "value-key": "[NO_VAR_SHRINK_FAC]"
        },
        {
            "command-line-flag": "-shrink_fac_bot_lim",
            "description": "Do not allow the varying SF to go below SFBL . Default 0.65, 0.4 when edge detection is used. This option helps reduce potential for leakage below the cerebellum. In certain cases where you have severe non-uniformity resulting in low signal towards the bottom of the brain, you will need to reduce this parameter.",
            "id": "SHRINK_FAC_BOT_LIM",
            "name": "SHRINK_FAC_BOT_LIM",
            "optional": true,
            "type": "String",
            "value-key": "[SHRINK_FAC_BOT_LIM]"
        },
        {
            "command-line-flag": "-pushout",
            "description": "Consider values above each node in addition to values below the node when deciding on expansion. (Default)",
            "id": "PUSHOUT",
            "name": "PUSHOUT",
            "optional": true,
            "type": "String",
            "value-key": "[PUSHOUT]"
        },
        {
            "command-line-flag": "-no_pushout",
            "description": "Do not use -pushout.",
            "id": "NO_PUSHOUT",
            "name": "NO_PUSHOUT",
            "optional": true,
            "type": "String",
            "value-key": "[NO_PUSHOUT]"
        },
        {
            "command-line-flag": "-exp_frac",
            "description": "Speed of expansion (see BET paper). Default is 0.1.",
            "id": "EXP_FRAC",
            "name": "EXP_FRAC",
            "optional": true,
            "type": "String",
            "value-key": "[EXP_FRAC]"
        },
        {
            "command-line-flag": "-touchup",
            "description": "Perform touchup operations at end to include areas not covered by surface expansion. Use -touchup -touchup for aggressive makeup. (Default is -touchup)",
            "id": "TOUCHUP",
            "name": "TOUCHUP",
            "optional": true,
            "type": "String",
            "value-key": "[TOUCHUP]"
        },
        {
            "command-line-flag": "-no_touchup",
            "description": "Do not use -touchup",
            "id": "NO_TOUCHUP",
            "name": "NO_TOUCHUP",
            "optional": true,
            "type": "String",
            "value-key": "[NO_TOUCHUP]"
        },
        {
            "command-line-flag": "-fill_hole",
            "description": "Fill small holes that can result from small surface intersections caused by the touchup operation. R is the maximum number of pixels on the side of a hole that can be filled. Big holes are not filled. If you use -touchup, the default R is 10. Otherwise the default is 0. This is a less than elegant solution to the small intersections which are usually eliminated automatically.",
            "id": "FILL_HOLE",
            "name": "FILL_HOLE",
            "optional": true,
            "type": "String",
            "value-key": "[FILL_HOLE]"
        },
        {
            "command-line-flag": "-NN_smooth",
            "description": "Perform Nearest Neighbor coordinate interpolation every few iterations. Default is 72",
            "id": "NN_SMOOTH",
            "name": "NN_SMOOTH",
            "optional": true,
            "type": "String",
            "value-key": "[NN_SMOOTH]"
        },
        {
            "command-line-flag": "-smooth_final",
            "description": "Perform final surface smoothing after all iterations. Default is 20 smoothing iterations. Smoothing is done using Taubin's method, see SurfSmooth -help for detail.",
            "id": "SMOOTH_FINAL",
            "name": "SMOOTH_FINAL",
            "optional": true,
            "type": "String",
            "value-key": "[SMOOTH_FINAL]"
        },
        {
            "command-line-flag": "-avoid_vent",
            "description": "avoid ventricles. Default. Use this option twice to make the avoidance more agressive. That is at times needed with old brains.",
            "id": "AVOID_VENT",
            "name": "AVOID_VENT",
            "optional": true,
            "type": "String",
            "value-key": "[AVOID_VENT]"
        },
        {
            "command-line-flag": "-no_avoid_vent",
            "description": "Do not use -avoid_vent.",
            "id": "NO_AVOID_VENT",
            "name": "NO_AVOID_VENT",
            "optional": true,
            "type": "String",
            "value-key": "[NO_AVOID_VENT]"
        },
        {
            "command-line-flag": "-init_radius",
            "description": "Use RAD for the initial sphere radius. For the automatic setting, there is an upper limit of 100mm for humans. For older brains with lots of CSF, you might benefit from forcing the radius to something like 75mm",
            "id": "INIT_RADIUS",
            "name": "INIT_RADIUS",
            "optional": true,
            "type": "String",
            "value-key": "[INIT_RADIUS]"
        },
        {
            "command-line-flag": "-avoid_eyes",
            "description": "avoid eyes. Default",
            "id": "AVOID_EYES",
            "name": "AVOID_EYES",
            "optional": true,
            "type": "String",
            "value-key": "[AVOID_EYES]"
        },
        {
            "command-line-flag": "-no_avoid_eyes",
            "description": "Do not use -avoid_eyes.",
            "id": "NO_AVOID_EYES",
            "name": "NO_AVOID_EYES",
            "optional": true,
            "type": "String",
            "value-key": "[NO_AVOID_EYES]"
        },
        {
            "command-line-flag": "-use_edge",
            "description": "Use edge detection to reduce leakage into meninges and eyes. Default.",
            "id": "USE_EDGE",
            "name": "USE_EDGE",
            "optional": true,
            "type": "String",
            "value-key": "[USE_EDGE]"
        },
        {
            "command-line-flag": "-no_use_edge",
            "description": "Do no use edges.",
            "id": "NO_USE_EDGE",
            "name": "NO_USE_EDGE",
            "optional": true,
            "type": "String",
            "value-key": "[NO_USE_EDGE]"
        },
        {
            "command-line-flag": "-push_to_edge",
            "description": "Perform aggressive push to edge at the end. This option might cause leakage.",
            "id": "PUSH_TO_EDGE",
            "name": "PUSH_TO_EDGE",
            "optional": true,
            "type": "String",
            "value-key": "[PUSH_TO_EDGE]"
        },
        {
            "command-line-flag": "-no_push_to_edge",
            "description": "(Default).",
            "id": "NO_PUSH_TO_EDGE",
            "name": "NO_PUSH_TO_EDGE",
            "optional": true,
            "type": "String",
            "value-key": "[NO_PUSH_TO_EDGE]"
        },
        {
            "command-line-flag": "-use_skull",
            "description": "Use outer skull to limit expansion of surface into the skull due to very strong shading artifacts. This option is buggy at the moment, use it only if you have leakage into skull.",
            "id": "USE_SKULL",
            "name": "USE_SKULL",
            "optional": true,
            "type": "String",
            "value-key": "[USE_SKULL]"
        },
        {
            "command-line-flag": "-no_use_skull",
            "description": "Do not use -use_skull (Default).",
            "id": "NO_USE_SKULL",
            "name": "NO_USE_SKULL",
            "optional": true,
            "type": "String",
            "value-key": "[NO_USE_SKULL]"
        },
        {
            "command-line-flag": "-send_no_skull",
            "description": "Do not send the skull surface to SUMA if you are using  -talk_suma",
            "id": "SEND_NO_SKULL",
            "name": "SEND_NO_SKULL",
            "optional": true,
            "type": "String",
            "value-key": "[SEND_NO_SKULL]"
        },
        {
            "command-line-flag": "-perc_int",
            "description": "Percentage of segments allowed to intersect surface. Ideally this should be 0 (Default). However, few surfaces might have small stubborn intersections that produce a few holes. PERC_INT should be a small number, typically between 0 and 0.1. A -1 means do not do any testing for intersection.",
            "id": "PERC_INT",
            "name": "PERC_INT",
            "optional": true,
            "type": "String",
            "value-key": "[PERC_INT]"
        },
        {
            "command-line-flag": "-max_inter_iter",
            "description": "Number of iteration to remove intersection problems. With each iteration, the program automatically increases the amount of smoothing to get rid of intersections. Default is 4",
            "id": "MAX_INTER_ITER",
            "name": "MAX_INTER_ITER",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_INTER_ITER]"
        },
        {
            "command-line-flag": "-blur_fwhm",
            "description": "Blur dset after spatial normalization. Recommended when you have lots of CSF in brain and when you have protruding gyri (finger like) Recommended value is 2..4.",
            "id": "BLUR_FWHM",
            "name": "BLUR_FWHM",
            "optional": true,
            "type": "String",
            "value-key": "[BLUR_FWHM]"
        },
        {
            "command-line-flag": "-interactive",
            "description": "Make the program stop at various stages in the segmentation process for a prompt from the user to continue or skip that stage of processing. This option is best used in conjunction with options -talk_suma and -feed_afni",
            "id": "INTERACTIVE",
            "name": "INTERACTIVE",
            "optional": true,
            "type": "String",
            "value-key": "[INTERACTIVE]"
        },
        {
            "command-line-flag": "-demo_pause",
            "description": "Pause at various step in the process to facilitate interactive demo while 3dSkullStrip is communicating with AFNI and SUMA. See 'Eye Candy' mode below and -talk_suma option.",
            "id": "DEMO_PAUSE",
            "name": "DEMO_PAUSE",
            "optional": true,
            "type": "String",
            "value-key": "[DEMO_PAUSE]"
        },
        {
            "command-line-flag": "-fac",
            "description": "Multiply input dataset by FAC if range of values is too small.  Specifying output surfaces using -o or -o_TYPE options: -o_TYPE outSurf specifies the output surface, TYPE is one of the following: fs: FreeSurfer ascii surface. fsp: FeeSurfer ascii patch surface. In addition to outSurf, you need to specify the name of the parent surface for the patch. using the -ipar_TYPE option. This option is only for ConvertSurface sf: SureFit surface. For most programs, you are expected to specify prefix: i.e. -o_sf brain. In some programs, you are allowed to specify both .coord and .topo file names: i.e. -o_sf XYZ.coord TRI.topo The program will determine your choice by examining the first character of the second parameter following",
            "id": "FAC",
            "name": "FAC",
            "optional": true,
            "type": "String",
            "value-key": "[FAC]"
        },
        {
            "command-line-flag": "-o_sf",
            "description": "-o_sf. If that character is a '-' then you have supplied a prefix and the program will generate the coord and topo names. vec (or 1D): Simple ascii matrix format. For most programs, you are expected to specify prefix: i.e. -o_1D brain. In some programs, you are allowed to specify both coord and topo file names: i.e. -o_1D brain.1D.coord brain.1D.topo coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. stl: STL format, ascii or binary (see also STL under option -i_TYPE). byu: BYU format, ascii or binary. mni: MNI obj format, ascii only. gii: GIFTI format, ascii. You can also enforce the encoding of data arrays by using gii_asc, gii_b64, or gii_b64gz for ASCII, Base64, or Base64 Gzipped. If AFNI_NIML_TEXT_DATA environment variable is set to YES, the the default encoding is ASCII, otherwise it is Base64. obj: No support for writing OBJ format exists yet. Note that if the surface filename has the proper extension, it is enough to use the -o option and let the programs guess the type from the extension.  SUMA communication options:",
            "id": "O_SF",
            "name": "O_SF",
            "optional": true,
            "type": "String",
            "value-key": "[O_SF]"
        },
        {
            "command-line-flag": "-talk_suma",
            "description": "Send progress with each iteration to SUMA.",
            "id": "TALK_SUMA",
            "name": "TALK_SUMA",
            "optional": true,
            "type": "String",
            "value-key": "[TALK_SUMA]"
        },
        {
            "command-line-flag": "-refresh_rate",
            "description": "Maximum number of updates to SUMA per second. The default is the maximum speed.",
            "id": "REFRESH_RATE",
            "name": "REFRESH_RATE",
            "optional": true,
            "type": "String",
            "value-key": "[REFRESH_RATE]"
        },
        {
            "command-line-flag": "-send_kth",
            "description": "Send the kth element to SUMA (default is 1). This allows you to cut down on the number of elements being sent to SUMA.",
            "id": "SEND_KTH",
            "name": "SEND_KTH",
            "optional": true,
            "type": "String",
            "value-key": "[SEND_KTH]"
        },
        {
            "command-line-flag": "-sh",
            "description": "-sh <SumaHost>: Name (or IP address) of the computer running SUMA. This parameter is optional, the default is 127.0.0.1",
            "id": "SH",
            "name": "SH",
            "optional": true,
            "type": "String",
            "value-key": "[SH]"
        },
        {
            "command-line-flag": "-ni_text",
            "description": "Use NI_TEXT_MODE for data transmission.",
            "id": "NI_TEXT",
            "name": "NI_TEXT",
            "optional": true,
            "type": "String",
            "value-key": "[NI_TEXT]"
        },
        {
            "command-line-flag": "-ni_binary",
            "description": "Use NI_BINARY_MODE for data transmission. (default is ni_binary).",
            "id": "NI_BINARY",
            "name": "NI_BINARY",
            "optional": true,
            "type": "String",
            "value-key": "[NI_BINARY]"
        },
        {
            "command-line-flag": "-feed_afni",
            "description": "Send updates to AFNI via SUMA's talk.",
            "id": "FEED_AFNI",
            "name": "FEED_AFNI",
            "optional": true,
            "type": "String",
            "value-key": "[FEED_AFNI]"
        },
        {
            "command-line-flag": "-np",
            "description": "Provide a port offset to allow multiple instances of AFNI <--> SUMA, AFNI <--> 3dGroupIncorr, or any other programs that communicate together to operate on the same machine. All ports are assigned numbers relative to PORT_OFFSET. The same PORT_OFFSET value must be used on all programs that are to talk together. PORT_OFFSET is an integer in the inclusive range [1025 to 65500]. When you want to use multiple instances of communicating programs, be sure the PORT_OFFSETS you use differ by about 50 or you may still have port conflicts. A BETTER approach is to use -npb below.",
            "id": "NP",
            "name": "NP",
            "optional": true,
            "type": "String",
            "value-key": "[NP]"
        },
        {
            "command-line-flag": "-npq",
            "description": "Like -np, but more quiet in the face of adversity.",
            "id": "NPQ",
            "name": "NPQ",
            "optional": true,
            "type": "String",
            "value-key": "[NPQ]"
        },
        {
            "command-line-flag": "-npb",
            "description": "Similar to -np, except it is easier to use. PORT_OFFSET_BLOC is an integer between 0 and MAX_BLOC. MAX_BLOC is around 4000 for now, but it might decrease as we use up more ports in AFNI. You should be safe for the next 10 years if you stay under 2000. Using this function reduces your chances of causing port conflicts.  See also afni and suma options: -list_ports and -port_number for information about port number assignments.  You can also provide a port offset with the environment variable AFNI_PORT_OFFSET. Using -np overrides AFNI_PORT_OFFSET.",
            "id": "NPB",
            "name": "NPB",
            "optional": true,
            "type": "String",
            "value-key": "[NPB]"
        },
        {
            "command-line-flag": "-max_port_bloc",
            "description": "Print the current value of MAX_BLOC and exit. Remember this value can get smaller with future releases. Stay under 2000.",
            "id": "MAX_PORT_BLOC",
            "name": "MAX_PORT_BLOC",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_PORT_BLOC]"
        },
        {
            "command-line-flag": "-max_port_bloc_quiet",
            "description": "Spit MAX_BLOC value only and exit.",
            "id": "MAX_PORT_BLOC_QUIET",
            "name": "MAX_PORT_BLOC_QUIET",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_PORT_BLOC_QUIET]"
        },
        {
            "command-line-flag": "-num_assigned_ports",
            "description": "Print the number of assigned ports used by AFNI then quit.",
            "id": "NUM_ASSIGNED_PORTS",
            "name": "NUM_ASSIGNED_PORTS",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_ASSIGNED_PORTS]"
        },
        {
            "command-line-flag": "-num_assigned_ports_quiet",
            "description": "Do it quietly.  Port Handling Examples: ----------------------- Say you want to run three instances of AFNI <--> SUMA. For the first you just do: suma -niml -spec ... -sv ...  & afni -niml & Then for the second instance pick an offset bloc, say 1 and run suma -niml -npb 1 -spec ... -sv ...  & afni -niml -npb 1 & And for yet another instance: suma -niml -npb 2 -spec ... -sv ...  & afni -niml -npb 2 & etc.  Since you can launch many instances of communicating programs now, you need to know wich SUMA window, say, is talking to which AFNI. To sort this out, the titlebars now show the number of the bloc of ports they are using. When the bloc is set either via environment variables AFNI_PORT_OFFSET or AFNI_PORT_BLOC, or with one of the -np* options, window title bars change from [A] to [A#] with # being the resultant bloc number. In the examples above, both AFNI and SUMA windows will show [A2] when -npb is 2.",
            "id": "NUM_ASSIGNED_PORTS_QUIET",
            "name": "NUM_ASSIGNED_PORTS_QUIET",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_ASSIGNED_PORTS_QUIET]"
        },
        {
            "command-line-flag": "-visual",
            "description": "Equivalent to using -talk_suma -feed_afni -send_kth 5",
            "id": "VISUAL",
            "name": "VISUAL",
            "optional": true,
            "type": "String",
            "value-key": "[VISUAL]"
        },
        {
            "command-line-flag": "-debug",
            "description": "debug levels of 0 (default), 1, 2, 3. This is no Rick Reynolds debug, which is oft nicer than the results, but it will do.",
            "id": "DEBUG",
            "name": "DEBUG",
            "optional": true,
            "type": "String",
            "value-key": "[DEBUG]"
        },
        {
            "command-line-flag": "-node_debug",
            "description": "Output lots of parameters for node NODE_DBG for each iteration. The next 3 options are for specifying surface coordinates to keep the program from having to recompute them. The options are only useful for saving time during debugging.",
            "id": "NODE_DEBUG",
            "name": "NODE_DEBUG",
            "optional": true,
            "type": "String",
            "value-key": "[NODE_DEBUG]"
        },
        {
            "command-line-flag": "-brain_contour_xyz_file",
            "description": "-brain_contour_xyz_file BRAIN_CONTOUR_XYZ.1D",
            "id": "BRAIN_CONTOUR_XYZ_FILE",
            "name": "BRAIN_CONTOUR_XYZ_FILE",
            "optional": true,
            "type": "String",
            "value-key": "[BRAIN_CONTOUR_XYZ_FILE]"
        },
        {
            "command-line-flag": "-brain_hull_xyz_file",
            "description": "-brain_hull_xyz_file BRAIN_HULL_XYZ.1D",
            "id": "BRAIN_HULL_XYZ_FILE",
            "name": "BRAIN_HULL_XYZ_FILE",
            "optional": true,
            "type": "String",
            "value-key": "[BRAIN_HULL_XYZ_FILE]"
        },
        {
            "command-line-flag": "-skull_outer_xyz_file",
            "description": "-skull_outer_xyz_file SKULL_OUTER_XYZ.1D",
            "id": "SKULL_OUTER_XYZ_FILE",
            "name": "SKULL_OUTER_XYZ_FILE",
            "optional": true,
            "type": "String",
            "value-key": "[SKULL_OUTER_XYZ_FILE]"
        },
        {
            "command-line-flag": "-help",
            "description": "The help you need  [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-h",
            "description": "Mini help, at time, same as -help in many cases.",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.    Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        },
        {
            "description": "NA",
            "id": "program",
            "name": "program",
            "optional": false,
            "type": "String",
            "value-key": "[PROGRAM]"
        },
        {
            "description": "NA",
            "id": "to",
            "name": "to",
            "optional": false,
            "type": "String",
            "value-key": "[TO]"
        },
        {
            "description": "NA",
            "id": "extract",
            "name": "extract",
            "optional": false,
            "type": "String",
            "value-key": "[EXTRACT]"
        },
        {
            "description": "NA",
            "id": "the",
            "name": "the",
            "optional": false,
            "type": "String",
            "value-key": "[THE]"
        },
        {
            "description": "NA",
            "id": "brain",
            "name": "brain",
            "optional": false,
            "type": "String",
            "value-key": "[BRAIN]"
        },
        {
            "description": "NA",
            "id": "from",
            "name": "from",
            "optional": false,
            "type": "String",
            "value-key": "[FROM]"
        },
        {
            "description": "NA",
            "id": "surrounding.",
            "name": "surrounding.",
            "optional": false,
            "type": "String",
            "value-key": "[SURROUNDING.]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}