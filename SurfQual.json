{
    "command-line": "SurfQual [SPEC] [SURF_X] [SUMMARY] [SELF_INTERSECT] [SPHERE] [PREFIX] [I_TYPE] [ONESTATE] [ANATOMICAL] [I] [TN] [TSN] [SV] [SURF_A] [H] [HELP] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS] [PROGRAM] [TO] [CHECK] [THE] [QUALITY] [OF] [SURFACES.]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-spec",
            "description": "Spec file containing input surfaces.",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-surf_X",
            "description": "Name of input surface X where X is a character from A to Z. If surfaces are specified using two files, use the name of the node coordinate file. Mesh winding consistency and 2-manifold checks are performed on all surfaces. Optional parameters:",
            "id": "SURF_X",
            "name": "SURF_X",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_X]"
        },
        {
            "command-line-flag": "-summary",
            "description": "Provide summary of results to stdout",
            "id": "SUMMARY",
            "name": "SUMMARY",
            "optional": true,
            "type": "String",
            "value-key": "[SUMMARY]"
        },
        {
            "command-line-flag": "-self_intersect",
            "description": "Check if surface is self intersecting. This option is rather slow, so be patient. In the presence of intersections, the output file OUTPREF_IntersNodes.1D.dset will contain the indices of nodes forming segments that intersect the surface. Most other checks are specific to spherical surfaces (see option below).",
            "id": "SELF_INTERSECT",
            "name": "SELF_INTERSECT",
            "optional": true,
            "type": "String",
            "value-key": "[SELF_INTERSECT]"
        },
        {
            "command-line-flag": "-sphere",
            "description": "Indicates that surfaces read are spherical. With this option you get the following output. - Absolute deviation between the distance (d) of each node from the surface's center and the estimated radius(r). The distances, abs (d - r), are and written to the file OUTPREF_Dist.1D.dset . The first column represents node index and the second is the absolute distance. A colorized version of the distances is written to the file OUTPREF_Dist.1D.col (node index followed by r g b values). A list of the 10 largest absolute distances is also output to the screen. - Also computed is the cosine of the angle between the normal at a node and the direction vector formed formed by the center and that node. Since both vectors are normalized, the cosine of the angle is the dot product. On a sphere, the abs(dot product) should be 1 or pretty close. Nodes where abs(dot product) < 0.9 are flagged as bad and written out to the file OUTPREF_BadNodes.1D.dset . The file OUTPREF_dotprod.1D.dset contains the dot product values for all the nodes. The files with colorized results are OUTPREF_BadNodes.1D.col and OUTPREF_dotprod.1D.col . A list of the bad nodes is also output to the screen for convenience. You can use the 'j' option in SUMA to have the cross-hair go to a particular node. Use 'Alt+l' to have the surface rotate and place the cross-hair at the center of your screen. NOTE: For detecting topological problems with spherical surfaces, I find the dot product method to work best. Optional parameters:",
            "id": "SPHERE",
            "name": "SPHERE",
            "optional": true,
            "type": "String",
            "value-key": "[SPHERE]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Prefix of output files. If more than one surface are entered, then the prefix will have _X added to it, where X is a character from A to Z. THIS PROGRAM WILL OVERWRITE EXISTING FILES. Default prefix is the surface's label.  Comments: - The colorized (.col) files can be loaded into SUMA (with the 'c' option. By focusing on the bright spots, you can find trouble spots which would otherwise be very difficult to locate. - You should also pay attention to the messages output when the surfaces are being loaded, particularly to edges (segments that join 2 nodes) are shared by more than 2 triangles. For a proper closed surface, every segment should be shared by 2 triangles. For cut surfaces, segments belonging to 1 triangle only form the edge of that surface. - There are no utilities within SUMA to correct these defects. It is best to fix these problems with the surface creation software you are using. - Some warnings may be redundant. That should not hurt you. Specifying input surfaces using -i or -i_TYPE options:",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-i_TYPE",
            "description": "-i_TYPE inSurf specifies the input surface, TYPE is one of the following: fs: FreeSurfer surface. If surface name has .asc it is assumed to be in ASCII format. Otherwise it is assumed to be in BINARY_BE (Big Endian) format. Patches in Binary format cannot be read at the moment. sf: SureFit surface. You must specify the .coord followed by the .topo file. vec (or 1D): Simple ascii matrix format. You must specify the coord (NodeList) file followed by the topo (FaceSetList) file. coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. Only vertex and triangulation info is preserved. stl: STL format, ascii or binary. This format of no use for much of the surface-based analyses. Objects are defined as a soup of triangles with no information about which edges they share. STL is only useful for taking surface models to some 3D printing software. mni: MNI .obj format, ascii only. Only vertex, triangulation, and node normals info is preserved. byu: BYU format, ascii. Polygons with more than 3 edges are turned into triangles. bv: BrainVoyager format. Only vertex and triangulation info is preserved. dx: OpenDX ascii mesh format. Only vertex and triangulation info is preserved. Requires presence of 3 objects, the one of class 'field' should contain 2 components 'positions' and 'connections' that point to the two objects containing node coordinates and topology, respectively. gii: GIFTI XML surface format. obj: OBJ file format for triangular meshes only. The following primitives are preserved: v (vertices), (faces, triangles only), and p (points) Note that if the surface filename has the proper extension, it is enough to use the -i option and let the programs guess the type from the extension.  You can also specify multiple surfaces after -i option. This makes it possible to use wildcards on the command line for reading in a bunch of surfaces at once.",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-onestate",
            "description": "Make all -i_* surfaces have the same state, i.e. they all appear at the same time in the viewer. By default, each -i_* surface has its own state. For -onestate to take effect, it must precede all -i options with on the command line.",
            "id": "ONESTATE",
            "name": "ONESTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ONESTATE]"
        },
        {
            "command-line-flag": "-anatomical",
            "description": "Label all -i surfaces as anatomically correct. Again, this option should precede the -i_* options.  More variants for option -i: ----------------------------- You can also load standard-mesh spheres that are formed in memory with the following notation",
            "id": "ANATOMICAL",
            "name": "ANATOMICAL",
            "optional": true,
            "type": "String",
            "value-key": "[ANATOMICAL]"
        },
        {
            "command-line-flag": "-i",
            "description": "Where NUM is the parameter controlling the mesh density exactly as the parameter -ld linDepth does in CreateIcosahedron. For example: suma -i ld60 create on the fly a surface that is identical to the one produced by: CreateIcosahedron -ld 60 -tosphere",
            "id": "I",
            "name": "I",
            "optional": true,
            "type": "String",
            "value-key": "[I]"
        },
        {
            "command-line-flag": "-tn",
            "description": "specify surface type and name. See below for help on the parameters.",
            "id": "TN",
            "name": "TN",
            "optional": true,
            "type": "String",
            "value-key": "[TN]"
        },
        {
            "command-line-flag": "-tsn",
            "description": "specify surface type state and name. TYPE: Choose from the following (case sensitive): 1D: 1D format FS: FreeSurfer ascii format PLY: ply format MNI: MNI obj ascii format BYU: byu format SF: Caret/SureFit format BV: BrainVoyager format GII: GIFTI format NAME: Name of surface file. For SF and 1D formats, NAME is composed of two names the coord file followed by the topo file STATE: State of the surface. Default is S1, S2.... for each surface. Specifying a Surface Volume:",
            "id": "TSN",
            "name": "TSN",
            "optional": true,
            "type": "String",
            "value-key": "[TSN]"
        },
        {
            "command-line-flag": "-sv",
            "description": "-sv SurfaceVolume [VolParam for sf surfaces] If you supply a surface volume, the coordinates of the input surface. are modified to SUMA's convention and aligned with SurfaceVolume. You must also specify a VolParam file for SureFit surfaces. Specifying a surface specification (spec) file:",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-surf_A",
            "description": "specify the name of the first surface to load. If the program requires or allows multiple surfaces, use -surf_B ... -surf_Z . You need not use _A if only one surface is expected. SURFACE is the name of the surface as specified in the SPEC file. The use of -surf_ option requires the use of -spec option.  [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "SURF_A",
            "name": "SURF_A",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_A]"
        },
        {
            "command-line-flag": "-h",
            "description": "Mini help, at time, same as -help in many cases.",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-help",
            "description": "The entire help output",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.    Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        },
        {
            "description": "NA",
            "id": "program",
            "name": "program",
            "optional": false,
            "type": "String",
            "value-key": "[PROGRAM]"
        },
        {
            "description": "NA",
            "id": "to",
            "name": "to",
            "optional": false,
            "type": "String",
            "value-key": "[TO]"
        },
        {
            "description": "NA",
            "id": "check",
            "name": "check",
            "optional": false,
            "type": "String",
            "value-key": "[CHECK]"
        },
        {
            "description": "NA",
            "id": "the",
            "name": "the",
            "optional": false,
            "type": "String",
            "value-key": "[THE]"
        },
        {
            "description": "NA",
            "id": "quality",
            "name": "quality",
            "optional": false,
            "type": "String",
            "value-key": "[QUALITY]"
        },
        {
            "description": "NA",
            "id": "of",
            "name": "of",
            "optional": false,
            "type": "String",
            "value-key": "[OF]"
        },
        {
            "description": "NA",
            "id": "surfaces.",
            "name": "surfaces.",
            "optional": false,
            "type": "String",
            "value-key": "[SURFACES.]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}