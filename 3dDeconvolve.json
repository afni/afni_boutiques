{
    "command-line": "3dDeconvolve [INPUT] [DAFNI_WRITE_1D_AS_PREFIX] [SAT] [POLORT] [NUM_STIMTS] [STIM_FILE] [ORTVEC] [STIM_TIMES] [X1D] [LOCAL_TIMES] [STIM_TIMES_AM2] [STIM_TIMES_AM1] [NUM_GLT] [JOBS] [VIRTVEC]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-input",
            "description": "filename of 3D+time input dataset [more than  one filename  can  be  given] [here,   and  these  datasets  will   be] [auto-catenated in time; if you do this,] ['-concat' is not needed and is ignored.] ** You can input a 1D time series file here, but the time axis should run along the ROW direction, not the COLUMN direction as in the -input1D option.  You can automatically transpose a 1D file on input using the \\' operator at the end of the filename, as in -input fred.1D\\' * This is the only way to use 3dDeconvolve with a multi-column 1D time series file. * The output datasets by default will then be in 1D format themselves.  To have them formatted as AFNI datasets instead, use",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-DAFNI_WRITE_1D_AS_PREFIX",
            "description": "ES on the command line. * You should use '-force_TR' to set the TR of the 1D 'dataset' if you use '-input' rather than '-input1D' [the default is 1.0 sec].",
            "id": "DAFNI_WRITE_1D_AS_PREFIX",
            "name": "DAFNI_WRITE_1D_AS_PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[DAFNI_WRITE_1D_AS_PREFIX]"
        },
        {
            "command-line-flag": "-sat",
            "description": "-sat OR -trans     * 3dDeconvolve can check the dataset time series for initial saturation transients, which should normally have been excised before data analysis. If you want to have it do this somewhat time consuming check, use the option '-sat'. * Or set environment variable AFNI_SKIP_SATCHECK to NO. * Program 3dSatCheck does this check, also.  [-noblock]           Normally, if you input multiple datasets with '-input', then the separate datasets are taken to be separate image runs that get separate baseline models.  If you want to have the program consider these to be all one big run, use -noblock. * If any of the input dataset has only 1 sub-brick, then this option is automatically invoked! * If the auto-catenation feature isn't used, then this option has no effect, no how, no way.  [-force_TR TR]       Use this value of TR instead of the one in the -input dataset. (It's better to fix the input using 3drefit.)  [-input1D dname]     dname = filename of single (fMRI) .1D time series where time run downs the column.  [-TR_1D tr1d]        tr1d = TR for .1D time series [default 1.0 sec]. This option has no effect without -input1D  [-nodata [NT [TR]]   Evaluate experimental design only (no input data) * Optional, but highly recommended: follow the '-nodata' with two numbers, NT=number of time points, and TR=time spacing between points (sec)  [-mask mname]        mname = filename of 3D mask dataset Only data time series from within the mask will be analyzed; results for voxels outside the mask will be set to zero.  [-automask]          Build a mask automatically from input data (will be slow for long time series datasets) ** If you don't specify ANY mask, the program will build one automatically (from each voxel's RMS) and use this mask solely for the purpose of reporting truncation-to-short errors (if '-short' is used) AND for computing the FDR curves in the bucket dataset's header (unless '-noFDR' is used, of course). * If you don't want the FDR curves to be computed inside this automatically generated mask, then use '-noFDR' and later run '3drefit -addFDR' on the bucket dataset. * To be precise, the above default masking only happens when you use '-input' to run the program with a 3D+time dataset; not with '-input1D'.  [-STATmask sname]    Build a mask from file 'sname', and use this mask for the purpose of reporting truncation-to float issues AND for computing the FDR curves. The actual results ARE not masked with this option (only with '-mask' or '-automask' options) * If you don't use '-STATmask', then the mask from '-mask' or '-automask' is used for these purposes.  If neither of those is given, then the automatically generated mask described just above is used for these purposes.  [-censor cname]      cname = filename of censor .1D time series * This is a file of 1s and 0s, indicating which time points are to be included (1) and which are to be excluded (0). * Option '-censor' can only be used once! * The option below may be simpler to use!  [-CENSORTR clist]    clist = list of strings that specify time indexes to be removed from the analysis.  Each string is of one of the following forms: 37 => remove global time index #37 2:37 => remove time index #37 in run #2 37..47 => remove global time indexes #37-47 37-47  => same as above 2:37..47 => remove time indexes #37-47 in run #2 *:0-2    => remove time indexes #0-2 in all runs +Time indexes within each run start at 0. +Run indexes start at 1 (just be to confusing). +Multiple -CENSORTR options may be used, or multiple -CENSORTR strings can be given at once, separated by spaces or commas. +N.B.: 2:37,47 means index #37 in run #2 and global time index 47; it does NOT mean index #37 in run #2 AND index #47 in run #2.  [-concat rname]      rname = filename for list of concatenated runs * 'rname' can be in the format '1D: 0 100 200 300' which indicates 4 runs, the first of which starts at time index=0, second at index=100, and so on.  [-nfirst fnum]       fnum = number of first dataset image to use in the deconvolution procedure. [default = max maxlag]  [-nlast  lnum]       lnum = number of last dataset image to use in the deconvolution procedure. [default = last point]  [-polort pnum]       pnum = degree of polynomial corresponding to the null hypothesis  [default: pnum = 1] ** For pnum > 2, this type of baseline detrending is roughly equivalent to a highpass filter with a cutoff of (p-2)/D Hz, where 'D' is the duration of the imaging run: D = N*TR ** If you use 'A' for pnum, the program will automatically choose a value based on the time duration D of the longest run: pnum = 1 + int(D/150) ==>>** 3dDeconvolve is the ONLY AFNI program with the",
            "id": "SAT",
            "name": "SAT",
            "optional": true,
            "type": "String",
            "value-key": "[SAT]"
        },
        {
            "command-line-flag": "-polort",
            "description": "-polort option that allows the use of 'A' to set the polynomial order automatically!!! ** Use '-1' for pnum to specifically NOT include any polynomials in the baseline model.  Only do this if you know what this means!  [-legendre]          use Legendre polynomials for null hypothesis (baseline model)  [-nolegendre]        use power polynomials for null hypotheses [default is -legendre] ** Don't do this unless you are crazy!  [-nodmbase]          don't de-mean baseline time series (i.e., polort>0 and -stim_base inputs) [-dmbase]            de-mean baseline time series [default if polort>=0]  [-svd]               Use SVD instead of Gaussian elimination [default] [-nosvd]             Use Gaussian elimination instead of SVD (only use for testing + backwards compatibility)  [-rmsmin r]          r = minimum rms error to reject reduced model (default = 0; don't use this option normally!)  [-nocond]            DON'T calculate matrix condition number ** This value is NOT the same as Matlab!  [-singvals]          Print out the matrix singular values (useful for some testing/debugging purposes) Also see program 1dsvd.  [-GOFORIT [g]]       Use this to proceed even if the matrix has bad problems (e.g., duplicate columns, large condition number, etc.). *N.B.: Warnings that you should particularly heed have the string '!!' somewhere in their text. *N.B.: Error and Warning messages go to stderr and also to file 3dDeconvolve.err. ++ You can disable the creation of this .err file by setting environment variable AFNI_USE_ERROR_FILE to NO before running this program. *N.B.: The optional number 'g' that appears is the number of warnings that can be ignored. That is, if you use -GOFORIT 7 and 9 '!!' matrix warnings appear, then the program will not run.  If 'g' is not present, 1 is used.  [-allzero_OK]        Don't consider all zero matrix columns to be the type of error that -GOFORIT is needed to ignore. * Please know what you are doing when you use this option!  [-Dname=val]       = Set environment variable 'name' to 'val' for this run of the program only.  ******* Input stimulus options *******",
            "id": "POLORT",
            "name": "POLORT",
            "optional": true,
            "type": "String",
            "value-key": "[POLORT]"
        },
        {
            "command-line-flag": "-num_stimts",
            "description": "number of input stimulus time series (0 <= num)   [default: num = 0] *N.B.: '-num_stimts' must come before any of the following '-stim' options! *N.B.: Most '-stim' options have as their first argument an integer 'k', ranging from 1..num, indicating which stimulus class the argument is defining. *N.B.: The purpose of requiring this option is to make sure your model is complete -- that is, you say you are giving 5 '-stim' options, and then the program makes sure that all of them are given -- that is, that you don't forget something.",
            "id": "NUM_STIMTS",
            "name": "NUM_STIMTS",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_STIMTS]"
        },
        {
            "command-line-flag": "-stim_file",
            "description": "filename of kth time series input stimulus *N.B.: This option directly inserts a column into the regression matrix; unless you are using the 'old' method of deconvolution (cf below), you would normally only use '-stim_file' to insert baseline model components such as motion parameters.  [-stim_label k slabel] slabel = label for kth input stimulus *N.B.: This option is highly recommended, so that output sub-bricks will be labeled for ease of recognition when you view them in the AFNI GUI.  [-stim_base k]       kth input stimulus is part of the baseline model *N.B.: 'Baseline model' == Null Hypothesis model *N.B.: The most common baseline components to add are the 6 estimated motion parameters from 3dvolreg.",
            "id": "STIM_FILE",
            "name": "STIM_FILE",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_FILE]"
        },
        {
            "command-line-flag": "-ortvec",
            "description": "-ortvec fff lll      This option lets you input a rectangular array of 1 or more baseline vectors from file 'fff', which will get the label 'lll'.  Functionally, it is the same as using '-stim_file' on each column of 'fff' separately (plus '-stim_base'). This method is just a faster and simpler way to include a lot of baseline regressors in one step. -->>**N.B.: This file is NOT included in the '-num_stimts' count that you provide. *N.B.: These regression matrix columns appear LAST in the matrix, after everything else. *N.B.: You can use column '[..]' and/or row '{..}' selectors on the filename 'fff' to pick out a subset of the numbers in that file. *N.B.: The q-th column of 'fff' will get a label like 'lll[q]' in the 3dDeconvolve results. *N.B.: This option is known as the 'Inati Option'. *N.B.: Unlike the original 'Inati' (who is unique), it is allowed to have more than one '-ortvec' option. *N.B.: Program 1dBport is one place to generate a file for use with '-ortvec'; 1deval might be another.  **N.B.: You must have -num_stimts > 0  AND/OR You must use  -ortvec          AND/OR You must have -polort >= 0 Otherwise, there is no regression model! An example using -polort only: 3dDeconvolve -x1D_stop -polort A -nodata 300 2 -x1D stdout: | 1dplot -one -stdin  **N.B.: The following 3 options are for the 'old' style of explicit deconvolution.  For most purposes, their usage is no longer recommended.  Instead, you should use the '-stim_times' options to directly input the stimulus times, rather than code the stimuli as a sequence of 0s and 1s in this 'old' method!  [-stim_minlag k m]   m = minimum time lag for kth input stimulus [default: m = 0] [-stim_maxlag k n]   n = maximum time lag for kth input stimulus [default: n = 0] [-stim_nptr k p]     p = number of stimulus function points per TR Note: This option requires 0 slice offset times [default: p = 1]  **N.B.: The '-stim_times' options below are the recommended way of analyzing FMRI time series data now.  The options directly above are only maintained for the sake of backwards compatibility!  For most FMRI users, the 'BLOCK' and 'TENT' (or 'CSPLIN') response models will serve their needs.  The other models are for users with specific needs who understand clearly what they are doing.  [-stim_times k tname Rmodel] Generate the k-th response model from a set of stimulus times given in file 'tname'. *** The format of file 'tname' is one line per imaging run (cf. '-concat' above), and each line contains the list of START times (in seconds) for the stimuli in class 'k' for its corresponding run of data; times are relative to the start of the run (i.e., sub-brick #0 occurring at time=0). *** The DURATION of the stimulus is encoded in the 'Rmodel' argument, described below. Units are in seconds, not TRs! -- If different stimuli in the same class 'k' have different durations, you'll have to use the dmBLOCK response model and '-stim_times_AM1' or '-stim_times_AM2', described below. *** Different lines in the 'tname' file can contain different numbers of start times.  Each line must contain at least 1 time. *** If there is no stimulus in class 'k' in a particular imaging run, there are two ways to indicate that: (a) put a single '*' on the line, or (b) put a very large number or a negative number (e.g., 99999, or -1) on the line -- times outside the range of the imaging run will cause a warning message, but the program will soldier on. *** In the case where the stimulus doesn't actually exist in the data model (e.g., every line in 'tname' is a '*'), you will also have to use the '-allzero_OK' option to force 3dDeconvolve to run with regressor matrix columns that are filled with zeros.  The response model is specified by the third argument after '-stim_times' ('Rmodel'), and can be one of the following: *** In the descriptions below, a '1 parameter' model has a fixed shape, and only the estimated amplitude ('Coef') varies: BLOCK GAM TWOGAM SPMG1 WAV MION *** Models with more than 1 parameter have multiple basis functions, and the estimated parameters ('Coef') are their amplitudes. The estimated shape of the response to a stimulus will be different in different voxels: TENT CSPLIN SPMG2 SPMG3 POLY SIN EXPR *** Many models require the input of the start and stop times for the response, 'b' and 'c'.  Normally, 'b' would be zero, but in some cases, 'b' could be negative -- for example, if you are concerned about anticipatory effects.  The stop time 'c' should be based on how long you realistically expect the hemodynamic response to last after the onset of the stimulus; e.g., the duration of the stimulus plus 14 seconds for BOLD. *** If you use '-tout', each parameter will get a separate t-statistic.  As mentioned far above, this is a marginal statistic, measuring the impact of that model component on the regression fit, relative to the fit with that one component (matrix column) removed. *** If you use '-fout', each stimulus will also get an F-statistic, which is the collective impact of all the model components it contains, relative to the regression fit with the entire stimulus removed. (If there is only 1 parameter, then F = t*t.) *** Some models below are described in terms of a simple response function that is then convolved with a square wave whose duration is a parameter you give (duration is NOT a parameter that will be estimated).  Read the descriptions below carefully: not all functions are (or can be) convolved in this way: * ALWAYS convolved:      BLOCK  dmBLOCK  MION  MIONN * OPTIONALLY convolved:  GAM    TWOGAM   SPMGx WAV * NEVER convolved:       TENT   CSPLIN   POLY  SIN   EXPR Convolution is specified by providing the duration parameter as described below for each particular model function.  'BLOCK(d,p)'  = 1 parameter block stimulus of duration 'd' ** There are 2 variants of BLOCK: BLOCK4 [the default] and BLOCK5 which have slightly different delays: HRF(t) = int( g(t-s) , s=0..min(t,d) ) where g(t) = t^q * exp(-t) /(q^q*exp(-q)) and q = 4 or 5.  The case q=5 is delayed by about 1 second from the case q=4. ==> ** Despite the name, you can use 'BLOCK' for event- related analyses just by setting the duration to a small value; e.g., 'BLOCK5(1,1)' ** The 'p' parameter is the amplitude of the basis function, and should usually be set to 1. If 'p' is omitted, the amplitude will depend on the duration 'd', which is useful only in special circumstances!! ** For bad historical reasons, the peak amplitude 'BLOCK' without the 'p' parameter does not go to 1 as the duration 'd' gets large.  Correcting this oversight would break some people's lives, so that's just the way it is. ** The 'UBLOCK' function (U for Unit) is the same as the 'BLOCK' function except that when the 'p' parameter is missing (or 0), the peak amplitude goes to 1 as the duration gets large. If p > 0, 'UBLOCK(d,p)' and 'BLOCK(d,p)' are identical.  'TENT(b,c,n)' = n parameter tent function expansion from times b..c after stimulus time [piecewise linear] [n must be at least 2; time step is (c-b)/(n-1)] 'CSPLIN(b,c,n)'= n parameter cubic spline function expansion from times b..c after stimulus time [n must be at least 4] ** CSPLIN is a drop-in upgrade of TENT to a differentiable set of functions. ** TENT and CSPLIN are 'cardinal' interpolation functions: their parameters are the values of the HRF model at the n 'knot' points b , b+dt , b+2*dt , ... [dt = (c-b)/(n-1)] In contrast, in a model such as POLY or SIN, the parameters output are not directly the hemodynamic response function values at any particular point. ==> ** You can also use 'TENTzero' and 'CSPLINzero', which means to eliminate the first and last basis functions from each set.  The effect of these omissions is to force the deconvolved HRF to be zero at t=b and t=c (to start and and end at zero response).  With these 'zero' response models, there are n-2 parameters (thus for 'TENTzero', n must be at least 3). ** These 'zero' functions will force the HRF to be continuous, since they will now be unable to suddenly rise up from 0 at t=b and/or drop down to 0 at t=c.  'GAM(p,q)'    = 1 parameter gamma variate (t/(p*q))^p * exp(p-t/q) Defaults: p=8.6 q=0.547 if only 'GAM' is used ** The peak of 'GAM(p,q)' is at time p*q after the stimulus.  The FWHM is about 2.35*sqrt(p)*q; this approximation is accurate for p > 0.3*q. ** To check this approximation, try the command 1deval -num 100 -del 0.02 -xzero 0.02   \\ -expr 'sqrt(gamp(x,1))/2.35/x' | \\ 1dplot -stdin -del 0.02 -xzero 0.02 -yaxis 1:1.4:4:10 If the two functions gamp(x,1) and 2.35*x were equal, the plot would be constant y=1. ==> ** If you add a third argument 'd', then the GAM function is convolved with a square wave of duration 'd' seconds; for example: 'GAM(8.6,.547,17)' for a 17 second stimulus.  [09 Aug 2010] 'GAMpw(K,W)'  = Same as 'GAM(p,q)' but where the shape parameters are specified at time to peak 'K' and full width at half max (FWHM) 'W'. You can also add a third argument as the duration. The (K,W) parameters are converted to (p,q) values for the actual computations; the (p,q) parameters are printed to the text (stderr) output. ** Note that if you give weird values for K and W, weird things will happen: (tcsh syntax) set pp = `ccalc 'gamp(2,8)'` set qq = `ccalc 'gamq(2,8)'` 1deval -p=$pp -q=$qq -num 200 -del 0.1  \\ -expr '(t/p/q)^p*exp(p-t/q)'   | \\ 1dplot -stdin -del 0.1 Here, K is significantly smaller than W, so a gamma variate that fits peak=2 width=8 must be weirdly shaped. [Also note use of the 'calc' functions gamp(K,W) and gamq(K,W) to calculate p and q from K and W in the script.]  'TWOGAM(p1,q1,r,p2,q2)' = 1 parameter (amplitude) model: = A combination of two 'GAM' functions: GAM(p1,q1) - r*GAM(p2,q2) This model is intended to let you use a HRF similar to BrainVoyager (e.g.). You can add a sixth argument as the duration. ** Note that a positive 'r' parameter means to subtract the second GAM function (undershoot). 'TWOGAMpw(K1,W1,r,K2,W2)' = Same as above, but where the peaks and widths of the 2 component gamma variates are given instead of the less intuitive p and q. For FMRI work, K2 > K1 is usual, as the second (subtracted) function is intended to model the 'undershoot' after the main positive part of the model. You can also add a sixth argument as the duration. ** Example (no duration given): 3dDeconvolve -num_stimts 1 -polort -1 -nodata 81 0.5         \\",
            "id": "ORTVEC",
            "name": "ORTVEC",
            "optional": true,
            "type": "String",
            "value-key": "[ORTVEC]"
        },
        {
            "command-line-flag": "-stim_times",
            "description": "-stim_times 1 '1D: 0' 'TWOGAMpw(3,6,0.2,10,12)' \\",
            "id": "STIM_TIMES",
            "name": "STIM_TIMES",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_TIMES]"
        },
        {
            "command-line-flag": "-x1D",
            "description": "| 1dplot -stdin -THICK -del 0.5  'SPMG1'       = 1 parameter SPM gamma variate basis function exp(-t)*(A1*t^P1-A2*t^P2) where A1 = 0.0083333333  P1 = 5  (main positive lobe) A2 = 1.274527e-13  P2 = 15 (undershoot part) This function is NOT normalized to have peak=1! 'SPMG2'       = 2 parameter SPM: gamma variate + d/dt derivative [For backward compatibility: 'SPMG' == 'SPMG2'] 'SPMG3'       = 3 parameter SPM basis function set ==> ** The SPMGx functions now can take an optional (duration) argument, specifying that the primal SPM basis functions should be convolved with a square wave 'duration' seconds long and then be normalized to have peak absolute value = 1; e.g., 'SPMG3(20)' for a 20 second duration with three basis function.  [28 Apr 2009] ** Note that 'SPMG1(0)' will produce the usual 'SPMG1' wavefunction shape, but normalized to have peak value = 1 (for example).  'POLY(b,c,n)' = n parameter Legendre polynomial expansion from times b..c after stimulus time [n can range from 1 (constant) to 20]  'SIN(b,c,n)'  = n parameter sine series expansion from times b..c after stimulus time [n must be at least 1]  'WAV(d)'      = 1 parameter block stimulus of duration 'd'. * This is the '-WAV' function from program waver! * If you wish to set the shape parameters of the WAV function, you can do that by adding extra arguments, in the order delay time , rise time , fall time , undershoot fraction, undershoot restore time * The default values are 'WAV(d,2,4,6,0.2,2)' * Omitted parameters get the default values. * 'WAV(d,,,,0)' (setting undershoot=0) is very similar to 'BLOCK5(d,1)', for d > 0. * Setting duration d to 0 (or just using 'WAV') gives the pure '-WAV' impulse response function from waver. * If d > 0, the WAV(0) function is convolved with a square wave of duration d to make the HRF, and the amplitude is scaled back down to 1.  'EXPR(b,c) exp1 ... expn' = n parameter; arbitrary expressions from times b..c after stimulus time * Expressions are separated by spaces, so each expression must be a contiguous block of non-whitespace characters * Expressions use the same format as 3dcalc * Symbols that can be used in an expression: t = time in sec since stimulus time x = time scaled to be x= 0..1 for t=bot..top z = time scaled to be z=-1..1 for t=bot..top * Spatially dependent regressors are not allowed! * Other symbols are set to 0 (silently). ==> ** There is no convolution of the 'EXPR' functions with a square wave implied.  The expressions you input are what you get, evaluated over times b..c after each stimulus time.  To be sure of what your response model is, you should plot the relevant columns from the matrix .xmat.1D output file.  'MION(d)'     = 1 parameter block stimulus of duration 'd', intended to model the response of MION. The zero-duration impulse response 'MION(0)' is h(t) = 16.4486 * ( -0.184/ 1.5 * exp(-t/ 1.5) +0.330/ 4.5 * exp(-t/ 4.5) +0.670/13.5 * exp(-t/13.5) ) which is adapted from the paper FP Leite, et al. NeuroImage 16:283-294 (2002) http://dx.doi.org/10.1006/nimg.2002.1110 ** Note that this is a positive function, but MION produces a negative response to activation, so the beta and t-statistic for MION are usually negative. ***** If you want a negative MION function (so you get a positive beta), use the name 'MIONN' instead. ** After convolution with a square wave 'd' seconds long, the resulting single-trial waveform is scaled to have magnitude 1.  For example, try this fun command to compare BLOCK and MION: 3dDeconvolve -nodata 300 1 -polort -1 -num_stimts 2   \\",
            "id": "X1D",
            "name": "X1D",
            "optional": true,
            "type": "String",
            "value-key": "[X1D]"
        },
        {
            "command-line-flag": "-local_times",
            "description": "-local_times -x1D stdout:                  \\",
            "id": "LOCAL_TIMES",
            "name": "LOCAL_TIMES",
            "optional": true,
            "type": "String",
            "value-key": "[LOCAL_TIMES]"
        },
        {
            "command-line-flag": "-stim_times_AM2",
            "description": "-stim_times_AM2 1 timesAM.1D 'BLOCK(2,1)' :5.2:x:2.0 The extra argument must start with the colon ':' character, and there should be as many different values (separated by ':') as there are parameters in the timing file (timesAM.1D above). ==> In the example above, ':5.2:x:2.0' means subtract 5.2 from each value of the first parameter in timesAM.1D subtract the MEAN from each value of the second parameter (since 'x' doesn't translate to a number) subtract 2.0 from each value of the third parameter ==> What is this option for, anyway?  The purpose is to facilitate GROUP analysis the results from a collection of subjects, where you want to treat each subject's analysis exactly the same way -- and thus, the subtraction value for a parameter (e.g., reaction time) should then be the mean over all the reaction times from all trials in all subjects.  ** NOTE [04 Dec 2008] **",
            "id": "STIM_TIMES_AM2",
            "name": "STIM_TIMES_AM2",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_TIMES_AM2]"
        },
        {
            "command-line-flag": "-stim_times_AM1",
            "description": "-stim_times_AM1 and -stim_times_AM2 now take files with more than 1 amplitude attached to each time; for example, 33.7*9,-2,3 indicates a stimulus at time 33.7 seconds with 3 amplitudes attached (9 and -2 and 3).  In this example, -stim_times_AM2 would generate 4 response models: 1 for the constant response case and 1 scaled by each of the amplitude sets. ** Please don't carried away and use too many parameters!! ** For more information on modulated regression, see https://afni.nimh.nih.gov/pub/dist/doc/misc/Decon/AMregression.pdf  ** NOTE [08 Dec 2008] **",
            "id": "STIM_TIMES_AM1",
            "name": "STIM_TIMES_AM1",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_TIMES_AM1]"
        },
        {
            "command-line-flag": "-num_glt",
            "description": "number of general linear tests (GLTs) (0 <= num)   [default: num = 0] **N.B.: You only need this option if you have more than 10 GLTs specified; the program has built-in space for 10 GLTs, and this option is used to expand that space. If you use this option, you should place it on the command line BEFORE any of the other GLT options. [-glt s gltname]     Perform s simultaneous linear tests, as specified by the matrix contained in file 'gltname' [-glt_label k glabel]  glabel = label for kth general linear test [-gltsym gltname]    Read the GLT with symbolic names from the file 'gltname'; see the document below for details: https://afni.nimh.nih.gov/pub/dist/doc/misc/Decon/DeconSummer2004.html  ******* Options to create 3D+time datasets *******  [-iresp k iprefix]   iprefix = prefix of 3D+time output dataset which will contain the kth estimated impulse response [-tshift]            Use cubic spline interpolation to time shift the estimated impulse response function, in order to correct for differences in slice acquisition times. Note that this effects only the 3D+time output dataset generated by the -iresp option. **N.B.: This option only applies to the 'old' style of deconvolution analysis.  Do not use this with",
            "id": "NUM_GLT",
            "name": "NUM_GLT",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_GLT]"
        },
        {
            "command-line-flag": "-jobs",
            "description": "-jobs J   Run the program with 'J' jobs (sub-processes). On a multi-CPU machine, this can speed the program up considerably.  On a single CPU machine, using this option would be silly. * J should be a number from 1 up to the number of CPUs sharing memory on the system. * J=1 is normal (single process) operation. * The maximum allowed value of J is 32. * Unlike other parallelized AFNI programs, this one does not use OpenMP; it directly uses fork() and shared memory to run multiple processes. * For more information on parallelizing, see https://afni.nimh.nih.gov/afni/doc/misc/afni_parallelize * Also use -mask or -automask to get more speed; cf. 3dAutomask.",
            "id": "JOBS",
            "name": "JOBS",
            "optional": true,
            "type": "String",
            "value-key": "[JOBS]"
        },
        {
            "command-line-flag": "-virtvec",
            "description": "-virtvec   To save memory, write the input dataset to a temporary file and then read data vectors from it only as needed.  This option is for Javier and will probably not be useful for anyone else. And it only takes effect if -jobs is greater than 1.  ** NOTE ** This version of the program has been compiled to use double precision arithmetic for most internal calculations.  ++ Compile date = Sep  7 2018 {:}",
            "id": "VIRTVEC",
            "name": "VIRTVEC",
            "optional": true,
            "type": "String",
            "value-key": "[VIRTVEC]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}