{
    "command-line": "3dVol2Surf [F_STEPS] [F_INDEX] [F_P1_FR] [F_PN_FR] [SPEC] [SURF_A] [SURF_B] [SV] [GRID_PARENT] [MAP_FUNC] [F_KEEP_SURF_ORDER] [F_P1_MM] [F_PN_MM] [USE_NORMS] [KEEP_NORM_DIR] [NORM_LEN] [REVERSE_NORM_DIR] [DEBUG] [FIRST_NODE] [DNODE] [OUT_1D] [OUT_NIML] [HELP] [HIST] [LAST_NODE] [NO_HEADERS] [OOB_INDEX] [OOB_VALUE] [OOM_VALUE] [OUTCOLS_AFNI_NSD] [OUTCOLS_1_RESULT] [OUTCOLS_RESULTS] [OUTCOLS_NSD_FORMAT] [SAVE_SEG_COORDS] [SKIP_COL_NODES] [SKIP_COL_1DINDEX] [SKIP_COL_I] [SKIP_COL_J] [SKIP_COL_K] [SKIP_COL_VALS] [V2S_HIST] [VERSION] [CMASK] [GP_INDEX] [\\]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-f_steps",
            "description": "-f_steps      10                                       \\",
            "id": "F_STEPS",
            "name": "F_STEPS",
            "optional": true,
            "type": "String",
            "value-key": "[F_STEPS]"
        },
        {
            "command-line-flag": "-f_index",
            "description": "-f_index      nodes                                    \\ -out_niml     fred_func_ave.niml.dset  4. Similar to example 3, but restrict the output columns to only node indices and values (i.e. skip 1dindex, i, j, k and vals).  3dVol2Surf                                                \\ -spec         fred.spec                                \\ -surf_A       smoothwm                                 \\ -surf_B       pial                                     \\ -sv           fred_anat+orig                           \\ -grid_parent  fred_func+orig                           \\ -cmask        '-a fred_func+orig[2] -expr step(a-0.6)' \\ -map_func     ave                                      \\",
            "id": "F_INDEX",
            "name": "F_INDEX",
            "optional": true,
            "type": "String",
            "value-key": "[F_INDEX]"
        },
        {
            "command-line-flag": "-f_p1_fr",
            "description": "-f_p1_fr      -0.1                                     \\",
            "id": "F_P1_FR",
            "name": "F_P1_FR",
            "optional": true,
            "type": "String",
            "value-key": "[F_P1_FR]"
        },
        {
            "command-line-flag": "-f_pn_fr",
            "description": "-f_pn_fr      0.2                                      \\ -out_niml     fred_func_ave2.niml.dset  6. Similar to example 3, instead of computing the average across each segment (one average per sub-brick), output the volume value at _every_ point across the segment. The output here would be 'f_steps' values per node pair, though the output could again be restricted to unique voxels along each segment with '-f_index voxels'. Note that only sub-brick 0 will be considered here.  3dVol2Surf                                                \\ -spec         fred.spec                                \\ -surf_A       smoothwm                                 \\ -surf_B       pial                                     \\ -sv           fred_anat+orig                           \\ -grid_parent  fred_func+orig                           \\ -cmask        '-a fred_func+orig[2] -expr step(a-0.6)' \\ -map_func     seg_vals                                 \\",
            "id": "F_PN_FR",
            "name": "F_PN_FR",
            "optional": true,
            "type": "String",
            "value-key": "[F_PN_FR]"
        },
        {
            "command-line-flag": "-spec",
            "description": "SUMA spec file  e.g. -spec fred.spec  The surface specification file contains the list of mappable surfaces that are used.  See @SUMA_Make_Spec_FS and @SUMA_Make_Spec_SF.",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-surf_A",
            "description": "name of surface A (from spec file)",
            "id": "SURF_A",
            "name": "SURF_A",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_A]"
        },
        {
            "command-line-flag": "-surf_B",
            "description": "name of surface B (from spec file)  e.g. -surf_A smoothwm e.g. -surf_A lh.smoothwm e.g. -surf_B lh.pial  This is used to specify which surface(s) will be used by the program.  The '-surf_A' parameter is required, as it specifies the first surface, whereas since '-surf_B' is used to specify an optional second surface, it is not required.  Note that any need for '-surf_B' may be fulfilled using the '-use_norms' option.  Note that any name provided must be in the spec file, uniquely matching the name of a surface node file (such as lh.smoothwm.asc, for example).  Note that if both hemispheres are represented in the spec file, then there may be both lh.pial.asc and rh.pial.asc, for instance. In such a case, 'pial' would not uniquely determine a a surface, but the name 'lh.pial' would.",
            "id": "SURF_B",
            "name": "SURF_B",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_B]"
        },
        {
            "command-line-flag": "-sv",
            "description": "AFNI volume dataset  e.g. -sv fred_anat+orig  This is the AFNI dataset that the surface is mapped to. This dataset is used for the initial surface node to xyz coordinate mapping, in the Dicom orientation.",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-grid_parent",
            "description": "AFNI volume dataset  e.g. -grid_parent fred_function+orig  This dataset is used as a grid and orientation master for the output (i.e. it defines the volume domain). It is also the source of the output data values.",
            "id": "GRID_PARENT",
            "name": "GRID_PARENT",
            "optional": true,
            "type": "String",
            "value-key": "[GRID_PARENT]"
        },
        {
            "command-line-flag": "-map_func",
            "description": "filter for values along the segment  e.g. -map_func ave e.g. -map_func ave -f_steps 10 e.g. -map_func ave -f_steps 10 -f_index nodes  The current mapping function for 1 surface is:  mask     : For each surface xyz location, output the dataset values of each sub-brick.  Most mapping functions are defined for 2 related input surfaces (such as white/grey boundary and pial).  For each node pair, the function will be performed on the values from the 'grid parent dataset', and along the segment connecting the nodes.  ave      : Output the average of the dataset values along the segment.  max      : Output the maximum dataset value along the connecting segment.  max_abs  : Output the dataset value with the maximum absolute value along the segment.  median   : Output the median of the dataset values along the connecting segment.  midpoint : Output the dataset value with xyz coordinates at the midpoint of the nodes.  min      : Output the minimum dataset value along the connecting segment.  mode     : Output the mode of the dataset values along the connecting segment.  nzave, nzmin, nzmax : Non-zero equivalents to ave, min, max Does not include the zero values in the computation  seg_vals : Output all of the dataset values along the connecting segment.  Here, only sub-brick number 0 will be considered.  ------------------------------  options specific to functions on 2 surfaces:",
            "id": "MAP_FUNC",
            "name": "MAP_FUNC",
            "optional": true,
            "type": "String",
            "value-key": "[MAP_FUNC]"
        },
        {
            "command-line-flag": "-f_keep_surf_order",
            "description": "-f_keep_surf_order :  Depreciated.  See required arguments -surf_A and -surf_B, above.  Note: The following -f_pX_XX options are used to alter the lengths and locations of the computational segments.  Recall that by default, segments are defined using the node pair coordinates as endpoints.  And the direction from p1 to pn is from the inner surface to the outer surface.",
            "id": "F_KEEP_SURF_ORDER",
            "name": "F_KEEP_SURF_ORDER",
            "optional": true,
            "type": "String",
            "value-key": "[F_KEEP_SURF_ORDER]"
        },
        {
            "command-line-flag": "-f_p1_mm",
            "description": "-f_p1_mm DISTANCE :  This option is used to specify a distance in millimeters to add to the first point of each line segment (in the direction of the second point).  DISTANCE can be negative (which would set p1 to be farther from pn than before).  For example, if a computation is over the grey matter (from the white matter surface to the pial), and it is wished to increase the range by 1mm, set this DISTANCE to -1.0 and the DISTANCE in -f_pn_mm to 1.0.  e.g.  -f_p1_mm -1.0 e.g.  -f_p1_mm -1.0 -f_pn_mm 1.0",
            "id": "F_P1_MM",
            "name": "F_P1_MM",
            "optional": true,
            "type": "String",
            "value-key": "[F_P1_MM]"
        },
        {
            "command-line-flag": "-f_pn_mm",
            "description": "-f_pn_mm DISTANCE :  Similar to -f_p1_mm, this option is used to specify a distance in millimeters to add to the second point of each line segment. Note that this is in the same direction as above, from point p1 to point pn.  So a positive DISTANCE, for this option, would set pn to be farther from p1 than before, and a negative DISTANCE would set it to be closer.  e.g.  -f_pn_mm 1.0 e.g.  -f_p1_mm -1.0 -f_pn_mm 1.0",
            "id": "F_PN_MM",
            "name": "F_PN_MM",
            "optional": true,
            "type": "String",
            "value-key": "[F_PN_MM]"
        },
        {
            "command-line-flag": "-use_norms",
            "description": "use normals for second surface  Segments are usually defined by connecting corresponding node pairs from two surfaces.  With this options the user can use one surface, along with its normals, to define the segments.  By default, each segment will be 1.0 millimeter long, in the direction of the normal.  The '-norm_len' option can be used to alter this default action.",
            "id": "USE_NORMS",
            "name": "USE_NORMS",
            "optional": true,
            "type": "String",
            "value-key": "[USE_NORMS]"
        },
        {
            "command-line-flag": "-keep_norm_dir",
            "description": "keep the direction of the normals  Normal directions are verified by checking that the normals of the outermost 6 points point away from the center of mass.  If they point inward instead, then they are negated.  This option will override the directional check, and use the normals as they come.  See also -reverse_norm_dir, below.",
            "id": "KEEP_NORM_DIR",
            "name": "KEEP_NORM_DIR",
            "optional": true,
            "type": "String",
            "value-key": "[KEEP_NORM_DIR]"
        },
        {
            "command-line-flag": "-norm_len",
            "description": "use LENGTH for node normals  e.g.     -norm_len  3.0 e.g.     -norm_len -3.0 default: -norm_len  1.0  For use with the '-use_norms' option, this allows the user to specify a directed distance to use for segments based on the normals.  So for each node on a surface, the computation segment will be from the node, in the direction of the normal, a signed distance of LENGTH.  A negative LENGTH means to use the opposite direction from the normal.  The '-surf_B' option is not allowed with the use of normals.",
            "id": "NORM_LEN",
            "name": "NORM_LEN",
            "optional": true,
            "type": "String",
            "value-key": "[NORM_LEN]"
        },
        {
            "command-line-flag": "-reverse_norm_dir",
            "description": "reverse the normal directions  Normal directions are verified by checking that the normals of the outermost 6 points point away from the center of mass.  If they point inward instead, then they are negated.  This option will override the directional check, and reverse the direction of the normals as they come.  See also -keep_norm_dir, above.  ------------------------------  output options:",
            "id": "REVERSE_NORM_DIR",
            "name": "REVERSE_NORM_DIR",
            "optional": true,
            "type": "String",
            "value-key": "[REVERSE_NORM_DIR]"
        },
        {
            "command-line-flag": "-debug",
            "description": "(optional) verbose output  e.g. -debug 2  This option is used to print out status information during the execution of the program.  Current levels are from 0 to 5.",
            "id": "DEBUG",
            "name": "DEBUG",
            "optional": true,
            "type": "String",
            "value-key": "[DEBUG]"
        },
        {
            "command-line-flag": "-first_node",
            "description": "skip all previous nodes  e.g. -first_node 1000 e.g. -first_node 1000 -last_node 1999  Restrict surface node output to those with indices as large as NODE_NUM.  In the first example, the first 1000 nodes are ignored (those with indices from 0 through 999).  See also, '-last_node'.",
            "id": "FIRST_NODE",
            "name": "FIRST_NODE",
            "optional": true,
            "type": "String",
            "value-key": "[FIRST_NODE]"
        },
        {
            "command-line-flag": "-dnode",
            "description": "(optional) node for debug  e.g. -dnode 1874  This option is used to print out status information for node NODE_NUM.",
            "id": "DNODE",
            "name": "DNODE",
            "optional": true,
            "type": "String",
            "value-key": "[DNODE]"
        },
        {
            "command-line-flag": "-out_1D",
            "description": "specify a 1D file for the output  e.g. -out_1D mask_values_over_dataset.1D  This is where the user will specify which file they want the output to be written to.  In this case, the output will be in readable, column-formatted ASCII text.  Note : the output file should not yet exist. : -out_1D or -out_niml must be used",
            "id": "OUT_1D",
            "name": "OUT_1D",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_1D]"
        },
        {
            "command-line-flag": "-out_niml",
            "description": "specify a niml file for the output  e.g. -out_niml mask_values_over_dataset.niml.dset  The user may use this option to get output in the form of a niml element, with binary data.  The output will contain (binary) columns of the form:  node_index  value_0  value_1  value_2  ...  A major difference between 1D output and niml output is that the value_0 column number will be 6 in the 1D case, but will be 2 in the niml case.  The index columns will not be used for niml output. It is possible to write niml datasets in both ASCII and BINARY formats. BINARY format is recommended for large datasets. The .afnirc environment variable: AFNI_NIML_TEXT_DATA controls whether output is ASCII (YES) or BINARY (NO).  Note : the output file should not yet exist. : -out_1D or -out_niml must be used",
            "id": "OUT_NIML",
            "name": "OUT_NIML",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_NIML]"
        },
        {
            "command-line-flag": "-help",
            "description": "show this help  If you can't get help here, please get help somewhere.",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-hist",
            "description": "show revision history  Display module history over time.  See also, -v2s_hist",
            "id": "HIST",
            "name": "HIST",
            "optional": true,
            "type": "String",
            "value-key": "[HIST]"
        },
        {
            "command-line-flag": "-last_node",
            "description": "skip all following nodes  e.g. -last_node 1999 e.g. -first_node 1000 -last_node 1999  Restrict surface node output to those with indices no larger than NODE_NUM.  In the first example, nodes above 1999 are ignored (those with indices from 2000 on up).  See also, '-first_node'.",
            "id": "LAST_NODE",
            "name": "LAST_NODE",
            "optional": true,
            "type": "String",
            "value-key": "[LAST_NODE]"
        },
        {
            "command-line-flag": "-no_headers",
            "description": "do not output column headers  Column header lines all begin with the '#' character. With the '-no_headers' option, these lines will not be output.",
            "id": "NO_HEADERS",
            "name": "NO_HEADERS",
            "optional": true,
            "type": "String",
            "value-key": "[NO_HEADERS]"
        },
        {
            "command-line-flag": "-oob_index",
            "description": "specify default index for oob nodes  e.g.     -oob_index -1 default: -oob_index  0  By default, nodes which lie outside the box defined by the -grid_parent dataset are considered out of bounds, and are skipped.  If an out of bounds index is provided, or an out of bounds value is provided, such nodes will not be skipped, and will have indices and values output, according to the -oob_index and -oob_value options.  This INDEX_NUM will be used for the 1dindex field, along with the i, j and k indices.",
            "id": "OOB_INDEX",
            "name": "OOB_INDEX",
            "optional": true,
            "type": "String",
            "value-key": "[OOB_INDEX]"
        },
        {
            "command-line-flag": "-oob_value",
            "description": "specify default value for oob nodes  e.g.     -oob_value -999.0 default: -oob_value    0.0  See -oob_index, above.  VALUE will be output for nodes which are out of bounds.",
            "id": "OOB_VALUE",
            "name": "OOB_VALUE",
            "optional": true,
            "type": "String",
            "value-key": "[OOB_VALUE]"
        },
        {
            "command-line-flag": "-oom_value",
            "description": "specify default value for oom nodes  e.g. -oom_value -999.0 e.g. -oom_value    0.0  By default, node pairs defining a segment which gets completely obscured by a command-line mask (see -cmask) are considered \"out of mask\", and are skipped.  If an out of mask value is provided, such nodes will not be skipped.  The output indices will come from the first segment point, mapped to the AFNI volume.  All output vN values will be the VALUE provided with this option.  This option is meaningless without a '-cmask' option.",
            "id": "OOM_VALUE",
            "name": "OOM_VALUE",
            "optional": true,
            "type": "String",
            "value-key": "[OOM_VALUE]"
        },
        {
            "command-line-flag": "-outcols_afni_NSD",
            "description": "output nodes and one result column",
            "id": "OUTCOLS_AFNI_NSD",
            "name": "OUTCOLS_AFNI_NSD",
            "optional": true,
            "type": "String",
            "value-key": "[OUTCOLS_AFNI_NSD]"
        },
        {
            "command-line-flag": "-outcols_1_result",
            "description": "output only one result column",
            "id": "OUTCOLS_1_RESULT",
            "name": "OUTCOLS_1_RESULT",
            "optional": true,
            "type": "String",
            "value-key": "[OUTCOLS_1_RESULT]"
        },
        {
            "command-line-flag": "-outcols_results",
            "description": "output only all result columns",
            "id": "OUTCOLS_RESULTS",
            "name": "OUTCOLS_RESULTS",
            "optional": true,
            "type": "String",
            "value-key": "[OUTCOLS_RESULTS]"
        },
        {
            "command-line-flag": "-outcols_NSD_format",
            "description": "output nodes and all results (NI_SURF_DSET foramt)  These options are used to restrict output.  They are similar to the -skip_col_* options, but are used to choose columns to output (they are for convenience, so the user need not apply many -skip_col options).  see also: -skip_col_*",
            "id": "OUTCOLS_NSD_FORMAT",
            "name": "OUTCOLS_NSD_FORMAT",
            "optional": true,
            "type": "String",
            "value-key": "[OUTCOLS_NSD_FORMAT]"
        },
        {
            "command-line-flag": "-save_seg_coords",
            "description": "save segment coordinates to FILE  e.g. -save_seg_coords seg.coords.1D  Each node that has output values computed along a valid segment (i.e. not out-of-bounds or out-of-mask) has its index written to this file, along with all applied segment coordinates.",
            "id": "SAVE_SEG_COORDS",
            "name": "SAVE_SEG_COORDS",
            "optional": true,
            "type": "String",
            "value-key": "[SAVE_SEG_COORDS]"
        },
        {
            "command-line-flag": "-skip_col_nodes",
            "description": "do not output node column",
            "id": "SKIP_COL_NODES",
            "name": "SKIP_COL_NODES",
            "optional": true,
            "type": "String",
            "value-key": "[SKIP_COL_NODES]"
        },
        {
            "command-line-flag": "-skip_col_1dindex",
            "description": "do not output 1dindex column",
            "id": "SKIP_COL_1DINDEX",
            "name": "SKIP_COL_1DINDEX",
            "optional": true,
            "type": "String",
            "value-key": "[SKIP_COL_1DINDEX]"
        },
        {
            "command-line-flag": "-skip_col_i",
            "description": "do not output i column",
            "id": "SKIP_COL_I",
            "name": "SKIP_COL_I",
            "optional": true,
            "type": "String",
            "value-key": "[SKIP_COL_I]"
        },
        {
            "command-line-flag": "-skip_col_j",
            "description": "do not output j column",
            "id": "SKIP_COL_J",
            "name": "SKIP_COL_J",
            "optional": true,
            "type": "String",
            "value-key": "[SKIP_COL_J]"
        },
        {
            "command-line-flag": "-skip_col_k",
            "description": "do not output k column",
            "id": "SKIP_COL_K",
            "name": "SKIP_COL_K",
            "optional": true,
            "type": "String",
            "value-key": "[SKIP_COL_K]"
        },
        {
            "command-line-flag": "-skip_col_vals",
            "description": "do not output vals column  These options are used to restrict output.  Each option will prevent the program from writing that column of output to the 1D file.  For now, the only effect that these options can have on the niml output is by skipping nodes or results (all other columns are skipped by default).  see also: -outcols_*",
            "id": "SKIP_COL_VALS",
            "name": "SKIP_COL_VALS",
            "optional": true,
            "type": "String",
            "value-key": "[SKIP_COL_VALS]"
        },
        {
            "command-line-flag": "-v2s_hist",
            "description": "show revision history for library  Display vol2surf library history over time.  See also, -hist",
            "id": "V2S_HIST",
            "name": "V2S_HIST",
            "optional": true,
            "type": "String",
            "value-key": "[V2S_HIST]"
        },
        {
            "command-line-flag": "-version",
            "description": "show version information  Show version and compile date.  ------------------------------  general options:",
            "id": "VERSION",
            "name": "VERSION",
            "optional": true,
            "type": "String",
            "value-key": "[VERSION]"
        },
        {
            "command-line-flag": "-cmask",
            "description": "(optional) command for dataset mask  e.g. -cmask '-a fred_func+orig[2] -expr step(a-0.8)'  This option will produce a mask to be applied to the input AFNI dataset.  Note that this mask should form a single sub-brick.  This option follows the style of 3dmaskdump (since the code for it was, uh, borrowed from there (thanks Bob!)).  See '3dmaskdump -help' for more information.",
            "id": "CMASK",
            "name": "CMASK",
            "optional": true,
            "type": "String",
            "value-key": "[CMASK]"
        },
        {
            "command-line-flag": "-gp_index",
            "description": "choose grid_parent sub-brick  e.g. -gp_index 3  This option allows the user to choose only a single sub-brick from the grid_parent dataset for computation. Note that this option is virtually useless when using the command-line, as the user can more directly do this via brick selectors, e.g. func+orig'[3]'.  This option was written for the afni interface.  --------------------------------------------------  Output from the program defaults to 1D format, in ascii text. For each node (pair) that results in output, there will be one line, consisting of:  node    : the index of the current node (or node pair)  1dindex : the global index of the AFNI voxel used for output  Note that for some filters (min, max, midpoint, median and mode) there is a specific location (and therefore voxel) that the result comes from.  It will be accurate (though median may come from one of two voxels that are averaged).  For filters without a well-defined source (such as average or seg_vals), the 1dindex will come from the first point on the corresponding segment.  Note: this will _not_ be output in the niml case.  i j k   : the i j k indices matching 1dindex  These indices are based on the orientation of the grid parent dataset.  Note: these will _not_ be output in the niml case.  vals    : the number of segment values applied to the filter  Note that when -f_index is 'nodes', this will always be the same as -f_steps, except when using the -cmask option.  In that case, along a single segment, some points may be in the mask, and some may not.  When -f_index is 'voxels' and -f_steps is used, vals will often be much smaller than -f_steps. This is because many segment points may in a single voxel.  Note: this will _not_ be output in the niml case.  v0, ... : the requested output values  These are the filtered values, usually one per AFNI sub-brick.  For example, if the -map_func is 'ave', then there will be one segment-based average output per sub-brick of the grid parent.  In the case of the 'seg_vals' filter, however, there will be one output value per segment point (possibly further restricted to voxels).  Since output is not designed for a matrix of values, 'seg_vals' is restricted to a single sub-brick.   Author: R. Reynolds  - version  6.10 (Aug 30, 2010)  (many thanks to Z. Saad and R.W. Cox)",
            "id": "GP_INDEX",
            "name": "GP_INDEX",
            "optional": true,
            "type": "String",
            "value-key": "[GP_INDEX]"
        },
        {
            "description": "NA",
            "id": "\\",
            "name": "\\",
            "optional": false,
            "type": "String",
            "value-key": "[\\]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}