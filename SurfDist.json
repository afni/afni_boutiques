{
    "command-line": "SurfDist [NODE_PATH_DO] [EUCLIDIAN] [GRAPH] [I_TYPE] [ONESTATE] [ANATOMICAL] [I] [TN] [TSN] [SV] [SPEC] [SURF_A] [INPUT] [N_MASK] [B_MASK] [C_MASK] [H] [HELP] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS] [<SURFACE>] [<NODEPAIRS>]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-node_path_do",
            "description": "Output the shortest path between each node pair as a SUMA Displayable object.",
            "id": "NODE_PATH_DO",
            "name": "NODE_PATH_DO",
            "optional": true,
            "type": "String",
            "value-key": "[NODE_PATH_DO]"
        },
        {
            "command-line-flag": "-Euclidian",
            "description": "Calculate Euclidian distance, rather than graph distance.",
            "id": "EUCLIDIAN",
            "name": "EUCLIDIAN",
            "optional": true,
            "type": "String",
            "value-key": "[EUCLIDIAN]"
        },
        {
            "command-line-flag": "-Graph",
            "description": "Calculate distance along the mesh (default).  example 1: echo make a toy surface CreateIcosahedron echo Create some nodepairs echo 2 344 > nodelist.1D echo 416 489 >> nodelist.1D echo 415 412 >> nodelist.1D echo 123 32414 >> nodelist.1D echo Get distances and write out results in a 1D file SurfDist -i CreateIco_surf.asc \\ -input nodelist.1D \\ -node_path_do node_path   > example.1D echo 'The internode distances are in this file:' cat example.1D echo 'And you can visualize the paths this way:' suma -niml & DriveSuma -com show_surf -label ico \\ -i_fs CreateIco_surf.asc \\ -com viewer_cont -load_do node_path.1D.do  example 2: (for tcsh) echo Say one has a filled ROI called: Area.niml.roi on echo a surface called lh.smoothwm.asc. set apref = Area set surf = lh.smoothwm.asc echo Create a dataset from this ROI with: ROI2dataset -prefix ${apref} -input ${apref}.niml.roi echo Get the nodes column forming the area ConvertDset -i ${apref}.niml.dset'[i]' -o_1D_stdout \\ > ${apref}Nodes.1D echo Calculate distance from node 85329 to each of ${apref}Nodes.1D SurfDist  -from_node 85329 -input ${apref}Nodes.1D \\ -i ${surf}   > ${apref}Dists.1D echo Combine node indices and distances from node  85329 1dcat ${apref}Nodes.1D ${apref}Dists.1D'[2]' \\ > welt.1D.dset echo Now load welt.1D.dset and overlay on surface echo Distances are in the second column echo 'And you can visualize the distances this way:' suma -niml & sleep 4 DriveSuma -com show_surf -label oke \\ -i_fs ${surf} \\ -com  pause hit enter when surface is ready \\ -com surf_cont -load_dset welt.1D.dset \\ -I_sb 1 -T_sb 1 -T_val 0.0  example 3: echo make a toy surface CreateIcosahedron echo Create some nodepairs echo 2 344 > nodelist.1D echo 416 489 >> nodelist.1D echo 415 412 >> nodelist.1D echo 123 32414 >> nodelist.1D echo Get Euclidian distances and write out results to file SurfDist -i CreateIco_surf.asc \\ -input nodelist.1D \\ -Euclidian   > example3.1D Specifying input surfaces using -i or -i_TYPE options:",
            "id": "GRAPH",
            "name": "GRAPH",
            "optional": true,
            "type": "String",
            "value-key": "[GRAPH]"
        },
        {
            "command-line-flag": "-i_TYPE",
            "description": "-i_TYPE inSurf specifies the input surface, TYPE is one of the following: fs: FreeSurfer surface. If surface name has .asc it is assumed to be in ASCII format. Otherwise it is assumed to be in BINARY_BE (Big Endian) format. Patches in Binary format cannot be read at the moment. sf: SureFit surface. You must specify the .coord followed by the .topo file. vec (or 1D): Simple ascii matrix format. You must specify the coord (NodeList) file followed by the topo (FaceSetList) file. coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. Only vertex and triangulation info is preserved. stl: STL format, ascii or binary. This format of no use for much of the surface-based analyses. Objects are defined as a soup of triangles with no information about which edges they share. STL is only useful for taking surface models to some 3D printing software. mni: MNI .obj format, ascii only. Only vertex, triangulation, and node normals info is preserved. byu: BYU format, ascii. Polygons with more than 3 edges are turned into triangles. bv: BrainVoyager format. Only vertex and triangulation info is preserved. dx: OpenDX ascii mesh format. Only vertex and triangulation info is preserved. Requires presence of 3 objects, the one of class 'field' should contain 2 components 'positions' and 'connections' that point to the two objects containing node coordinates and topology, respectively. gii: GIFTI XML surface format. obj: OBJ file format for triangular meshes only. The following primitives are preserved: v (vertices), (faces, triangles only), and p (points) Note that if the surface filename has the proper extension, it is enough to use the -i option and let the programs guess the type from the extension.  You can also specify multiple surfaces after -i option. This makes it possible to use wildcards on the command line for reading in a bunch of surfaces at once.",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-onestate",
            "description": "Make all -i_* surfaces have the same state, i.e. they all appear at the same time in the viewer. By default, each -i_* surface has its own state. For -onestate to take effect, it must precede all -i options with on the command line.",
            "id": "ONESTATE",
            "name": "ONESTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ONESTATE]"
        },
        {
            "command-line-flag": "-anatomical",
            "description": "Label all -i surfaces as anatomically correct. Again, this option should precede the -i_* options.  More variants for option -i: ----------------------------- You can also load standard-mesh spheres that are formed in memory with the following notation",
            "id": "ANATOMICAL",
            "name": "ANATOMICAL",
            "optional": true,
            "type": "String",
            "value-key": "[ANATOMICAL]"
        },
        {
            "command-line-flag": "-i",
            "description": "Where NUM is the parameter controlling the mesh density exactly as the parameter -ld linDepth does in CreateIcosahedron. For example: suma -i ld60 create on the fly a surface that is identical to the one produced by: CreateIcosahedron -ld 60 -tosphere",
            "id": "I",
            "name": "I",
            "optional": true,
            "type": "String",
            "value-key": "[I]"
        },
        {
            "command-line-flag": "-tn",
            "description": "specify surface type and name. See below for help on the parameters.",
            "id": "TN",
            "name": "TN",
            "optional": true,
            "type": "String",
            "value-key": "[TN]"
        },
        {
            "command-line-flag": "-tsn",
            "description": "specify surface type state and name. TYPE: Choose from the following (case sensitive): 1D: 1D format FS: FreeSurfer ascii format PLY: ply format MNI: MNI obj ascii format BYU: byu format SF: Caret/SureFit format BV: BrainVoyager format GII: GIFTI format NAME: Name of surface file. For SF and 1D formats, NAME is composed of two names the coord file followed by the topo file STATE: State of the surface. Default is S1, S2.... for each surface. Specifying a Surface Volume:",
            "id": "TSN",
            "name": "TSN",
            "optional": true,
            "type": "String",
            "value-key": "[TSN]"
        },
        {
            "command-line-flag": "-sv",
            "description": "-sv SurfaceVolume [VolParam for sf surfaces] If you supply a surface volume, the coordinates of the input surface. are modified to SUMA's convention and aligned with SurfaceVolume. You must also specify a VolParam file for SureFit surfaces. Specifying a surface specification (spec) file:",
            "id": "SV",
            "name": "SV",
            "optional": true,
            "type": "String",
            "value-key": "[SV]"
        },
        {
            "command-line-flag": "-spec",
            "description": "specify the name of the SPEC file. As with option -i, you can load template spec files with symbolic notation trickery as in: suma -spec MNI_N27 which will load the all the surfaces from template MNI_N27 at the original FreeSurfer mesh density. The string following -spec is formatted in the following manner: HEMI:TEMPLATE:DENSITY where: HEMI specifies a hemisphere. Choose from 'l', 'r', 'lh', 'rh', 'lr', or 'both' which is the default if you do not specify a hemisphere. TEMPLATE: Specify the template name. For now, choose from MNI_N27 if you want surfaces from the MNI_N27 volume, or TT_N27 for the Talairach version. Those templates must be installed under this directory: /root/.afni/data/ If you have no surface templates there, download one of: https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_TT_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI152_2009.tgz and untar them under directory /root/.afni/data/ DENSITY: Use if you want to load standard-mesh versions of the template surfaces. Note that only ld20, ld60, ld120, and ld141 are in the current distributed templates. You can create other densities if you wish with MapIcosahedron, but follow the same naming convention to enable SUMA to find them. This parameter is optional. The order in which you specify HEMI, TEMPLATE, and DENSITY, does not matter. For template surfaces, the -sv option is provided automatically, so you can have SUMA talking to AFNI with something like: suma -spec MNI_N27:ld60 & afni -niml /root/.afni/data/suma_MNI_N27  Specifying a surface using -surf_? method:",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-surf_A",
            "description": "specify the name of the first surface to load. If the program requires or allows multiple surfaces, use -surf_B ... -surf_Z . You need not use _A if only one surface is expected. SURFACE is the name of the surface as specified in the SPEC file. The use of -surf_ option requires the use of -spec option.  SUMA dataset input options:",
            "id": "SURF_A",
            "name": "SURF_A",
            "optional": true,
            "type": "String",
            "value-key": "[SURF_A]"
        },
        {
            "command-line-flag": "-input",
            "description": "Read DSET1 as input. In programs accepting multiple input datasets you can use -input DSET1 -input DSET2 or input DSET1 DSET2 ... NOTE: Selecting subsets of a dataset: Much like in AFNI, you can select subsets of a dataset by adding qualifiers to DSET. Append #SEL# to select certain nodes. Append [SEL] to select certain columns. Append {SEL} to select certain rows. The format of SEL is the same as in AFNI, see section: 'INPUT DATASET NAMES' in 3dcalc -help for details. Append [i] to get the node index column from a niml formatted dataset. *  SUMA does not preserve the selection order for any of the selectors. For example: dset[44,10..20] is the same as dset[10..20,44] Also, duplicate values are not supported. so dset[13, 13] is the same as dset[13]. I am not proud of these limitations, someday I'll get around to fixing them.    SUMA mask options:",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-n_mask",
            "description": "Apply operations to nodes listed in INDEXMASK  only. INDEXMASK is a 1D file.",
            "id": "N_MASK",
            "name": "N_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[N_MASK]"
        },
        {
            "command-line-flag": "-b_mask",
            "description": "Similar to -n_mask, except that the BINARYMASK 1D file contains 1 for nodes to filter and 0 for nodes to be ignored. The number of rows in filter_binary_mask must be equal to the number of nodes forming the surface.",
            "id": "B_MASK",
            "name": "B_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[B_MASK]"
        },
        {
            "command-line-flag": "-c_mask",
            "description": "Masking based on the result of EXPR. Use like afni's -cmask options. See explanation in 3dmaskdump -help and examples in output of 3dVol2Surf -help NOTE: Unless stated otherwise, if n_mask, b_mask and c_mask are used simultaneously, the resultant mask is the intersection (AND operation) of all masks.   [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "C_MASK",
            "name": "C_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[C_MASK]"
        },
        {
            "command-line-flag": "-h",
            "description": "Mini help, at time, same as -help in many cases.",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-help",
            "description": "The entire help output",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.    Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        },
        {
            "description": "NA",
            "id": "<SURFACE>",
            "name": "<SURFACE>",
            "optional": false,
            "type": "String",
            "value-key": "[<SURFACE>]"
        },
        {
            "description": "NA",
            "id": "<NODEPAIRS>",
            "name": "<NODEPAIRS>",
            "optional": false,
            "type": "String",
            "value-key": "[<NODEPAIRS>]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}