{
    "command-line": "3drefit [QUIET] [ORIENT] [XORIGIN] [YORIGIN] [ZORIGIN] [DUPORIGIN] [DXORIGIN] [DYORIGIN] [DZORIGIN] [XDEL] [YDEL] [ZDEL] [KEEPCEN] [XYZSCALE] [TR] [NOTOFF] [TORG] [TSLICES] [NEWID] [NOWARP] [APAR] [WPAR] [CLEAR_BSTAT] [REDO_BSTAT] [STATPAR] [MARKERS] [SHIFT_TAGS] [DXTAG] [DYTAG] [DZTAG] [VIEW] [SPACE] [CMAP] [LABEL2] [LABELTABLE] [DENOTE] [DEOBLIQUE] [OBLIQUE_ORIGIN] [BYTEORDER] [CHECKAXES] [APPKEY] [REPKEY] [EMPKEY] [ATRCOPY] [SAVEATR] [ATRSTRING] [ATRFLOAT] [ATRINT] [NOSAVEATR] [COPYAUX] [COPYTABLES] [RELABEL_ALL] [RELABEL_ALL_STR] [SUBLABEL_PREFIX] [SUBLABEL_SUFFIX] [SUBLABEL] [SUBAPPKEY] [SUBREPKEY] [SUBEMPKEY] [SUBSTATPAR] [VR_MAT] [VR_CENTER_OLD] [VR_CENTER_BASE] [ADDFDR] [FDRMASK] [STATMASK] [UNFDR] [DATASET] [...]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-quiet",
            "description": "-quiet          Turn off the verbose progress messages",
            "id": "QUIET",
            "name": "QUIET",
            "optional": true,
            "type": "String",
            "value-key": "[QUIET]"
        },
        {
            "command-line-flag": "-orient",
            "description": "-orient code    Sets the orientation of the 3D volume(s) in the .BRIK. The code must be 3 letters, one each from the pairs {R,L} {A,P} {I,S}.  The first letter gives the orientation of the x-axis, the second the orientation of the y-axis, the third the z-axis: R = right-to-left         L = left-to-right A = anterior-to-posterior P = posterior-to-anterior I = inferior-to-superior  S = superior-to-inferior ** WARNING: when changing the orientation, you must be sure to check the origins as well, to make sure that the volume is positioned correctly in space.",
            "id": "ORIENT",
            "name": "ORIENT",
            "optional": true,
            "type": "String",
            "value-key": "[ORIENT]"
        },
        {
            "command-line-flag": "-xorigin",
            "description": "-xorigin distx  Puts the center of the edge voxel off at the given",
            "id": "XORIGIN",
            "name": "XORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[XORIGIN]"
        },
        {
            "command-line-flag": "-yorigin",
            "description": "-yorigin disty  distance, for the given axis (x,y,z); distances in mm.",
            "id": "YORIGIN",
            "name": "YORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[YORIGIN]"
        },
        {
            "command-line-flag": "-zorigin",
            "description": "-zorigin distz  (x=first axis, y=second axis, z=third axis). Usually, only -zorigin makes sense.  Note that this distance is in the direction given by the corresponding letter in the -orient code.  For example, '-orient RAI' would mean that '-zorigin 30' sets the center of the first slice at 30 mm Inferior.  See the to3d manual for more explanations of axes origins. ** SPECIAL CASE: you can use the string 'cen' in place of a distance to force that axis to be re-centered.",
            "id": "ZORIGIN",
            "name": "ZORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[ZORIGIN]"
        },
        {
            "command-line-flag": "-duporigin",
            "description": "-duporigin cset Copies the xorigin, yorigin, and zorigin values from the header of dataset 'cset'.",
            "id": "DUPORIGIN",
            "name": "DUPORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[DUPORIGIN]"
        },
        {
            "command-line-flag": "-dxorigin",
            "description": "-dxorigin dx    Adds distance 'dx' (or 'dy', or 'dz') to the center",
            "id": "DXORIGIN",
            "name": "DXORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[DXORIGIN]"
        },
        {
            "command-line-flag": "-dyorigin",
            "description": "-dyorigin dy    coordinate of the edge voxel.  Can be used with the",
            "id": "DYORIGIN",
            "name": "DYORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[DYORIGIN]"
        },
        {
            "command-line-flag": "-dzorigin",
            "description": "-dzorigin dz    values input to the 'Nudge xyz' plugin. ** WARNING: you can't use these options at the same time you use -orient. ** WARNING: consider -shift_tags if dataset has tags",
            "id": "DZORIGIN",
            "name": "DZORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[DZORIGIN]"
        },
        {
            "command-line-flag": "-xdel",
            "description": "-xdel dimx      Makes the size of the voxel the given dimension,",
            "id": "XDEL",
            "name": "XDEL",
            "optional": true,
            "type": "String",
            "value-key": "[XDEL]"
        },
        {
            "command-line-flag": "-ydel",
            "description": "-ydel dimy      for the given axis (x,y,z); dimensions in mm.",
            "id": "YDEL",
            "name": "YDEL",
            "optional": true,
            "type": "String",
            "value-key": "[YDEL]"
        },
        {
            "command-line-flag": "-zdel",
            "description": "-zdel dimz   ** WARNING: if you change a voxel dimension, you will probably have to change the origin as well.",
            "id": "ZDEL",
            "name": "ZDEL",
            "optional": true,
            "type": "String",
            "value-key": "[ZDEL]"
        },
        {
            "command-line-flag": "-keepcen",
            "description": "-keepcen        When changing a voxel dimension with -xdel (etc.), also change the corresponding origin to keep the center of the dataset at the same coordinate location.",
            "id": "KEEPCEN",
            "name": "KEEPCEN",
            "optional": true,
            "type": "String",
            "value-key": "[KEEPCEN]"
        },
        {
            "command-line-flag": "-xyzscale",
            "description": "-xyzscale fac   Scale the size of the dataset voxels by the factor 'fac'. This is equivalent to using -xdel, -ydel, -zdel together.",
            "id": "XYZSCALE",
            "name": "XYZSCALE",
            "optional": true,
            "type": "String",
            "value-key": "[XYZSCALE]"
        },
        {
            "command-line-flag": "-TR",
            "description": "-TR time        Changes the TR time to a new value (see 'to3d -help'). ** You can also put the name of a dataset in for 'time', in which case the TR for that dataset will be used. ** N.B.: If the dataset has slice time offsets, these will be scaled by the factor newTR/oldTR. This scaling does not apply if you use '-Tslices' in the same 3drefit run.",
            "id": "TR",
            "name": "TR",
            "optional": true,
            "type": "String",
            "value-key": "[TR]"
        },
        {
            "command-line-flag": "-notoff",
            "description": "-notoff         Removes the slice-dependent time-offsets.",
            "id": "NOTOFF",
            "name": "NOTOFF",
            "optional": true,
            "type": "String",
            "value-key": "[NOTOFF]"
        },
        {
            "command-line-flag": "-Torg",
            "description": "-Torg ttt       Set the time origin of the dataset to value 'ttt'. (Time origins are set to 0 in to3d.) ** WARNING: These 3 options apply only to 3D+time datasets. **N.B.: Using '-TR' on a dataset without a time axis will add a time axis to the dataset.",
            "id": "TORG",
            "name": "TORG",
            "optional": true,
            "type": "String",
            "value-key": "[TORG]"
        },
        {
            "command-line-flag": "-Tslices",
            "description": "-Tslices a b c d ... Reset the slice time offsets to be 'a', 'b', 'c', ... (in seconds). The number of values following '-Tslices' should be the same as the number of slices in the dataset, but 3drefit does NOT check that this is true. ** If any offset time is < 0 or >= TR, a warning will be printed (to stderr), but this is not illegal even though it is a bad idea. ** If the dataset does not have a TR set, then '-Tslices' will fail. You can use '-TR' to set the inter-volume time spacing in the same 3drefit command. ** If you have the slices times stored (e.g., from DICOM) in some other units, you can scale them to be in seconds by putting a scale factor after the '-Tslices' option as follows:",
            "id": "TSLICES",
            "name": "TSLICES",
            "optional": true,
            "type": "String",
            "value-key": "[TSLICES]"
        },
        {
            "command-line-flag": "-newid",
            "description": "-newid          Changes the ID code of this dataset as well.",
            "id": "NEWID",
            "name": "NEWID",
            "optional": true,
            "type": "String",
            "value-key": "[NEWID]"
        },
        {
            "command-line-flag": "-nowarp",
            "description": "-nowarp         Removes all warping information from dataset.",
            "id": "NOWARP",
            "name": "NOWARP",
            "optional": true,
            "type": "String",
            "value-key": "[NOWARP]"
        },
        {
            "command-line-flag": "-apar",
            "description": "-apar aset      Set the dataset's anatomy parent dataset to 'aset' ** N.B.: The anatomy parent is the dataset from which the transformation from +orig to +acpc and +tlrc coordinates is taken.  It is appropriate to use -apar when there is more than 1 anatomical dataset in a directory that has been transformed.  In this way, you can be sure that AFNI will choose the correct transformation.  You would use this option on all the +orig dataset that are aligned with 'aset' (i.e., that were acquired in the same scanning session). ** N.B.: Special cases of 'aset' aset = NULL --> remove the anat parent info from the dataset aset = SELF --> set the anat parent to be the dataset itself",
            "id": "APAR",
            "name": "APAR",
            "optional": true,
            "type": "String",
            "value-key": "[APAR]"
        },
        {
            "command-line-flag": "-wpar",
            "description": "-wpar wset      Set the warp parent (the +orig version of a +tlrc dset). This option is used by @auto_tlrc. Do not use it unless you know what you're doing.",
            "id": "WPAR",
            "name": "WPAR",
            "optional": true,
            "type": "String",
            "value-key": "[WPAR]"
        },
        {
            "command-line-flag": "-clear_bstat",
            "description": "-clear_bstat    Clears the statistics (min and max) stored for each sub-brick in the dataset.  This is useful if you have done something to modify the contents of the .BRIK file associated with this dataset.",
            "id": "CLEAR_BSTAT",
            "name": "CLEAR_BSTAT",
            "optional": true,
            "type": "String",
            "value-key": "[CLEAR_BSTAT]"
        },
        {
            "command-line-flag": "-redo_bstat",
            "description": "-redo_bstat     Re-computes the statistics for each sub-brick.  Requires reading the .BRIK file, of course.  Also does -clear_bstat before recomputing statistics, so that if the .BRIK read fails for some reason, then you'll be left without stats.",
            "id": "REDO_BSTAT",
            "name": "REDO_BSTAT",
            "optional": true,
            "type": "String",
            "value-key": "[REDO_BSTAT]"
        },
        {
            "command-line-flag": "-statpar",
            "description": "-statpar v ...  Changes the statistical parameters stored in this dataset.  See 'to3d -help' for more details.",
            "id": "STATPAR",
            "name": "STATPAR",
            "optional": true,
            "type": "String",
            "value-key": "[STATPAR]"
        },
        {
            "command-line-flag": "-markers",
            "description": "-markers        Adds an empty set of AC-PC markers to the dataset, if it can handle them (is anatomical, is in the +orig view, and isn't 3D+time). ** WARNING: this will erase any markers that already exist!",
            "id": "MARKERS",
            "name": "MARKERS",
            "optional": true,
            "type": "String",
            "value-key": "[MARKERS]"
        },
        {
            "command-line-flag": "-shift_tags",
            "description": "-shift_tags     Apply -dxorigin (and y and z) changes to tags.",
            "id": "SHIFT_TAGS",
            "name": "SHIFT_TAGS",
            "optional": true,
            "type": "String",
            "value-key": "[SHIFT_TAGS]"
        },
        {
            "command-line-flag": "-dxtag",
            "description": "-dxtag dx       Add dx to the coordinates of all tags.",
            "id": "DXTAG",
            "name": "DXTAG",
            "optional": true,
            "type": "String",
            "value-key": "[DXTAG]"
        },
        {
            "command-line-flag": "-dytag",
            "description": "-dytag dy       Add dy to the coordinates of all tags.",
            "id": "DYTAG",
            "name": "DYTAG",
            "optional": true,
            "type": "String",
            "value-key": "[DYTAG]"
        },
        {
            "command-line-flag": "-dztag",
            "description": "-dztag dz       Add dz to the coordinates of all tags.",
            "id": "DZTAG",
            "name": "DZTAG",
            "optional": true,
            "type": "String",
            "value-key": "[DZTAG]"
        },
        {
            "command-line-flag": "-view",
            "description": "-view code      Changes the 'view' to be 'code', where the string 'code' is one of 'orig', 'acpc', or 'tlrc'. ** WARNING: The program will also change the .HEAD and .BRIK filenames to match.  If the dataset filenames already exist in the '+code' view, then this option will fail. You will have to rename the dataset files before trying to use '-view'.  If you COPY the files and then use '-view', don't forget to use '-newid' as well! ** WARNING2: Changing the view without specifying the new might lead to conflicting information. Consider specifying the space along with -view",
            "id": "VIEW",
            "name": "VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[VIEW]"
        },
        {
            "command-line-flag": "-space",
            "description": "-space spcname  Associates the dataset with a specific template type, e.g. TLRC, MNI, ORIG. The default assumed for +tlrc datasets is 'TLRC'. One use for this attribute is to use MNI space coordinates and atlases instead of the default TLRC space. ** See WARNING2 for -view option.",
            "id": "SPACE",
            "name": "SPACE",
            "optional": true,
            "type": "String",
            "value-key": "[SPACE]"
        },
        {
            "command-line-flag": "-cmap",
            "description": "-cmap cmaptype  Associate colormap type with dataset. Available choices are CONT_CMAP (the default), INT_CMAP (integer colormap display) and SPARSE_CMAP (for sparse integer colormaps). INT_CMAP is appropriate for showing ROI mask datasets or Atlas datasets where the continuous color scales are not useful.",
            "id": "CMAP",
            "name": "CMAP",
            "optional": true,
            "type": "String",
            "value-key": "[CMAP]"
        },
        {
            "command-line-flag": "-label2",
            "description": "-label2 llll    Set the 'label2' field in a dataset .HEAD file to the string 'llll'.  (Can be used as in AFNI window titlebars.)",
            "id": "LABEL2",
            "name": "LABEL2",
            "optional": true,
            "type": "String",
            "value-key": "[LABEL2]"
        },
        {
            "command-line-flag": "-labeltable",
            "description": "-labeltable TTT Inset the label table TTT in the .HEAD file. The label table format is described in README.environment under the heading: 'Variable: AFNI_VALUE_LABEL_DTABLE' See also -copytables",
            "id": "LABELTABLE",
            "name": "LABELTABLE",
            "optional": true,
            "type": "String",
            "value-key": "[LABELTABLE]"
        },
        {
            "command-line-flag": "-denote",
            "description": "-denote         Means to remove all possibly-identifying notes from the header.  This includes the History Note, other text Notes, keywords, and labels.",
            "id": "DENOTE",
            "name": "DENOTE",
            "optional": true,
            "type": "String",
            "value-key": "[DENOTE]"
        },
        {
            "command-line-flag": "-deoblique",
            "description": "-deoblique      Replace transformation matrix in header with cardinal matrix. This option DOES NOT deoblique the volume. To do so you should use 3dWarp -deoblique. This option is not to be used unless you really know what you're doing.",
            "id": "DEOBLIQUE",
            "name": "DEOBLIQUE",
            "optional": true,
            "type": "String",
            "value-key": "[DEOBLIQUE]"
        },
        {
            "command-line-flag": "-oblique_origin",
            "description": "-oblique_origin assume origin and orientation from oblique transformation matrix rather than traditional cardinal information",
            "id": "OBLIQUE_ORIGIN",
            "name": "OBLIQUE_ORIGIN",
            "optional": true,
            "type": "String",
            "value-key": "[OBLIQUE_ORIGIN]"
        },
        {
            "command-line-flag": "-byteorder",
            "description": "-byteorder bbb  Sets the byte order string in the header. Allowable values for 'bbb' are: LSB_FIRST   MSB_FIRST   NATIVE_ORDER Note that this does not change the .BRIK file! This is done by programs 2swap and 4swap.",
            "id": "BYTEORDER",
            "name": "BYTEORDER",
            "optional": true,
            "type": "String",
            "value-key": "[BYTEORDER]"
        },
        {
            "command-line-flag": "-checkaxes",
            "description": "-checkaxes      Doesn't alter the input dataset; rather, this just checks the dataset axes orientation codes and the axes matrices for consistency.  (This option was added primarily to check for bugs in various codes.)",
            "id": "CHECKAXES",
            "name": "CHECKAXES",
            "optional": true,
            "type": "String",
            "value-key": "[CHECKAXES]"
        },
        {
            "command-line-flag": "-appkey",
            "description": "-appkey ll      Appends the string 'll' to the keyword list for the whole dataset.",
            "id": "APPKEY",
            "name": "APPKEY",
            "optional": true,
            "type": "String",
            "value-key": "[APPKEY]"
        },
        {
            "command-line-flag": "-repkey",
            "description": "-repkey ll      Replaces the keyword list for the dataset with the string 'll'.",
            "id": "REPKEY",
            "name": "REPKEY",
            "optional": true,
            "type": "String",
            "value-key": "[REPKEY]"
        },
        {
            "command-line-flag": "-empkey",
            "description": "-empkey         Destroys the keyword list for the dataset.",
            "id": "EMPKEY",
            "name": "EMPKEY",
            "optional": true,
            "type": "String",
            "value-key": "[EMPKEY]"
        },
        {
            "command-line-flag": "-atrcopy",
            "description": "-atrcopy dd nn  Copy AFNI header attribute named 'nn' from dataset 'dd' into the header of the dataset(s) being modified. For more information on AFNI header attributes, see documentation file README.attributes. More than one '-atrcopy' option can be used. **N.B.: This option is for those who know what they are doing! Without the -saveatr option, this option is meant to be used to alter attributes that are NOT directly mapped into dataset internal structures, since those structures are mapped back into attribute values as the dataset is being written to disk.  If you want to change such an attribute, you have to use the corresponding 3drefit option directly or use the",
            "id": "ATRCOPY",
            "name": "ATRCOPY",
            "optional": true,
            "type": "String",
            "value-key": "[ATRCOPY]"
        },
        {
            "command-line-flag": "-saveatr",
            "description": "-saveatr option.  If you are confused, try to understand this: Option -atrcopy was never intended to modify AFNI- specific attributes. Rather, it was meant to copy user-specific attributes that had been added to some dataset using -atrstring option. A cursed day came when it was convenient to use -atrcopy to copy an AFNI-specific attribute (BRICK_LABS to be exact) and for that to take effect in the output, the option -saveatr was added. Contact Daniel Glen and/or Rick Reynolds for further clarification and any other needs you may have.  Do NOT use -atrcopy or -atrstring with other modification options. See also -copyaux",
            "id": "SAVEATR",
            "name": "SAVEATR",
            "optional": true,
            "type": "String",
            "value-key": "[SAVEATR]"
        },
        {
            "command-line-flag": "-atrstring",
            "description": "-atrstring n 'x' Copy the string 'x' into the dataset(s) being modified, giving it the attribute name 'n'. To be safe, the 'x' string should be in quotes. **N.B.: You can store attributes with almost any name in the .HEAD file.  AFNI will ignore those it doesn't know anything about.  This technique can be a way of communicating information between programs.  However, when most AFNI programs write a new dataset, they will not preserve any such non-standard attributes. **N.B.: Special case: if the string 'x' is of the form 'file:name', then the contents of the file 'name' will be read in as a single string and stored in the attribute.",
            "id": "ATRSTRING",
            "name": "ATRSTRING",
            "optional": true,
            "type": "String",
            "value-key": "[ATRSTRING]"
        },
        {
            "command-line-flag": "-atrfloat",
            "description": "-atrfloat name 'values'",
            "id": "ATRFLOAT",
            "name": "ATRFLOAT",
            "optional": true,
            "type": "String",
            "value-key": "[ATRFLOAT]"
        },
        {
            "command-line-flag": "-atrint",
            "description": "-atrint name 'values' Create or modify floating point or integer attributes. The input values may be specified as a single string in quotes or as a 1D filename or string. For example, 3drefit -atrfloat IJK_TO_DICOM_REAL '1 0.2 0 0 -0.2 1 0 0 0 0 1 0' dset+orig 3drefit -atrfloat IJK_TO_DICOM_REAL flipZ.1D dset+orig 3drefit -atrfloat IJK_TO_DICOM_REAL \\ '1D:1,0.2,2@0,-0.2,1,2@0,2@0,1,0' \\ dset+orig Almost all afni attributes can be modified in this way",
            "id": "ATRINT",
            "name": "ATRINT",
            "optional": true,
            "type": "String",
            "value-key": "[ATRINT]"
        },
        {
            "command-line-flag": "-nosaveatr",
            "description": "-nosaveatr      Opposite of -saveatr Example: 3drefit -saveatr -atrcopy WithLabels+tlrc BRICK_LABS NeedsLabels+tlrc  -'type'         Changes the type of data that is declared for this dataset, where 'type' is chosen from the following: ANATOMICAL TYPES spgr == Spoiled GRASS             fse == Fast Spin Echo epan == Echo Planar              anat == MRI Anatomy ct == CT Scan                  spct == SPECT Anatomy pet == PET Anatomy               mra == MR Angiography bmap == B-field Map              diff == Diffusion Map omri == Other MRI                abuc == Anat Bucket FUNCTIONAL TYPES fim == Intensity                fith == Inten+Thr fico == Inten+Cor                fitt == Inten+Ttest fift == Inten+Ftest              fizt == Inten+Ztest fict == Inten+ChiSq              fibt == Inten+Beta fibn == Inten+Binom              figt == Inten+Gamma fipt == Inten+Poisson            fbuc == Func-Bucket",
            "id": "NOSAVEATR",
            "name": "NOSAVEATR",
            "optional": true,
            "type": "String",
            "value-key": "[NOSAVEATR]"
        },
        {
            "command-line-flag": "-copyaux",
            "description": "-copyaux auxset Copies the 'auxiliary' data from dataset 'auxset' over the auxiliary data for the dataset being modified.  Auxiliary data comprises sub-brick labels, keywords, statistics codes, nodelists, and labeltables AND/OR atlas point lists. '-copyaux' occurs BEFORE the '-sub' operations below, so you can use those to alter the auxiliary data that is copied from auxset.",
            "id": "COPYAUX",
            "name": "COPYAUX",
            "optional": true,
            "type": "String",
            "value-key": "[COPYAUX]"
        },
        {
            "command-line-flag": "-copytables",
            "description": "-copytables tabset Copies labeltables AND/OR atlas point lists, if any, from tabset to the input dataset. '-copyaux' occurs BEFORE the '-sub' operations below, so you can use those to alter the auxiliary data that is copied from tabset.",
            "id": "COPYTABLES",
            "name": "COPYTABLES",
            "optional": true,
            "type": "String",
            "value-key": "[COPYTABLES]"
        },
        {
            "command-line-flag": "-relabel_all",
            "description": "-relabel_all xx  Reads the file 'xx', breaks it into strings, and puts these strings in as the sub-brick labels.  Basically a batch way of doing '-sublabel' many times, for n=0, 1, ... ** This option is executed BEFORE '-sublabel', so any labels from '-sublabel' will over-ride labels from this file. ** Strings in the 'xx' file are separated by whitespace (blanks, tabs, new lines).",
            "id": "RELABEL_ALL",
            "name": "RELABEL_ALL",
            "optional": true,
            "type": "String",
            "value-key": "[RELABEL_ALL]"
        },
        {
            "command-line-flag": "-relabel_all_str",
            "description": "-relabel_all_str 'lab0 lab1 ... lab_p': Just like -relabel_all but with labels all present in one string",
            "id": "RELABEL_ALL_STR",
            "name": "RELABEL_ALL_STR",
            "optional": true,
            "type": "String",
            "value-key": "[RELABEL_ALL_STR]"
        },
        {
            "command-line-flag": "-sublabel_prefix",
            "description": "Prefix each sub-brick's label with PP",
            "id": "SUBLABEL_PREFIX",
            "name": "SUBLABEL_PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[SUBLABEL_PREFIX]"
        },
        {
            "command-line-flag": "-sublabel_suffix",
            "description": "Suffix each sub-brick's label with SS  The options below attach auxiliary data to sub-bricks in the dataset. ~1~ Each option may be used more than once so that multiple sub-bricks can be modified in a single run of 3drefit.",
            "id": "SUBLABEL_SUFFIX",
            "name": "SUBLABEL_SUFFIX",
            "optional": true,
            "type": "String",
            "value-key": "[SUBLABEL_SUFFIX]"
        },
        {
            "command-line-flag": "-sublabel",
            "description": "-sublabel  n ll  Attach to sub-brick #n the label string 'll'.",
            "id": "SUBLABEL",
            "name": "SUBLABEL",
            "optional": true,
            "type": "String",
            "value-key": "[SUBLABEL]"
        },
        {
            "command-line-flag": "-subappkey",
            "description": "-subappkey n ll  Add to sub-brick #n the keyword string 'll'.",
            "id": "SUBAPPKEY",
            "name": "SUBAPPKEY",
            "optional": true,
            "type": "String",
            "value-key": "[SUBAPPKEY]"
        },
        {
            "command-line-flag": "-subrepkey",
            "description": "-subrepkey n ll  Replace sub-brick #n's keyword string with 'll'.",
            "id": "SUBREPKEY",
            "name": "SUBREPKEY",
            "optional": true,
            "type": "String",
            "value-key": "[SUBREPKEY]"
        },
        {
            "command-line-flag": "-subempkey",
            "description": "-subempkey n     Empty out sub-brick #n' keyword string",
            "id": "SUBEMPKEY",
            "name": "SUBEMPKEY",
            "optional": true,
            "type": "String",
            "value-key": "[SUBEMPKEY]"
        },
        {
            "command-line-flag": "-substatpar",
            "description": "-substatpar n type v ... Attach to sub-brick #n the statistical type and the auxiliary parameters given by values 'v ...', where 'type' is one of the following: Stat Types: ~2~ type  Description  PARAMETERS ----  -----------  ---------------------------------------- fico  Cor          SAMPLES  FIT-PARAMETERS  ORT-PARAMETERS fitt  Ttest        DEGREES-of-FREEDOM fift  Ftest        NUMERATOR and DENOMINATOR DEGREES-of-FREEDOM fizt  Ztest        N/A fict  ChiSq        DEGREES-of-FREEDOM fibt  Beta         A (numerator) and B (denominator) fibn  Binom        NUMBER-of-TRIALS and PROBABILITY-per-TRIAL figt  Gamma        SHAPE and SCALE fipt  Poisson      MEAN  You can also use option '-unSTAT' to remove all statistical encodings from sub-bricks in the dataset.  This operation would be desirable if you modified the values in the dataset (e.g., via 3dcalc). ['-unSTAT' is done BEFORE the '-substatpar' operations, so you can  ] [combine these options to completely redo the sub-bricks, if needed.] [Option '-unSTAT' also implies that '-unFDR' will be carried out.   ]  The following options allow you to modify VOLREG fields: ~1~",
            "id": "SUBSTATPAR",
            "name": "SUBSTATPAR",
            "optional": true,
            "type": "String",
            "value-key": "[SUBSTATPAR]"
        },
        {
            "command-line-flag": "-vr_mat",
            "description": "-vr_mat val1 ... val12  Use these twelve values for VOLREG_MATVEC_index.",
            "id": "VR_MAT",
            "name": "VR_MAT",
            "optional": true,
            "type": "String",
            "value-key": "[VR_MAT]"
        },
        {
            "command-line-flag": "-vr_center_old",
            "description": "-vr_center_old x y z    Use these 3 values for VOLREG_CENTER_OLD.",
            "id": "VR_CENTER_OLD",
            "name": "VR_CENTER_OLD",
            "optional": true,
            "type": "String",
            "value-key": "[VR_CENTER_OLD]"
        },
        {
            "command-line-flag": "-vr_center_base",
            "description": "-vr_center_base x y z   Use these 3 values for VOLREG_CENTER_BASE.   The following options let you modify the FDR curves stored in the header: ~1~",
            "id": "VR_CENTER_BASE",
            "name": "VR_CENTER_BASE",
            "optional": true,
            "type": "String",
            "value-key": "[VR_CENTER_BASE]"
        },
        {
            "command-line-flag": "-addFDR",
            "description": "For each sub-brick marked with a statistical code, (re)compute the FDR curve of z(q) vs. statistic, and store in the dataset header * '-addFDR' runs as if '-new -pmask' were given to 3dFDR, so that stat values == 0 will be ignored in the FDR algorithm.",
            "id": "ADDFDR",
            "name": "ADDFDR",
            "optional": true,
            "type": "String",
            "value-key": "[ADDFDR]"
        },
        {
            "command-line-flag": "-FDRmask",
            "description": "load dataset 'mset' and use it as a mask",
            "id": "FDRMASK",
            "name": "FDRMASK",
            "optional": true,
            "type": "String",
            "value-key": "[FDRMASK]"
        },
        {
            "command-line-flag": "-STATmask",
            "description": "-STATmask mset  for the '-addFDR' calculations. * This can be useful if you ran 3dDeconvolve/3dREMLFIT without a mask, and want to apply a mask to improve the FDR estimation procedure. * If '-addFDR' is NOT given, then '-FDRmask' does nothing. * 3drefit does not generate an automask for FDR purposes (unlike 3dREMLfit and 3dDeconvolve), since the input dataset may contain only statistics and no structural information about the brain.",
            "id": "STATMASK",
            "name": "STATMASK",
            "optional": true,
            "type": "String",
            "value-key": "[STATMASK]"
        },
        {
            "command-line-flag": "-unFDR",
            "description": "Remove all FDR curves from the header [you will want to do this if you have done something to ] [modify the values in the dataset statistical sub-bricks]  ++ Last program update: 27 Mar 2009  ++ Compile date = Sep  7 2018 {:}",
            "id": "UNFDR",
            "name": "UNFDR",
            "optional": true,
            "type": "String",
            "value-key": "[UNFDR]"
        },
        {
            "description": "NA",
            "id": "dataset",
            "name": "dataset",
            "optional": false,
            "type": "String",
            "value-key": "[DATASET]"
        },
        {
            "description": "NA",
            "id": "...",
            "name": "...",
            "optional": false,
            "type": "String",
            "value-key": "[...]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}