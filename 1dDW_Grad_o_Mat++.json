{
    "command-line": "1dDW_Grad_o_Mat++ [IN_ROW_VEC] [IN_COL_VEC] [IN_COL_MATA] [IN_COL_MATT] [OUT_ROW_VEC] [OUT_COL_VEC] [OUT_COL_MATA] [OUT_COL_MATT] [IN_BVALS] [OUT_COL_BVAL] [OUT_ROW_BVAL_SEP] [OUT_COL_BVAL_SEP] [UNIT_MAG_OUT] [FLIP_X] [FLIP_Y] [FLIP_Z] [NO_FLIP] [CHECK_ABS_MIN] [BREF_MEAN_TOP] [PUT_ZEROS_TOP] [BMAX_REF]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-in_row_vec",
            "description": "nput file of 3 rows of gradients (e.g., dcm2nii-format output).",
            "id": "IN_ROW_VEC",
            "name": "IN_ROW_VEC",
            "optional": true,
            "type": "String",
            "value-key": "[IN_ROW_VEC]"
        },
        {
            "command-line-flag": "-in_col_vec",
            "description": "nput file of 3 columns of gradients.",
            "id": "IN_COL_VEC",
            "name": "IN_COL_VEC",
            "optional": true,
            "type": "String",
            "value-key": "[IN_COL_VEC]"
        },
        {
            "command-line-flag": "-in_col_matA",
            "description": "nput file of 6 columns of b- or g-matrix in 'A(FNI)' `diagonal first'-format. (See above.)",
            "id": "IN_COL_MATA",
            "name": "IN_COL_MATA",
            "optional": true,
            "type": "String",
            "value-key": "[IN_COL_MATA]"
        },
        {
            "command-line-flag": "-in_col_matT",
            "description": "nput file of 6 columns of b- or g-matrix in 'T(ORTOISE)' `row first'-format. (See above.)  (one of the following formats of output must be given):",
            "id": "IN_COL_MATT",
            "name": "IN_COL_MATT",
            "optional": true,
            "type": "String",
            "value-key": "[IN_COL_MATT]"
        },
        {
            "command-line-flag": "-out_row_vec",
            "description": "utput file of 3 rows of gradients.",
            "id": "OUT_ROW_VEC",
            "name": "OUT_ROW_VEC",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_ROW_VEC]"
        },
        {
            "command-line-flag": "-out_col_vec",
            "description": "utput file of 3 columns of gradients.",
            "id": "OUT_COL_VEC",
            "name": "OUT_COL_VEC",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_COL_VEC]"
        },
        {
            "command-line-flag": "-out_col_matA",
            "description": "utput file of 6 columns of b- or g-matrix in 'A(FNI)' `diagonal first'-format. (See above.)",
            "id": "OUT_COL_MATA",
            "name": "OUT_COL_MATA",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_COL_MATA]"
        },
        {
            "command-line-flag": "-out_col_matT",
            "description": "utput file of 6 cols of b- or g-matrix in 'T(ORTOISE)' `row first'-format. (See above.)  (and any of the following options may be used):",
            "id": "OUT_COL_MATT",
            "name": "OUT_COL_MATT",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_COL_MATT]"
        },
        {
            "command-line-flag": "-in_bvals",
            "description": "VAL_FILE is a file of b-values, either a single row (such as the 'bval' file generated by dcm2nii) or a single column of numbers.  Must have the same number of entries as the number of grad vectors or matrices.",
            "id": "IN_BVALS",
            "name": "IN_BVALS",
            "optional": true,
            "type": "String",
            "value-key": "[IN_BVALS]"
        },
        {
            "command-line-flag": "-out_col_bval",
            "description": "witch to put a column of the bvalues as the first column in the output data.",
            "id": "OUT_COL_BVAL",
            "name": "OUT_COL_BVAL",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_COL_BVAL]"
        },
        {
            "command-line-flag": "-out_row_bval_sep",
            "description": "utput a file BB of bvalues in a single row.",
            "id": "OUT_ROW_BVAL_SEP",
            "name": "OUT_ROW_BVAL_SEP",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_ROW_BVAL_SEP]"
        },
        {
            "command-line-flag": "-out_col_bval_sep",
            "description": "utput a file BB of bvalues in a single column.",
            "id": "OUT_COL_BVAL_SEP",
            "name": "OUT_COL_BVAL_SEP",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_COL_BVAL_SEP]"
        },
        {
            "command-line-flag": "-unit_mag_out",
            "description": "witch so that each vector/matrix from the INFILE is scaled to either unit or zero magnitude. (Supplementary input bvalues would be ignored in the output matrix/vector, but not in the output bvalues themselves.)  The default behavior of the function is to leave the output scaled however it is input (while also applying any input BVAL_FILE).",
            "id": "UNIT_MAG_OUT",
            "name": "UNIT_MAG_OUT",
            "optional": true,
            "type": "String",
            "value-key": "[UNIT_MAG_OUT]"
        },
        {
            "command-line-flag": "-flip_x",
            "description": "hange sign of first column of gradients (or of the x-component parts of the matrix)",
            "id": "FLIP_X",
            "name": "FLIP_X",
            "optional": true,
            "type": "String",
            "value-key": "[FLIP_X]"
        },
        {
            "command-line-flag": "-flip_y",
            "description": "hange sign of second column of gradients (or of the y-component parts of the matrix)",
            "id": "FLIP_Y",
            "name": "FLIP_Y",
            "optional": true,
            "type": "String",
            "value-key": "[FLIP_Y]"
        },
        {
            "command-line-flag": "-flip_z",
            "description": "hange sign of third column of gradients (or of the z-component parts of the matrix)",
            "id": "FLIP_Z",
            "name": "FLIP_Z",
            "optional": true,
            "type": "String",
            "value-key": "[FLIP_Z]"
        },
        {
            "command-line-flag": "-no_flip",
            "description": "on't change any gradient/matrix signs.  This is an extraneous switch, as the default is to not flip any signs (this is mainly used for some scripting convenience",
            "id": "NO_FLIP",
            "name": "NO_FLIP",
            "optional": true,
            "type": "String",
            "value-key": "[NO_FLIP]"
        },
        {
            "command-line-flag": "-check_abs_min",
            "description": "y default, this program checks input matrix formats for consistency (having positive semi- definite diagonal matrix elements).  It will fail if those don't occur. However, sometimes there is just a tiny values <0, like a rounding error; you can specify to push throughfor negative diagonal elements with magnitude <VVV, with those values getting replaced by zero.  Be judicious with this power! (E.g., maybe VVV ~ 0.0001 might be OK... but if you get looots of negatives, then you really, really need to check your data for badness.  (and the follow options are probably mainly extraneous, nowadays)",
            "id": "CHECK_ABS_MIN",
            "name": "CHECK_ABS_MIN",
            "optional": true,
            "type": "String",
            "value-key": "[CHECK_ABS_MIN]"
        },
        {
            "command-line-flag": "-bref_mean_top",
            "description": "hen averaging the reference X 'b0' values (the default behavior), have the mean of the X values be represented in the top row; default behavior is to have nothing representing the b0 information in the top row (for historical functionality reasons).  NB: if your reference 'b0' actually has b>0, you might not want to average the b0 refs together, because their images could have differing contrast if the same reference vector wasn't used for each.",
            "id": "BREF_MEAN_TOP",
            "name": "BREF_MEAN_TOP",
            "optional": true,
            "type": "String",
            "value-key": "[BREF_MEAN_TOP]"
        },
        {
            "command-line-flag": "-put_zeros_top",
            "description": "hatever the output format is, add a row at the top with all zeros.",
            "id": "PUT_ZEROS_TOP",
            "name": "PUT_ZEROS_TOP",
            "optional": true,
            "type": "String",
            "value-key": "[PUT_ZEROS_TOP]"
        },
        {
            "command-line-flag": "-bmax_ref",
            "description": "HRESH is a scalar number below which b-values (in BVAL_IN) are considered `zero' or reference. Sometimes, for the reference images, the scanner has a value like b=5 s/mm^2, instead of strictly b=0 strictly. One can still flag such values as being associated with a reference image and trim it out, using, for the example case here, '-bmax_ref 5.1'.  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  EXAMPLES  # An example of type-conversion from a TORTOISE-style matrix to column # gradients (if the matT file has bweights, so will the grad values):  1dDW_Grad_o_Mat++                                    \\ -in_col_matT   BMTXT_TORT.txt                     \\ -out_col_vec   GRAD.dat   # An example of filtering (note the different styles of parentheses # for the column- and row-type files) and type-conversion (to an # AFNI-style matrix that should have the bvalue weights afterwards):  1dDW_Grad_o_Mat++                                    \\ -in_col_vec    GRADS_col.dat'{0..10,12..30}'      \\ -in_bvals      BVALS_row.dat'[0..10,12..30]'      \\ -out_col_matA  FILT_matA.dat   # An example of filtering *without* type-conversion.  Here, note # the '-unit_mag_out' flag is used so that the output row-vec does # not carry the bvalue weight with it;  it does not affect the output # bval file.  As Levon might say, the '-unit_mag_out' option acts to #   'Take a load off bvecs, take a load for free; #    Take a load off bvecs, and you put the load right on bvals only.' # This example might be useful for working with dcm2nii* output:  1dDW_Grad_o_Mat++                                      \\ -in_row_vec        ap.bvec'[0..10,12..30]'          \\ -in_bvals          ap.bval'[0..10,12..30]'          \\ -out_row_vec       FILT_ap.bvec                     \\ -out_row_bval_sep  FILT_ap.bval                     \\ -unit_mag_out  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   If you use this program, please reference the introductory/description paper for the FATCAT toolbox: Taylor PA, Saad ZS (2013).  FATCAT: (An Efficient) Functional And Tractographic Connectivity Analysis Toolbox. Brain Connectivity 3(5):523-535. ___________________________________________________________________________",
            "id": "BMAX_REF",
            "name": "BMAX_REF",
            "optional": true,
            "type": "String",
            "value-key": "[BMAX_REF]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}