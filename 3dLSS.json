{
    "command-line": "3dLSS [MATRIX] [INPUT] [NODATA] [MASK] [AUTOMASK] [PREFIX] [SAVE1D] [VERB] [STIM_TIMES_IM]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-matrix",
            "description": "Read the matrix 'mmm', which should have been output from 3dDeconvolve via the '-x1D' option, and should have included exactly one '-stim_times_IM' option. -->> The 3dLSS algorithm requires that at least 2 different stimulus times be given in the -stim_times_IM option. If you have only 1 stim time, this program will not run. In such a case, the normal '-bucket' output from 3dDeconvolve (or '-Rbuck' output from 3dREMLfit) will have the single beta for the single stim time.",
            "id": "MATRIX",
            "name": "MATRIX",
            "optional": true,
            "type": "String",
            "value-key": "[MATRIX]"
        },
        {
            "command-line-flag": "-input",
            "description": "Read time series dataset 'ddd' ** OR **",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-nodata",
            "description": "Just compute the estimator matrix -- to be saved with '-save1D'. * The number of time points is taken from the matrix header. * If neither '-input' nor '-nodata' is given, '-nodata' is used. * If '-input' is used, the number of time points in the dataset must match the number of time points in the matrix.",
            "id": "NODATA",
            "name": "NODATA",
            "optional": true,
            "type": "String",
            "value-key": "[NODATA]"
        },
        {
            "command-line-flag": "-mask",
            "description": "Read dataset 'MMM' as a mask for the input; voxels outside the mask will not be fit by the regression model.",
            "id": "MASK",
            "name": "MASK",
            "optional": true,
            "type": "String",
            "value-key": "[MASK]"
        },
        {
            "command-line-flag": "-automask",
            "description": "If you don't know what this does by now, please don't use this program. * Neither of these options has any meaning for '-nodata'. * If '-input' is used and neither of these options is given, then all voxels will be processed.",
            "id": "AUTOMASK",
            "name": "AUTOMASK",
            "optional": true,
            "type": "String",
            "value-key": "[AUTOMASK]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Prefix name for the output dataset; this dataset will contain ONLY the LSS estimates of the beta weights for the '-stim_times_IM' stimuli. * If you don't use '-prefix', then the prefix is 'LSSout'.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-save1D",
            "description": "Save the estimator vectors (cf. infra) to a 1D formatted file named 'qqq'.  Each column of this file will be one estimator vector, the same length as the input dataset timeseries (after censoring, if any). * The j-th LSS beta estimate is the dot product of the j-th column of this file with the data time series (duly censored). * If you don't use '-save1D', then this file is not saved.",
            "id": "SAVE1D",
            "name": "SAVE1D",
            "optional": true,
            "type": "String",
            "value-key": "[SAVE1D]"
        },
        {
            "command-line-flag": "-verb",
            "description": "Write out progress reports, for fun fun fun in the sun sun sun.  ------------------- Method == EQUATIONS ------------------- 3dLSS is fast, since it uses a rank-1 bordering technique to pre-compute the estimator for each separate stimulus regressor from the fixed part of the matrix, then applies these estimators to each time series in the input dataset by a simple dot product.  If you wish to peruse the equations, see https://afni.nimh.nih.gov/pub/dist/doc/misc/3dLSS/3dLSS_mathnotes.pdf The estimator for each separate beta (as described at '-save1D') is the N-vector which, when dotted into the N-vector of a voxel's time series, gives the LSS beta estimate for that voxel.  --------------------- Caveats == READ THIS! --------------------- The LSS method produces estimates that tend to have smaller variance than the LSA method that 3dDeconvolve would produce, but the LSS estimates have greater bias -- in principle, the LSA method is unbiased if the noise is symmetrically distributed.  For the purpose of using the beta estimates for MVPA (e.g., 3dsvm), the bias may not matter much and the variance reduction may help improve the classification, as illustrated in the Mumford paper.  For other purposes, the trade-off might well go the other way -- for ANY application of LSS vs. LSA, you need to assess the situation before deciding -- probably by the judicious use of simulation (as in the Mumford paper).  The bias in the estimate of any given beta is essentially due to the fact that for any given beta, LSS doesn't use an estimator vector that is orthogonal to the regressors for other coefficients -- that is what LSA does, using the pseudo-inverse.  Typically, any given LSS-estimated beta will include a mixture of the betas from neighboring stimuli -- for example, beta8{LSS} = beta8{LSA} + 0.3*beta7{LSA} - 0.1*beta9{LSA} + smaller stuff where the weights of the neighbors are larger if the corresponding stimuli are closer (so the regressors overlap more).  The LSS betas are NOT biased by including any betas that aren't from the",
            "id": "VERB",
            "name": "VERB",
            "optional": true,
            "type": "String",
            "value-key": "[VERB]"
        },
        {
            "command-line-flag": "-stim_times_IM",
            "description": "-stim_times_IM regressors -- the LSS estimator vectors (what '-save1D' gives) are orthogonal to those 'nuisance' regression matrix columns.  To investigate these weighting and orthogonality issues yourself, you can multiply the LSS estimator vectors into the 3dDeconvolve regression matrix and examine the result -- in the ideal world, the matrix would be all 0 except for 1s on diagonal corresponding to the -stim_times_IM betas.  This calculation can be done in AFNI with commands something like the 'toy' example below, which has only 6 stimulus times:  3dDeconvolve -nodata 50 1.0 -polort 1 -x1D R.xmat.1D -x1D_stop -num_stimts 1 \\",
            "id": "STIM_TIMES_IM",
            "name": "STIM_TIMES_IM",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_TIMES_IM]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}