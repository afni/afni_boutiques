{
    "command-line": "make_random_timing.py [RUN_TIME] [STIM_DUR] [NUM_REPS] [STIM_LABELS] [ORDERED_STIMULI] [MAX_CONSEC] [MULTI_TIMING_TO_EVENT_LIST] [HELP] [HELP_ADVANCED] [HELP_CONCERNS] [HELP_TODO] [HIST] [SHOW_VALID_OPTS] [VER] [HELP_DECAY_FIXED] [ADD_TIMING_CLASS] [ADD_STIM_CLASS] [RAND_POST_STIM_REST] [SHOW_REST_EVENTS] [WRITE_EVENT_LIST] [SAVE_3DD_CMD] [MAKE_3DD_CONTRASTS] [NUM_RUNS] [NUM_STIM] [PREFIX] [SHOW_TIMING_STATS] [ACROSS_RUNS] [MAX_REST] [MIN_REST] [NOT_FIRST] [NOT_LAST] [OFFSET] [PRE_STIM_REST] [POST_STIM_REST] [SEED] [T_DIGITS] [T_GRAN] [TR] [VERB]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-run_time",
            "description": "time for each run, or a list of run times",
            "id": "RUN_TIME",
            "name": "RUN_TIME",
            "optional": true,
            "type": "String",
            "value-key": "[RUN_TIME]"
        },
        {
            "command-line-flag": "-stim_dur",
            "description": "duration of all stimuli, or a list of every duration",
            "id": "STIM_DUR",
            "name": "STIM_DUR",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_DUR]"
        },
        {
            "command-line-flag": "-num_reps",
            "description": "nreps for all stimuli, or a list of nreps for each  Note that varying these parameters can lead to unbalanced designs.  Use the list forms with caution.  Currently, -pre_stim_rest and -post_stim_rest cannot vary over runs.  ---------------------------------------- getting TR-locked timing ~2~  If TR-locked timing is desired, it can be enforced with the -tr_locked option, along with which the user must specify \"-tr TR\".  The effect is to force stim_dur and t_gran to be equal to (or a multiple of) the TR.  It is illegal to use both -tr_locked and -t_gran (since -tr is used to set t_gran).  ---------------------------------------- distributing stimuli across all runs at once (via -across_runs) ~2~  The main described use is where there is a fixed number of stimulus events in each run, and of each type.  The -num_reps option specifies that number (or those numbers).  For example, if -num_reps is 8 and -num_runs is 4, each stimulus class would have 8 repetitions in each of the 4 runs (for a total of 32 repetitions).  That changes if -across_runs is applied.  With the addition of the -across_runs option, the meaning of -num_reps changes to be the total number of repetitions for each class across all runs, and the randomization changes to occur across all runs.  So in the above example, with -num_reps equal to 8, 8 stimuli (of each class) will be distributed across 4 runs.  The average number of repetitions per run would be 2.  In such a case, note that it would be possible for some runs not to have any stimuli of a certain type.  ---------------------------------------------------------------------- examples: ~2~  1. Create a timing file for a single stimulus class for a single run. The run will be 100 seconds long, with (at least) 10 seconds before the first stimulus.  The stimulus will occur 20 times, and each lasts 1.5 seconds.  The output will be written to 'stimesA_01.1D'.  make_random_timing.py -num_stim 1 -num_runs 1 -run_time 100  \\ -stim_dur 1.5 -num_reps 20 -pre_stim_rest 10 -prefix stimesA  2. A typical example.  Make timing files for 3 stim classes over 4 runs of 200 seconds.  Every stimulus class will have 8 events per run, each lasting 3.5 seconds. Require 20 seconds of rest before the first stimulus in each run, as well as after the last.  Also, add labels for the 3 stimulus classes: houses, faces, donuts. They will be appended to the respective filenames.  And finally, display timing statistics for the user.  The output will be written to stimesB_01.houses.1D, etc.  make_random_timing.py -num_stim 3 -num_runs 4 -run_time 200  \\ -stim_dur 3.5 -num_reps 8 -prefix stimesB                \\ -pre_stim_rest 20 -post_stim_rest 20                     \\",
            "id": "NUM_REPS",
            "name": "NUM_REPS",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_REPS]"
        },
        {
            "command-line-flag": "-stim_labels",
            "description": "-stim_labels houses faces donuts                         \\ -show_timing_stats  Consider adding the -save_3dd_cmd option.  3. Distribute stimuli over all runs at once.  Similar to #2, but distribute the 8 events per class over all 4 runs. In #2, each stim class has 8 events per run (so 24 total events). Here each stim class has a total of 8 events.  Just add -across_runs.  make_random_timing.py -num_stim 3 -num_runs 4 -run_time 200  \\ -stim_dur 3.5 -num_reps 8 -prefix stimesC                \\ -pre_stim_rest 20 -post_stim_rest 20                     \\ -across_runs -stim_labels houses faces donuts  4. TR-locked example.  Similar to #2, but make the stimuli TR-locked.  Set the TR to 2.0 seconds, along with the length of each stimulus event.  This adds options -tr_locked and -tr, and requires -stim_dur to be a multiple (or equal to) the TR.  make_random_timing.py -num_stim 3 -num_runs 4 -run_time 200  \\ -stim_dur 2.0 -num_reps 8 -prefix stimesD                \\ -pre_stim_rest 20 -post_stim_rest 20 -tr_locked -tr 2.0  5. Esoteric example.  Similar to #2, but require an additional 0.7 seconds of rest after each stimulus (exactly the same as adding 0.7 to the stim_dur), set the granularity of random sequencing to 0.001 seconds, apply a random number seed of 31415, and set the verbose level to 2.  Save a 3dDeconvolve -nodata command in @cmd.3dd .  make_random_timing.py -num_stim 3 -num_runs 4 -run_time 200  \\ -stim_dur 3.5 -num_reps 8 -prefix stimesE                \\ -pre_stim_rest 20 -post_stim_rest 20                     \\ -min_rest 0.7 -max_rest 7.0                              \\ -t_gran 0.001 -seed 31415 -verb 2                        \\ -show_timing_stats -save_3dd_cmd @cmd.3dd  6. Example with varying number of events, durations and run times.  ** Note that this does not make for a balanced design.  Similar to #2, but require each stimulus class to have a different number of events.  Class #1 will have 8 reps per run, class #2 will have 10 reps per run and class #3 will have 15 reps per run.  The -num_reps option takes either 1 or -num_stim parameters.  Here, 3 are supplied.  make_random_timing.py -num_stim 3 -num_runs 4       \\ -run_time 200 190 185 225                       \\ -stim_dur 3.5 4.5 3 -num_reps 8 10 15           \\ -pre_stim_rest 20 -post_stim_rest 20            \\ -prefix stimesF  7. Catch trials.  If every time a main stimulus 'M' is presented it must follow another stimulus 'C', catch trials can be used to separate them.  If the TRs look like ...CM.CM.....CM...CMCM, it is hard to separate the response to M from the response to C.  When separate C stimuli are also given, the problem becomes simple : C..CM.CM...C.CM...CMCM.  Now C and M can be measured separately.  In this example we have 4 8-second main classes (A1, A2, B1, B2) that always follow 2 types of 8-second catch classes (A and B).  The times of A1 are always 8 seconds after the times for A, for example.  Main stimuli are presented 5 times per run, and catch trials are given separately an additional 4 times per run.  That means, for example, that stimulus A will occur 14 times per run (4 as 'catch', 5 preceding A1, 5 preceding A2).  Each of 3 runs will last 9 minutes.  Initially we will claim that A1..B2 each lasts 16 seconds.  Then each of those events will be broken into a 'catch' event at the beginning, followed by a 'main' event after another 8 seconds.  Set the minimum time between any 2 events to be 1.5 seconds.  Do this in 4 steps:  a. Generate stimulus timing for 6 classes: A, B, A1, A2, B1, B2. Stim lengths will be 8, 8, and 16, 16, 16, 16 seconds, at first. Note that both the stimulus durations and frequencies will vary.  make_random_timing.py -num_stim 6 -num_runs 3 -run_time 540  \\ -stim_dur 8 8 16 16 16 16 -num_reps 4 4 5 5 5 5          \\",
            "id": "STIM_LABELS",
            "name": "STIM_LABELS",
            "optional": true,
            "type": "String",
            "value-key": "[STIM_LABELS]"
        },
        {
            "command-line-flag": "-ordered_stimuli",
            "description": "-ordered_stimuli question answer score                 \\ -pre_stim_rest 20 -post_stim_rest 20                   \\ -show_timing_stats -seed 31415 -prefix stimesH  To verify the stimulus order, consider using timing_tool.py to convert timing files to an event list.  The corresponding command might be the following, output on a TR grid of 1.0 s.  timing_tool.py -multi_timing stimesH*.1D                       \\ -multi_timing_to_events events.stimesH.txt              \\ -multi_stim_dur 2.5 2.5 3 1 1                           \\ -tr 1.0 -min_frac 0.5 -per_run -run_len 240   9. TR-locked example, fixed seed, limited consecutive events.  Similar to #4, but restrict the number of consecutive events of each type to 2.  make_random_timing.py -num_stim 3 -num_runs 2 -run_time 200     \\ -stim_dur 2.0 -num_reps 10 30 10 -prefix stimesI        \\ -pre_stim_rest 20 -post_stim_rest 20 -tr_locked -tr 2.0 \\",
            "id": "ORDERED_STIMULI",
            "name": "ORDERED_STIMULI",
            "optional": true,
            "type": "String",
            "value-key": "[ORDERED_STIMULI]"
        },
        {
            "command-line-flag": "-max_consec",
            "description": "-max_consec 2  ---------------------------------------------------------------------- NOTE: distribution of ISI ~2~  To picture the distribution, consider the probability of starting with r rest events, given R total rest events and T total task events.  The probability of starting with 0 rest events is actually the maximum, and equals the probability of selecting a task event first, which is T/(T+R).  Let X be a random variable indicating the number of rest events to start a run.  Then P(X=0) = T/(T+R). While this may look \"large\" (as in possibly close to 1), note that typically R >> T.  For example, maybe there are 50 task events and 1000 rest \"events\" (e.g. 0.1 s, each).  Then P(X=0) = 50/1050 = 0.0476. This ratio is generally closer to T/R than to 1.0.  T/R is 0.05 here.  More details...  To take one step back, viewing this as the probability of having t task events among the first n events, it follows a hypergeometric distribution. That is because for each event type that is selected, there are fewer such events of that type remaining for subsequent selections.  The selection is done *without* replacement.  The total numbers of each type of class are fixed, as is the total rest.  This differentiates it from the binomial distribution, where selection is done *with* replacement.  Taking a simplistic view, go back to the probability of starting with exactly r rest events, as stated in the beginning.  That means starting with r rest events followed by one task event, which in turn means first choosing r rest events ((R choose r) / ((R+T) choose r)), then choosing one task event, T/(R+T-r).  (R) (r)        T            R!        (R+T-r-1)! P(X=r) = ----- * ------      = ----- * T * ---------- (R+T)   (R+T-r)       (R-r)!        (R+T)! (r  )  While this may not provide much insight on its own, consider the ratio of incremental probabilities P(X=r+1) / P(X=r):  P(X=r+1)     R-r                                   R     - r -------- = -------   = for visual significance = ----------- P(X=r)    R+T-1-r                               R+T-1   - r  The left side of that ratio is fixed at R/(R+T-1) = 1000/(1049) = .953 for the earlier example.  It may by common to be in that ballpark. For subsequent r values, that ratio goes down, eventually hitting 0 when the rest is exhausted (r=R).  This means that the distribution of such rest actually falls _below_ an exponential decay curve.  It is close to (R/(R+T-1))^r at first, decaying more rapidly until hitting 0.  ==> The overall distribution of ISI rest looks like an exponential decay curve, with a peak at r=0 (no rest) and probability close to T/R.  Note that the average ISI should be approximately equal to total rest time / # task events (e.g. 100s / 50 stimuli = 2s (per stim)). So the cumulative distribution function would hit 0.5 where r corresponds to this ratio, e.g. r = 20, where each rest event is 0.1s.  Test this:  Create a histogram of all ISI durations based on 100 2-second events in a single run of length 300 (so 200 s for task, 100 s for rest), with rest distributed randomly on a 0.1 s time grid.  Note that what matters is the number of stim events (100) and the number of rest events (1000), not their respective durations (unless there are user-imposed limits).  Given the timing, \"timing_tool.py -multi_timing_to_event_list\" can be used to output ISIs (for example).  Use that to simply make a list of ISIs, and then make a histogram.  Let us repeat the process of generating events and ISIs, accumulating a list of ISIs, a total of 100 times.  The generate and plot of histogram of all ISI duration counts.  Since rest is on a 0.1 s grid, we will scale by 10 and make an integer histogram.  echo -n \"\" > isis_all.1D foreach rep ( `count 1 100` ) echo simulation $rep make_random_timing.py -num_stim 1 -num_runs 1 -run_time 300 \\ -stim_dur 2 -num_reps 100 -prefix t -verb 0 ( timing_tool.py -multi_timing t_01.1D -multi_stim_dur 2    \\",
            "id": "MAX_CONSEC",
            "name": "MAX_CONSEC",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_CONSEC]"
        },
        {
            "command-line-flag": "-multi_timing_to_event_list",
            "description": "- -verb 0              \\ | 1deval -a - -expr '10*a' >> isis_all.1D ) >& /dev/null end 3dhistog -int isis_all.1D | tee isis_hist.1D 1dplot -sepscl isis_hist.1D'[1,2]'  Note that the histogram might be scaled down by a factor of 100 to get an expected ISI frequency per run (since we effectively accumulated the ISI lists over 100 runs).  Basically, we are looking for something like a exponential decay curve in the frequency histogram (the lower plot).  Include plot of probabilities, computed incrementally (no factorials). Use the same event counts, 100 task and 1000 rest events.  Truncate this histogram to plot them together.  set nhist = `1dcat isis_hist.1D | wc -l` make_random_timing.py -verb 0 -show_isi_pdf 100 1000 > pure_probs.1D grep -v prob pure_probs.1D | grep -v result | grep -v '\\-----' \\ | head -n $nhist > prob.1D 1dplot -sepscl prob.1D'[1]' isis_hist.1D'[1,2]'  Side note assuming replacement and the binomial distribution:  In the case of replacement, we get a binomial distribution.  In the same P(X=r) case (starting with r rest events), the probabilities are simple. P(X=r) = [R/(R+T)]^r  * T/(R+T) Each rest probability is simply R/(R+T), while task is T/(R+T). The incremental probability is simply that of getting one more rest, which is R/(R+T) because of independence (samples are \"replaced\").  In this case, the PDF should more exactly follow an exponential decay curve.  ---------------------------------------------------------------------- options and arguments ~2~  ---------------------------------------- informational arguments:",
            "id": "MULTI_TIMING_TO_EVENT_LIST",
            "name": "MULTI_TIMING_TO_EVENT_LIST",
            "optional": true,
            "type": "String",
            "value-key": "[MULTI_TIMING_TO_EVENT_LIST]"
        },
        {
            "command-line-flag": "-help",
            "description": "display this help",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-help_advanced",
            "description": "display help for advanced usage",
            "id": "HELP_ADVANCED",
            "name": "HELP_ADVANCED",
            "optional": true,
            "type": "String",
            "value-key": "[HELP_ADVANCED]"
        },
        {
            "command-line-flag": "-help_concerns",
            "description": "display general concerns for timing",
            "id": "HELP_CONCERNS",
            "name": "HELP_CONCERNS",
            "optional": true,
            "type": "String",
            "value-key": "[HELP_CONCERNS]"
        },
        {
            "command-line-flag": "-help_todo",
            "description": "display list of things to do",
            "id": "HELP_TODO",
            "name": "HELP_TODO",
            "optional": true,
            "type": "String",
            "value-key": "[HELP_TODO]"
        },
        {
            "command-line-flag": "-hist",
            "description": "display the modification history",
            "id": "HIST",
            "name": "HIST",
            "optional": true,
            "type": "String",
            "value-key": "[HIST]"
        },
        {
            "command-line-flag": "-show_valid_opts",
            "description": "display all valid options (short format)",
            "id": "SHOW_VALID_OPTS",
            "name": "SHOW_VALID_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[SHOW_VALID_OPTS]"
        },
        {
            "command-line-flag": "-ver",
            "description": "display the version number  ---------------------------------------- advanced arguments/options:",
            "id": "VER",
            "name": "VER",
            "optional": true,
            "type": "String",
            "value-key": "[VER]"
        },
        {
            "command-line-flag": "-help_decay_fixed",
            "description": "display background on decay_fixed dist type",
            "id": "HELP_DECAY_FIXED",
            "name": "HELP_DECAY_FIXED",
            "optional": true,
            "type": "String",
            "value-key": "[HELP_DECAY_FIXED]"
        },
        {
            "command-line-flag": "-add_timing_class",
            "description": "create a new timing class (stim or rest)",
            "id": "ADD_TIMING_CLASS",
            "name": "ADD_TIMING_CLASS",
            "optional": true,
            "type": "String",
            "value-key": "[ADD_TIMING_CLASS]"
        },
        {
            "command-line-flag": "-add_stim_class",
            "description": "describe a new stimulus class (timing, etc.)",
            "id": "ADD_STIM_CLASS",
            "name": "ADD_STIM_CLASS",
            "optional": true,
            "type": "String",
            "value-key": "[ADD_STIM_CLASS]"
        },
        {
            "command-line-flag": "-rand_post_stim_rest",
            "description": "-rand_post_stim_rest yes/no : allow rest after final stimulus",
            "id": "RAND_POST_STIM_REST",
            "name": "RAND_POST_STIM_REST",
            "optional": true,
            "type": "String",
            "value-key": "[RAND_POST_STIM_REST]"
        },
        {
            "command-line-flag": "-show_rest_events",
            "description": "show details of rest timing, per type",
            "id": "SHOW_REST_EVENTS",
            "name": "SHOW_REST_EVENTS",
            "optional": true,
            "type": "String",
            "value-key": "[SHOW_REST_EVENTS]"
        },
        {
            "command-line-flag": "-write_event_list",
            "description": "create FILE listing all events and times",
            "id": "WRITE_EVENT_LIST",
            "name": "WRITE_EVENT_LIST",
            "optional": true,
            "type": "String",
            "value-key": "[WRITE_EVENT_LIST]"
        },
        {
            "command-line-flag": "-save_3dd_cmd",
            "description": "write 3dDeconvolve script to FILE",
            "id": "SAVE_3DD_CMD",
            "name": "SAVE_3DD_CMD",
            "optional": true,
            "type": "String",
            "value-key": "[SAVE_3DD_CMD]"
        },
        {
            "command-line-flag": "-make_3dd_contrasts",
            "description": "include pairwise contrasts in 3dD script ---------------------------------------- required arguments:",
            "id": "MAKE_3DD_CONTRASTS",
            "name": "MAKE_3DD_CONTRASTS",
            "optional": true,
            "type": "String",
            "value-key": "[MAKE_3DD_CONTRASTS]"
        },
        {
            "command-line-flag": "-num_runs",
            "description": "set the number of runs  e.g. -num_runs 4  Use this option to specify the total number of runs.  Output timing files will have one row per run (for -local_times in 3dDeconvolve).",
            "id": "NUM_RUNS",
            "name": "NUM_RUNS",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_RUNS]"
        },
        {
            "command-line-flag": "-num_stim",
            "description": "set the number of stimulus classes  e.g. -num_stim 3  This specifies the number of stimulus classes.  The program will create one output file per stimulus class.",
            "id": "NUM_STIM",
            "name": "NUM_STIM",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_STIM]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "set the prefix for output filenames  e.g. -prefix stim_times  --> might create: stim_times_001.1D  The option specifies the prefix for all output stimulus timing files. The files will have the form: PREFIX_INDEX[_LABEL].1D, where PREFIX is via this option, INDEX is 01, 02, ... through the number of stim classes, and LABEL is optionally provided via -stim_labels.  Therefore, output files will be sorted alphabetically, regardless of any labels, in the order that they are given to this program.  see also -stim_labels",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-show_timing_stats",
            "description": "show statistics from the timing  e.g. -show_timing_stats  If this option is set, the program will output statistical information regarding the stimulus timing, and on ISIs (inter-stimulus intervals) in particular.  One might want to be able to state what the min, mean, max and stdev of the ISI are.",
            "id": "SHOW_TIMING_STATS",
            "name": "SHOW_TIMING_STATS",
            "optional": true,
            "type": "String",
            "value-key": "[SHOW_TIMING_STATS]"
        },
        {
            "command-line-flag": "-across_runs",
            "description": "distribute stimuli across all runs at once  e.g. -across_runs  By default, each of -num_stim stimuli are randomly distributed within each run separately, per class.  But with the -across_runs option, these stimuli are distributed across all runs at once (so the number of repetitions per run will vary).  For example, using -num_stim 2, -num_reps 24 and -num_runs 3, assuming -across_runs is _not_used, there would be 24 repetitions of each stim class per run (for a total of 72 repetitions over 3 runs).  However, if -across_runs is applied, then there will be only the 24 repetitions over 3 runs, for an average of 8 per run (though there will probably not be exactly 8 in every run).",
            "id": "ACROSS_RUNS",
            "name": "ACROSS_RUNS",
            "optional": true,
            "type": "String",
            "value-key": "[ACROSS_RUNS]"
        },
        {
            "command-line-flag": "-max_rest",
            "description": "specify maximum rest between stimuli  e.g. -max_rest 7.25  This option applies a second phase in ordering events.  After events have been randomized, non-pre- and non-post-stim rest periods are limited to the max_rest duration.  Any rest intervals exceeding this duration are distributed randomly into intervals below this maximum.",
            "id": "MAX_REST",
            "name": "MAX_REST",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_REST]"
        },
        {
            "command-line-flag": "-min_rest",
            "description": "specify extra rest after each stimulus  e.g. -min_rest 0.320  --> would add 320 milliseconds of rest after each stimulus  There is no difference between applying this option and instead adding the REST_TIME to that of each regressor.  It is merely another way to partition the stimulus time period.  For example, if each stimulus lasts 1.5 seconds, but it is required that at least 0.5 seconds separates each stimulus pair, then there are 2 equivalent ways to express this:  A: -stim_dur 2.0 B: -stim_dur 1.5 -min_rest 0.5  These have the same effect, but perhaps the user wants to keep the terms logically separate.  However the program simply adds min_rest to each stimulus length.",
            "id": "MIN_REST",
            "name": "MIN_REST",
            "optional": true,
            "type": "String",
            "value-key": "[MIN_REST]"
        },
        {
            "command-line-flag": "-not_first",
            "description": "-not_first LAB LAB ...      : specify classes that should not start a run  e.g. -not_first base_task  If there are any stimulus tasks that should not occur first within a run, those labels can be provided with this option.  This cannot (currently) be applied with -across_runs or -max_consec.",
            "id": "NOT_FIRST",
            "name": "NOT_FIRST",
            "optional": true,
            "type": "String",
            "value-key": "[NOT_FIRST]"
        },
        {
            "command-line-flag": "-not_last",
            "description": "-not_last LAB LAB ...       : specify classes that should not end a run  e.g. -not_last base_task  If there are any stimulus tasks that should not occur last within a run, those labels can be provided with this option.  This cannot (currently) be applied with -across_runs or -max_consec.",
            "id": "NOT_LAST",
            "name": "NOT_LAST",
            "optional": true,
            "type": "String",
            "value-key": "[NOT_LAST]"
        },
        {
            "command-line-flag": "-offset",
            "description": "specify an offset to add to every stim time  e.g. -offset 4.5  Use this option to offset every stimulus time by OFFSET seconds.",
            "id": "OFFSET",
            "name": "OFFSET",
            "optional": true,
            "type": "String",
            "value-key": "[OFFSET]"
        },
        {
            "command-line-flag": "-pre_stim_rest",
            "description": "specify minimum rest period to start each run  e.g. -pre_stim_rest 20  Use this option to specify the amount of time that should pass at the beginning of each run before the first stimulus might occur. The random placing of stimuli and rest will occur after this time in each run.  As usual, the time is in seconds.",
            "id": "PRE_STIM_REST",
            "name": "PRE_STIM_REST",
            "optional": true,
            "type": "String",
            "value-key": "[PRE_STIM_REST]"
        },
        {
            "command-line-flag": "-post_stim_rest",
            "description": "specify minimum rest period to end each run  e.g. -post_stim_rest 20  Use this option to specify the amount of time that should pass at the end of each run after the last stimulus might occur.  One could consider using -post_stim_rest of 12.0, always, to account for the decay of the BOLD response after the last stimulus period ends.  Note that the program does just prevent a stimulus from starting after this time, but the entire stimulation period (described by -stim_dur) will end before this post_stim_rest period begins.  For example, if the user provides \"-run_time 100\", \"-stim_dur 2.5\" and \"-post_stim_rest 15\", then the latest a stimulus could possibly occur at is 82.5 seconds into a run.  This would allow 2.5 seconds for the stimulus, plus another 15 seconds for the post_stim_rest period.",
            "id": "POST_STIM_REST",
            "name": "POST_STIM_REST",
            "optional": true,
            "type": "String",
            "value-key": "[POST_STIM_REST]"
        },
        {
            "command-line-flag": "-seed",
            "description": "specify a seed for random number generation  e.g. -seed 3141592  This option allows the user to specify a seed for random number generation in the program.  The main reason to do so is to be able to duplicate results.  By default, the seed is based on the current system time.",
            "id": "SEED",
            "name": "SEED",
            "optional": true,
            "type": "String",
            "value-key": "[SEED]"
        },
        {
            "command-line-flag": "-t_digits",
            "description": "set the number of decimal places for times  e.g. -t_digits 3 e.g. -t_digits -1  Via this option one can control the number of places after the decimal that are used when writing the stimulus times to each output file.  The special value of -1 implies %g format.  The default is 1, printing times in tenths of a second.  But if a higher time granularity is requested via -t_gran, one might want more places after the decimal.  Note that if a user-supplied -t_gran does not round to a tenth of a second, the default t_digits changes to 3, to be in milliseconds.",
            "id": "T_DIGITS",
            "name": "T_DIGITS",
            "optional": true,
            "type": "String",
            "value-key": "[T_DIGITS]"
        },
        {
            "command-line-flag": "-t_gran",
            "description": "set the time granularity  e.g. -t_gran 0.001  The default time granularity is 0.1 seconds, and rest timing is computed at that resolution.  This option can be applied to change the resolution.  There are good reasons to go either up or down.  One might want to use 0.001 to obtain a temporal granularity of a millisecond, as times are often given at that resolution.  Also, one might want to use the actual TR, such as 2.5 seconds, to ensure that rest and stimuli occur on the TR grid.  Note that such a use also requires -stim_dur to be a multiple of the TR.",
            "id": "T_GRAN",
            "name": "T_GRAN",
            "optional": true,
            "type": "String",
            "value-key": "[T_GRAN]"
        },
        {
            "command-line-flag": "-tr",
            "description": "set the scanner TR  e.g. -tr 2.5  The TR is needed for the -tr_locked option (so that all times are multiples of the TR), and for the -save_3dd_cmd option (the TR must be given to 3dDeconvolve).  see also: -save_3dd_cmd, -tr_locked",
            "id": "TR",
            "name": "TR",
            "optional": true,
            "type": "String",
            "value-key": "[TR]"
        },
        {
            "command-line-flag": "-verb",
            "description": "set the verbose level  e.g. -verb 2  The default level is 1, and 0 is consider 'quiet' mode, only reporting errors.  The maximum level is currently 4.   - R Reynolds  May 7, 2008               motivated by Ikuko Mukai ===========================================================================   =========================================================================== Advanced usage (make_random_timing.py) ~1~  With advanced usage, timing classes are defined for both stimulus periods and rest periods.  Timing classes specify duration types that have different distributions (min, mean, max and distribution type), which can be applied to stimulus events or to rest events.  overview of timing classes: ~2~  When specifying a timing class, one can provide:  min     : min, mean and maximum for possible durations mean    : -1 means unspecified, to be computed by the program : mean determines total time for class, if specified * for a uniform distribution, the mean or max implies the other, while that is not true for decay max     : -1 means unspecified, likely meaning no limit for decay class dtype   : distribution type (default=decay) decay:        shorter events are more likely see \"NOTE: distribution of ISI\" * new method, as of Feb 3, 2017 decay_fixed:  precise decay method, which properly follows a scaled e^-x PDF, where durations are implied by the parameters (for a fixed set of params, only the order of durations is random) * new method, as of Oct 31, 2017 see: make_random_timing.py -help_decay_fixed decay_old:    old decay method, which can bunch up at max limit, if one is applied uniform_rand: randomly chosen durations with uniform dist uniform_grid: durations spread evenly across grid fixed:        one duration is specified INSTANT:      duration = 0 t_grid  : all durations are fixed on this grid (default=0.01s)  One can provide subsets:  min                             : implies fixed min, mean, max                  : implies decay on default t_grid min, mean, max, dtype           : implies default t_grid min, mean, max, dtype, t_grid   Every stimulus class type is followed by a fixed rest class type.  So rest periods are \"attached\" to the preceding stimulus periods.  For example, the 'faces' class events might last for 0.5 - 1.5 seconds, and be uniformly distributed (so average = 1s).  Those face events might then be followed by 0.5 - 8.5 seconds of rest with a 'decay' distribution (so shorter durations are more probable than longer durations).  The 'decay' distribution type matches that of the basic (non-advanced) use this program.  See \"NOTE: distribution of ISI\" in the -help output.  ============================================================ Examples: ~2~  ------------------------------------------------------- Advanced Example 1: basic, with 3 conditions ~3~  - This is a simple case with 3 conditions, each having 8 events per run of duration 3.5 s.  Rest is randomly distributed using the default 'decay' distribution (meaning shorter periods are more likely than longer ones).  The first and last 20 s is also allocated for rest.  - Do this for 4 runs of length 200 s each.  - Also, do not allow any extra rest (beyond the specified 10 s) after the final stimulus event.  - Generate 3dDeconvolve command script (and with pairwise contrasts).  - Show timing statistics.  Save a complete event list (events.adv.1.txt).  make_random_timing.py -num_runs 4 -run_time 200         \\ -pre_stim_rest 10 -post_stim_rest 10                 \\",
            "id": "VERB",
            "name": "VERB",
            "optional": true,
            "type": "String",
            "value-key": "[VERB]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}