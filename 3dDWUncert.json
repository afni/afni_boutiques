{
    "command-line": "3dDWUncert [INSET] [PREFIX] [INPUT] [INPUT_LIST] [GRADS] [BMATRIX_Z] [BMATRIX_FULL] [ITERS] [MASK] [CALC_THR_FA] [CSF_FA]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-inset",
            "description": "ile with b0 and DWI subbricks (e.g., input to 3dDWtoDTI)",
            "id": "INSET",
            "name": "INSET",
            "optional": true,
            "type": "String",
            "value-key": "[INSET]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "utput file name part.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-input",
            "description": "asename of DTI volumes output by, e.g., 3dDWItoDT or TORTOISE. Assumes format of name is, e.g.:  INPREF_FA+orig.HEAD or INPREF_FA.nii.gz . Files needed with same prefix are: *FA*, *L1*, *V1*, *V2*, *V3* .",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-input_list",
            "description": "n alternative way to specify DTI input files, where FILE is a NIML-formatted text file that lists the explicit/specific files for DTI input.  This option is used in place of '-input INPREF'. See below for a 'INPUT LIST FILE EXAMPLE'.",
            "id": "INPUT_LIST",
            "name": "INPUT_LIST",
            "optional": true,
            "type": "String",
            "value-key": "[INPUT_LIST]"
        },
        {
            "command-line-flag": "-grads",
            "description": "ile with 3 columns for x-, y-, and z-comps of DW-gradients (which have unit magnitude). NB: this option also assumes that only 1st DWI subbrick has a b=0 image (i.e., all averaging of multiple b=0 images has been done already); if such is not the case, then you should convert your grads to the bmatrix format and use `-bmatrix_FULL'. OR",
            "id": "GRADS",
            "name": "GRADS",
            "optional": true,
            "type": "String",
            "value-key": "[GRADS]"
        },
        {
            "command-line-flag": "-bmatrix_Z",
            "description": "sing this means that file with gradient info is in b-matrix format, with 6 columns representing: b_xx b_yy b_zz b_xy b_xz b_yz. NB: here, bvalue per image is the trace of the bmatr, bval = b_xx+b_yy+b_zz, such as 1000 s/mm^2. This option might be used, for example, if multiple b-values were used to measure DWI data; this is an AFNI-style bmatrix that needs to be input.",
            "id": "BMATRIX_Z",
            "name": "BMATRIX_Z",
            "optional": true,
            "type": "String",
            "value-key": "[BMATRIX_Z]"
        },
        {
            "command-line-flag": "-bmatrix_FULL",
            "description": "xact same as '-bmatrix_Z FF' above (i.e. there are N rows to the text file and N volumes in the matched data set) with just a lot more commonsensical name. Definitely would be preferred way to go, for ease of usage!",
            "id": "BMATRIX_FULL",
            "name": "BMATRIX_FULL",
            "optional": true,
            "type": "String",
            "value-key": "[BMATRIX_FULL]"
        },
        {
            "command-line-flag": "-iters",
            "description": "umber of jackknife resample iterations, e.g. 50.",
            "id": "ITERS",
            "name": "ITERS",
            "optional": true,
            "type": "String",
            "value-key": "[ITERS]"
        },
        {
            "command-line-flag": "-mask",
            "description": "an include a mask within which to calculate uncert. Otherwise, data should be masked already.",
            "id": "MASK",
            "name": "MASK",
            "optional": true,
            "type": "String",
            "value-key": "[MASK]"
        },
        {
            "command-line-flag": "-calc_thr_FA",
            "description": "et a threshold for the minimum FA value above which one calculates uncertainty; useful if one doesn't want to waste time calculating uncertainty in very low-FA voxels that are likely GM/CSF.  For example, in adult subjects one might set FF=0.1 or 0.15, depending on SNR and user's whims (default: FF=-1, i.e., do all).",
            "id": "CALC_THR_FA",
            "name": "CALC_THR_FA",
            "optional": true,
            "type": "String",
            "value-key": "[CALC_THR_FA]"
        },
        {
            "command-line-flag": "-csf_fa",
            "description": "umber marking FA value of `bad' voxels, such as those with S0 value <=mean(S_i), which breaks DT assumptions due to, e.g., bulk/flow motion. Default value of this matches 3dDWItoDT value of csf_fa=0.012345678.   * * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * **  + DTI LIST FILE EXAMPLE: Consider, for example, if you hadn't used the '-sep_dsets' option when outputting all the tensor information from 3dDWItoDT.  Then one could specify the DTI inputs for this program with a file called, e.g., FILE_DTI_IN.niml.opts (the name *must* end with '.niml.opts'): <DTIFILE_opts dti_V1=\"SINGLEDT+orig[9..11]\" dti_V2=\"SINGLEDT+orig[12..14]\" dti_V3=\"SINGLEDT+orig[15..17]\" dti_FA=\"SINGLEDT+orig[18]\" dti_L1=\"SINGLEDT+orig[6]\" /> This represents the *minimum* set of input files needed when running 3dDWUncert. (Note that MD isn't needed here.)  You can also recycle a NIMLly formatted file from '3dTrackID -dti_list'-- the extra inputs needed for the latter are a superset of those needed here, and won't affect anything detrimentally (I hope).  ****************************************************************************  + EXAMPLE: 3dDWUncert                                 \\ -inset TEST_FILES/DTI/fin2_DTI_3mm_1+orig  \\ -prefix TEST_FILES/DTI/o.UNCERT            \\ -input TEST_FILES/DTI/DT                   \\ -grads TEST_FILES/Siemens_d30_GRADS.dat    \\ -iters 50  If you use this program, please reference the jackknifing algorithm done with nonlinear fitting described in: Taylor PA, Biswal BB (2011). Geometric analysis of the b-dependent effects of Rician signal noise on diffusion tensor imaging estimates and determining an optimal b value. MRI 29:777-788. and the introductory/description paper for the FATCAT toolbox: Taylor PA, Saad ZS (2013).  FATCAT: (An Efficient) Functional And Tractographic Connectivity Analysis Toolbox. Brain Connectivity 3(5):523-535. ____________________________________________________________________________",
            "id": "CSF_FA",
            "name": "CSF_FA",
            "optional": true,
            "type": "String",
            "value-key": "[CSF_FA]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}