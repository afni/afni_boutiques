{
    "command-line": "1dsvd [ONE] [VMEAN] [VNORM] [COND] [SING] [SORT] [NOSORT] [ASORT] [1DLEFT] [NEV] [1DFILE] [...]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-one",
            "description": "Make 1st vector be all 1's.",
            "id": "ONE",
            "name": "ONE",
            "optional": true,
            "type": "String",
            "value-key": "[ONE]"
        },
        {
            "command-line-flag": "-vmean",
            "description": "Remove mean from each vector (can't be used with -one).",
            "id": "VMEAN",
            "name": "VMEAN",
            "optional": true,
            "type": "String",
            "value-key": "[VMEAN]"
        },
        {
            "command-line-flag": "-vnorm",
            "description": "Make L2-norm of each vector = 1 before SVD. * The above 2 options mirror those in 3dpc.",
            "id": "VNORM",
            "name": "VNORM",
            "optional": true,
            "type": "String",
            "value-key": "[VNORM]"
        },
        {
            "command-line-flag": "-cond",
            "description": "Only print condition number (ratio of extremes)",
            "id": "COND",
            "name": "COND",
            "optional": true,
            "type": "String",
            "value-key": "[COND]"
        },
        {
            "command-line-flag": "-sing",
            "description": "Only print singular values * To compare the singular values from 1dsvd with those from 3dDeconvolve you must use the -vnorm option with 1dsvd. For example, try 3dDeconvolve -nodata 200 1 -polort 5 -num_stimts 1 \\ -stim_times 1 '1D: 30 130' 'BLOCK(50,1)' -singvals 1dsvd -sing -vnorm nodata.xmat.1D",
            "id": "SING",
            "name": "SING",
            "optional": true,
            "type": "String",
            "value-key": "[SING]"
        },
        {
            "command-line-flag": "-sort",
            "description": "Sort singular values (descending) [the default]",
            "id": "SORT",
            "name": "SORT",
            "optional": true,
            "type": "String",
            "value-key": "[SORT]"
        },
        {
            "command-line-flag": "-nosort",
            "description": "Don't bother to sort the singular values",
            "id": "NOSORT",
            "name": "NOSORT",
            "optional": true,
            "type": "String",
            "value-key": "[NOSORT]"
        },
        {
            "command-line-flag": "-asort",
            "description": "Sort singular values (ascending)",
            "id": "ASORT",
            "name": "ASORT",
            "optional": true,
            "type": "String",
            "value-key": "[ASORT]"
        },
        {
            "command-line-flag": "-1Dleft",
            "description": "Only output left eigenvectors, in a .1D format This might be useful for reducing the number of columns in a design matrix.  The singular values are printed at the top of each vector column, as a '#...' comment line.",
            "id": "1DLEFT",
            "name": "1DLEFT",
            "optional": true,
            "type": "String",
            "value-key": "[1DLEFT]"
        },
        {
            "command-line-flag": "-nev",
            "description": "If -1Dleft is used, '-nev' specifies to output only the first 'n' eigenvectors, rather than all of them. * If you are a tricky person, such as Souheil, you can put a '%' after the value, and then you are saying keep eigenvectors until at least n% of the sum of singular values is accounted for.  In this usage, 'n' must be a number less than 100; for example, to reduce a matrix down to a smaller set of columns that capture most of its column space, try something like 1dsvd -1Dleft -nev 99% Xorig.1D > X99.1D EXAMPLE: 1dsvd -vmean -vnorm -1Dleft fred.1D'[1..6]' | 1dplot -stdin NOTES: * Call the input n X m matrix [A] (n rows, m columns).  The SVD is the factorization [A] = [U] [S] [V]' ('=transpose), where - [U] is an n x m matrix (whose columns are the 'Left vectors') - [S] is a diagonal m x m matrix (the 'singular values') - [V] is an m x m matrix (whose columns are the 'Right vectors') * The default output of the program is - An echo of the input [A] - The [U] matrix, each column headed by its singular value - The [V] matrix, each column headed by its singular value (please note that [V] is output, not [V]') - The pseudo-inverse of [A] * This program was written simply for some testing purposes, but is distributed with AFNI because it might be useful-ish. * Recall that you can transpose a .1D file on input by putting an escaped ' character after the filename.  For example, 1dsvd fred.1D\\' You can use this feature to get around the fact that there is no '-1Dright' option.  If you understand. * For more information on the SVD, you can start at http://en.wikipedia.org/wiki/Singular_value_decomposition * Author: Zhark the Algebraical (Linear).  ++ Compile date = Sep  7 2018 {:}",
            "id": "NEV",
            "name": "NEV",
            "optional": true,
            "type": "String",
            "value-key": "[NEV]"
        },
        {
            "description": "NA",
            "id": "1Dfile",
            "name": "1Dfile",
            "optional": false,
            "type": "String",
            "value-key": "[1DFILE]"
        },
        {
            "description": "NA",
            "id": "...",
            "name": "...",
            "optional": false,
            "type": "String",
            "value-key": "[...]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}