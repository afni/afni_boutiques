{
    "command-line": "SurfFWHM [INPUT] [CLEAN] [DETREND] [DETPOLY] [DETPREFIX] [HOOD] [NBHD_RAD] [PREFIX] [VOX_SIZE] [OK_WARN] [EXAMPLES] [SLICE] [I_TYPE] [ONESTATE] [ANATOMICAL] [I] [TN] [TSN] [SPEC] [N_MASK] [B_MASK] [C_MASK] [TALK_SUMA] [REFRESH_RATE] [SEND_KTH] [SH] [NI_TEXT] [NI_BINARY] [FEED_AFNI] [NP] [NPQ] [NPB] [MAX_PORT_BLOC] [MAX_PORT_BLOC_QUIET] [NUM_ASSIGNED_PORTS] [NUM_ASSIGNED_PORTS_QUIET] [H] [HELP] [H_VIEW] [HVIEW] [H_WEB] [HWEB] [H_FIND] [H_RAW] [H_SPX] [H_ASPX] [ALL_OPTS] [PROGRAM] [FOR] [CALCULATING] [LOCAL] [AND] [GLOBAL] [FWHM.]",
    "description": "tool description",
    "inputs": [
        {
            "command-line-flag": "-input",
            "description": "DSET is the dataset for which the FWHM is to be calculated. (-SURF_1): An option for specifying the surface over which DSET is defined. (For option's syntax, see 'Specifying input surfaces' section below). (-MASK)  : An option to specify a node mask so that only nodes in the mask are used to obtain estimates. See section 'SUMA mask options' for details on the masking options. Clean output: ------------- The results are written to stdout and the warnings or notices to stderr. You can capture the output to a file with the output redirection '>'. The output can be further simplified for ease of parsing with -clean.",
            "id": "INPUT",
            "name": "INPUT",
            "optional": false,
            "type": "String",
            "value-key": "[INPUT]"
        },
        {
            "command-line-flag": "-clean",
            "description": "Strip text from output to simplify parsing.  For Datasets With Multiple Sub-Bricks (a time axis): ---------------------------------------------------- For FWHM estimates, one is typically not interested in intrinsic spatial structure of the data but in the smoothness of the noise. Usually, the residuals from linear regression are used for estimating FWHM. A lesser alternate would be to use a detrended version of the FMRI time series. N.B.: Do not use catenated time series. Process one continuous run at a time.  See note under 'INPUT FILE RECOMMENDATIONS' in 3dFWHMx -help :",
            "id": "CLEAN",
            "name": "CLEAN",
            "optional": true,
            "type": "String",
            "value-key": "[CLEAN]"
        },
        {
            "command-line-flag": "-detrend",
            "description": "-detrend [q]= Detrend to order 'q'.  If q is not given, the program picks q=NT/30. **N.B.: This is the same detrending as done in 3dDespike; using 2*q+3 basis functions for q > 0. or",
            "id": "DETREND",
            "name": "DETREND",
            "optional": true,
            "type": "String",
            "value-key": "[DETREND]"
        },
        {
            "command-line-flag": "-detpoly",
            "description": "Detrend with polynomials of order p.",
            "id": "DETPOLY",
            "name": "DETPOLY",
            "optional": true,
            "type": "String",
            "value-key": "[DETPOLY]"
        },
        {
            "command-line-flag": "-detprefix",
            "description": "Save the detrended file into a dataset with prefix 'd'. Used mostly to figure out what the hell is going on, when funky results transpire.  Options for Local FWHM estimates: --------------------------------- (-SURF_SPHERE): The spherical version of SURF_1. This is necessary for Local FWHM estimates as the neighborhoods are rapidly estimated via the spherical surface. (-SURF_SPHERE) is the second surface specified on the command line. The syntax for specifying it is the same as for -SURF_1. If -SURF_1 happens to be a sphere, then there is no need to specify -SURF_SPHERE",
            "id": "DETPREFIX",
            "name": "DETPREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[DETPREFIX]"
        },
        {
            "command-line-flag": "-hood",
            "description": "Using this option indicates that you want local",
            "id": "HOOD",
            "name": "HOOD",
            "optional": true,
            "type": "String",
            "value-key": "[HOOD]"
        },
        {
            "command-line-flag": "-nbhd_rad",
            "description": "as well as global measures of FWHM. Local measurements at node n are obtained using a neighborhood that consists of nodes within R distance from n as measured by an approximation of the shortest distance along the mesh. The choice of R is important. R should be at least twice as large as the FWHM. Otherwise you will be underestimating the Local FWHM at most of the nodes. The more FWHM/R exceeds 0.5, the more you will under- estimate FWHM. Going for an excessive R however is not very advantagious either. Large R is computationaly expensive and if it is much larger than FWHM estimates, it will lead to a blurring of the local FWHM estimates. Set R to -1 to allow the program to set it automatically.",
            "id": "NBHD_RAD",
            "name": "NBHD_RAD",
            "optional": true,
            "type": "String",
            "value-key": "[NBHD_RAD]"
        },
        {
            "command-line-flag": "-prefix",
            "description": "Prefix of output data set.",
            "id": "PREFIX",
            "name": "PREFIX",
            "optional": true,
            "type": "String",
            "value-key": "[PREFIX]"
        },
        {
            "command-line-flag": "-vox_size",
            "description": "Specify the nominal voxel size in mm. This helps in the selection of neighborhood size for local smoothness estimation.",
            "id": "VOX_SIZE",
            "name": "VOX_SIZE",
            "optional": true,
            "type": "String",
            "value-key": "[VOX_SIZE]"
        },
        {
            "command-line-flag": "-ok_warn",
            "description": "-ok_warn",
            "id": "OK_WARN",
            "name": "OK_WARN",
            "optional": true,
            "type": "String",
            "value-key": "[OK_WARN]"
        },
        {
            "command-line-flag": "-examples",
            "description": "Show command line examples and quit. Options for no one to use:",
            "id": "EXAMPLES",
            "name": "EXAMPLES",
            "optional": true,
            "type": "String",
            "value-key": "[EXAMPLES]"
        },
        {
            "command-line-flag": "-slice",
            "description": "Use the contours from planar intersections to estimated gradients. This is for testing and development purposes only. Leave it alone.  The program is rather slow when estimating Local FWHM. The speed gets worse with larger hoods. But I can do little to speed it up without making serious shortcuts on the estimates. It is possible however to make it faster when estimating the FWHM over multiple sub-bricks. If you find yourself doing this often, let me know. I hestitate to implement the faster method now because it is more complicated to program.  Examples: 1- Estimating the FWHM of smoothed noise: echo Create a simple surface, a sphere and feed it to SUMA.  suma -niml & set Niso = `CreateIcosahedron -rad 100 -ld 80 -nums_quiet`; \\ set Niso = $Niso[1] CreateIcosahedron -tosphere   -rad 100 -ld 80 \\ -prefix sphere_iso_$Niso DriveSuma  -com show_surf -label sphere_iso_$Niso \\ -i_fs sphere_iso_${Niso}.asc  echo Create some noise on the sphere. 1deval -num $Niso -del 1 \\ -expr 'gran(0,1)*10000' > ${Niso}_rand.1D.dset DriveSuma  -com surf_cont -label sphere_iso_$Niso \\ -load_dset ${Niso}_rand.1D.dset\\ -switch_dset ${Niso}_rand.1D.dset -T_sb -1  echo What is the global FWHM of the noise? -a sanity check- set randFWHM = `SurfFWHM -i_fs sphere_iso_${Niso}.asc \\ -input ${Niso}_rand.1D.dset` ; \\ echo $randFWHM  echo Now smooth the noise set opref_rand = ${Niso}_rand_sm10 && rm -f ${opref_rand}.1D.dset SurfSmooth -spec sphere_iso_$Niso.spec -surf_A sphere_iso_$Niso \\ -met HEAT_07  \\ -input ${Niso}_rand.1D.dset -fwhm 10 \\ -output ${opref_rand}.1D.dset DriveSuma  -com surf_cont -label sphere_iso_$Niso \\ -load_dset ${opref_rand}.1D.dset \\ -switch_dset ${opref_rand}.1D.dset -T_sb -1  echo Let us find the FWHM both globally and locally echo Note:     echo Because the surface where the data are defined is itself echo a sphere, we need not specify it spherical version. echo If this were not the case, we would need to specify echo the spherical surface in the SurfFWHM command. This would be echo via an additional -i_fs spherical_version.asc . set fwhmpref = FWHM_${opref_rand} && rm -f ${fwhmpref}.1D.dset set gFWHM = `SurfFWHM  -i_fs sphere_iso_${Niso}.asc \\ -input ${opref_rand}.1D.dset \\ -hood -1 -prefix ${fwhmpref}` echo The global FWHM is $gFWHM echo The local FWHM are sent to SUMA next:     DriveSuma   -com surf_cont -label sphere_iso_$Niso \\ -load_dset ${fwhmpref}.1D.dset \\ -switch_dset ${fwhmpref}.1D.dset -T_sb -1  echo Produce a histogram showing the distribution of local FWHM. 3dhistog ${fwhmpref}.1D.dset > ${fwhmpref}_histog.1D set mFWHM = `3dBrickStat -slow -mean ${fwhmpref}.1D.dset` 1dplot -ylabel 'number of nodes' \\ -x ${fwhmpref}_histog.1D'[0]' -xlabel 'Local FWHM'\\ -plabel \"(Mean,Global) =($mFWHM, $gFWHM)\" \\ ${fwhmpref}_histog.1D'[1]' &  echo Notice that these tests are for sanity checks. The smoothing echo operation relies itself on smoothness estimates. You could echo change the example to add a preset number of smoothing echo iterations with a kernel width of your choosing.  Specifying input surfaces using -i or -i_TYPE options:",
            "id": "SLICE",
            "name": "SLICE",
            "optional": true,
            "type": "String",
            "value-key": "[SLICE]"
        },
        {
            "command-line-flag": "-i_TYPE",
            "description": "-i_TYPE inSurf specifies the input surface, TYPE is one of the following: fs: FreeSurfer surface. If surface name has .asc it is assumed to be in ASCII format. Otherwise it is assumed to be in BINARY_BE (Big Endian) format. Patches in Binary format cannot be read at the moment. sf: SureFit surface. You must specify the .coord followed by the .topo file. vec (or 1D): Simple ascii matrix format. You must specify the coord (NodeList) file followed by the topo (FaceSetList) file. coord contains 3 floats per line, representing X Y Z vertex coordinates. topo contains 3 ints per line, representing v1 v2 v3 triangle vertices. ply: PLY format, ascii or binary. Only vertex and triangulation info is preserved. stl: STL format, ascii or binary. This format of no use for much of the surface-based analyses. Objects are defined as a soup of triangles with no information about which edges they share. STL is only useful for taking surface models to some 3D printing software. mni: MNI .obj format, ascii only. Only vertex, triangulation, and node normals info is preserved. byu: BYU format, ascii. Polygons with more than 3 edges are turned into triangles. bv: BrainVoyager format. Only vertex and triangulation info is preserved. dx: OpenDX ascii mesh format. Only vertex and triangulation info is preserved. Requires presence of 3 objects, the one of class 'field' should contain 2 components 'positions' and 'connections' that point to the two objects containing node coordinates and topology, respectively. gii: GIFTI XML surface format. obj: OBJ file format for triangular meshes only. The following primitives are preserved: v (vertices), (faces, triangles only), and p (points) Note that if the surface filename has the proper extension, it is enough to use the -i option and let the programs guess the type from the extension.  You can also specify multiple surfaces after -i option. This makes it possible to use wildcards on the command line for reading in a bunch of surfaces at once.",
            "id": "I_TYPE",
            "name": "I_TYPE",
            "optional": true,
            "type": "String",
            "value-key": "[I_TYPE]"
        },
        {
            "command-line-flag": "-onestate",
            "description": "Make all -i_* surfaces have the same state, i.e. they all appear at the same time in the viewer. By default, each -i_* surface has its own state. For -onestate to take effect, it must precede all -i options with on the command line.",
            "id": "ONESTATE",
            "name": "ONESTATE",
            "optional": true,
            "type": "String",
            "value-key": "[ONESTATE]"
        },
        {
            "command-line-flag": "-anatomical",
            "description": "Label all -i surfaces as anatomically correct. Again, this option should precede the -i_* options.  More variants for option -i: ----------------------------- You can also load standard-mesh spheres that are formed in memory with the following notation",
            "id": "ANATOMICAL",
            "name": "ANATOMICAL",
            "optional": true,
            "type": "String",
            "value-key": "[ANATOMICAL]"
        },
        {
            "command-line-flag": "-i",
            "description": "Where NUM is the parameter controlling the mesh density exactly as the parameter -ld linDepth does in CreateIcosahedron. For example: suma -i ld60 create on the fly a surface that is identical to the one produced by: CreateIcosahedron -ld 60 -tosphere",
            "id": "I",
            "name": "I",
            "optional": true,
            "type": "String",
            "value-key": "[I]"
        },
        {
            "command-line-flag": "-tn",
            "description": "specify surface type and name. See below for help on the parameters.",
            "id": "TN",
            "name": "TN",
            "optional": true,
            "type": "String",
            "value-key": "[TN]"
        },
        {
            "command-line-flag": "-tsn",
            "description": "specify surface type state and name. TYPE: Choose from the following (case sensitive): 1D: 1D format FS: FreeSurfer ascii format PLY: ply format MNI: MNI obj ascii format BYU: byu format SF: Caret/SureFit format BV: BrainVoyager format GII: GIFTI format NAME: Name of surface file. For SF and 1D formats, NAME is composed of two names the coord file followed by the topo file STATE: State of the surface. Default is S1, S2.... for each surface. Specifying a surface specification (spec) file:",
            "id": "TSN",
            "name": "TSN",
            "optional": true,
            "type": "String",
            "value-key": "[TSN]"
        },
        {
            "command-line-flag": "-spec",
            "description": "specify the name of the SPEC file. As with option -i, you can load template spec files with symbolic notation trickery as in: suma -spec MNI_N27 which will load the all the surfaces from template MNI_N27 at the original FreeSurfer mesh density. The string following -spec is formatted in the following manner: HEMI:TEMPLATE:DENSITY where: HEMI specifies a hemisphere. Choose from 'l', 'r', 'lh', 'rh', 'lr', or 'both' which is the default if you do not specify a hemisphere. TEMPLATE: Specify the template name. For now, choose from MNI_N27 if you want surfaces from the MNI_N27 volume, or TT_N27 for the Talairach version. Those templates must be installed under this directory: /root/.afni/data/ If you have no surface templates there, download one of: https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_TT_N27.tgz https://afni.nimh.nih.gov/pub/dist/tgz/suma_MNI152_2009.tgz and untar them under directory /root/.afni/data/ DENSITY: Use if you want to load standard-mesh versions of the template surfaces. Note that only ld20, ld60, ld120, and ld141 are in the current distributed templates. You can create other densities if you wish with MapIcosahedron, but follow the same naming convention to enable SUMA to find them. This parameter is optional. The order in which you specify HEMI, TEMPLATE, and DENSITY, does not matter. For template surfaces, the -sv option is provided automatically, so you can have SUMA talking to AFNI with something like: suma -spec MNI_N27:ld60 & afni -niml /root/.afni/data/suma_MNI_N27   SUMA dataset input options:",
            "id": "SPEC",
            "name": "SPEC",
            "optional": true,
            "type": "String",
            "value-key": "[SPEC]"
        },
        {
            "command-line-flag": "-n_mask",
            "description": "Apply operations to nodes listed in INDEXMASK  only. INDEXMASK is a 1D file.",
            "id": "N_MASK",
            "name": "N_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[N_MASK]"
        },
        {
            "command-line-flag": "-b_mask",
            "description": "Similar to -n_mask, except that the BINARYMASK 1D file contains 1 for nodes to filter and 0 for nodes to be ignored. The number of rows in filter_binary_mask must be equal to the number of nodes forming the surface.",
            "id": "B_MASK",
            "name": "B_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[B_MASK]"
        },
        {
            "command-line-flag": "-c_mask",
            "description": "Masking based on the result of EXPR. Use like afni's -cmask options. See explanation in 3dmaskdump -help and examples in output of 3dVol2Surf -help NOTE: Unless stated otherwise, if n_mask, b_mask and c_mask are used simultaneously, the resultant mask is the intersection (AND operation) of all masks.    SUMA communication options:",
            "id": "C_MASK",
            "name": "C_MASK",
            "optional": true,
            "type": "String",
            "value-key": "[C_MASK]"
        },
        {
            "command-line-flag": "-talk_suma",
            "description": "Send progress with each iteration to SUMA.",
            "id": "TALK_SUMA",
            "name": "TALK_SUMA",
            "optional": true,
            "type": "String",
            "value-key": "[TALK_SUMA]"
        },
        {
            "command-line-flag": "-refresh_rate",
            "description": "Maximum number of updates to SUMA per second. The default is the maximum speed.",
            "id": "REFRESH_RATE",
            "name": "REFRESH_RATE",
            "optional": true,
            "type": "String",
            "value-key": "[REFRESH_RATE]"
        },
        {
            "command-line-flag": "-send_kth",
            "description": "Send the kth element to SUMA (default is 1). This allows you to cut down on the number of elements being sent to SUMA.",
            "id": "SEND_KTH",
            "name": "SEND_KTH",
            "optional": true,
            "type": "String",
            "value-key": "[SEND_KTH]"
        },
        {
            "command-line-flag": "-sh",
            "description": "-sh <SumaHost>: Name (or IP address) of the computer running SUMA. This parameter is optional, the default is 127.0.0.1",
            "id": "SH",
            "name": "SH",
            "optional": true,
            "type": "String",
            "value-key": "[SH]"
        },
        {
            "command-line-flag": "-ni_text",
            "description": "Use NI_TEXT_MODE for data transmission.",
            "id": "NI_TEXT",
            "name": "NI_TEXT",
            "optional": true,
            "type": "String",
            "value-key": "[NI_TEXT]"
        },
        {
            "command-line-flag": "-ni_binary",
            "description": "Use NI_BINARY_MODE for data transmission. (default is ni_binary).",
            "id": "NI_BINARY",
            "name": "NI_BINARY",
            "optional": true,
            "type": "String",
            "value-key": "[NI_BINARY]"
        },
        {
            "command-line-flag": "-feed_afni",
            "description": "Send updates to AFNI via SUMA's talk.",
            "id": "FEED_AFNI",
            "name": "FEED_AFNI",
            "optional": true,
            "type": "String",
            "value-key": "[FEED_AFNI]"
        },
        {
            "command-line-flag": "-np",
            "description": "Provide a port offset to allow multiple instances of AFNI <--> SUMA, AFNI <--> 3dGroupIncorr, or any other programs that communicate together to operate on the same machine. All ports are assigned numbers relative to PORT_OFFSET. The same PORT_OFFSET value must be used on all programs that are to talk together. PORT_OFFSET is an integer in the inclusive range [1025 to 65500]. When you want to use multiple instances of communicating programs, be sure the PORT_OFFSETS you use differ by about 50 or you may still have port conflicts. A BETTER approach is to use -npb below.",
            "id": "NP",
            "name": "NP",
            "optional": true,
            "type": "String",
            "value-key": "[NP]"
        },
        {
            "command-line-flag": "-npq",
            "description": "Like -np, but more quiet in the face of adversity.",
            "id": "NPQ",
            "name": "NPQ",
            "optional": true,
            "type": "String",
            "value-key": "[NPQ]"
        },
        {
            "command-line-flag": "-npb",
            "description": "Similar to -np, except it is easier to use. PORT_OFFSET_BLOC is an integer between 0 and MAX_BLOC. MAX_BLOC is around 4000 for now, but it might decrease as we use up more ports in AFNI. You should be safe for the next 10 years if you stay under 2000. Using this function reduces your chances of causing port conflicts.  See also afni and suma options: -list_ports and -port_number for information about port number assignments.  You can also provide a port offset with the environment variable AFNI_PORT_OFFSET. Using -np overrides AFNI_PORT_OFFSET.",
            "id": "NPB",
            "name": "NPB",
            "optional": true,
            "type": "String",
            "value-key": "[NPB]"
        },
        {
            "command-line-flag": "-max_port_bloc",
            "description": "Print the current value of MAX_BLOC and exit. Remember this value can get smaller with future releases. Stay under 2000.",
            "id": "MAX_PORT_BLOC",
            "name": "MAX_PORT_BLOC",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_PORT_BLOC]"
        },
        {
            "command-line-flag": "-max_port_bloc_quiet",
            "description": "Spit MAX_BLOC value only and exit.",
            "id": "MAX_PORT_BLOC_QUIET",
            "name": "MAX_PORT_BLOC_QUIET",
            "optional": true,
            "type": "String",
            "value-key": "[MAX_PORT_BLOC_QUIET]"
        },
        {
            "command-line-flag": "-num_assigned_ports",
            "description": "Print the number of assigned ports used by AFNI then quit.",
            "id": "NUM_ASSIGNED_PORTS",
            "name": "NUM_ASSIGNED_PORTS",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_ASSIGNED_PORTS]"
        },
        {
            "command-line-flag": "-num_assigned_ports_quiet",
            "description": "Do it quietly.  Port Handling Examples: ----------------------- Say you want to run three instances of AFNI <--> SUMA. For the first you just do: suma -niml -spec ... -sv ...  & afni -niml & Then for the second instance pick an offset bloc, say 1 and run suma -niml -npb 1 -spec ... -sv ...  & afni -niml -npb 1 & And for yet another instance: suma -niml -npb 2 -spec ... -sv ...  & afni -niml -npb 2 & etc.  Since you can launch many instances of communicating programs now, you need to know wich SUMA window, say, is talking to which AFNI. To sort this out, the titlebars now show the number of the bloc of ports they are using. When the bloc is set either via environment variables AFNI_PORT_OFFSET or AFNI_PORT_BLOC, or with one of the -np* options, window title bars change from [A] to [A#] with # being the resultant bloc number. In the examples above, both AFNI and SUMA windows will show [A2] when -npb is 2.    [-novolreg]: Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume. [-noxform]: Same as -novolreg [-setenv \"'ENVname=ENVvalue'\"]: Set environment variable ENVname to be ENVvalue. Quotes are necessary. Example: suma -setenv \"'SUMA_BackgroundColor = 1 0 1'\" See also options -update_env, -environment, etc in the output of 'suma -help' Common Debugging Options: [-trace]: Turns on In/Out debug and Memory tracing. For speeding up the tracing log, I recommend you redirect stdout to a file when using this option. For example, if you were running suma you would use: suma -spec lh.spec -sv ... > TraceFile This option replaces the old -iodbg and -memdbg. [-TRACE]: Turns on extreme tracing. [-nomall]: Turn off memory tracing. [-yesmall]: Turn on memory tracing (default). NOTE: For programs that output results to stdout (that is to your shell/screen), the debugging info might get mixed up with your results.   Global Options (available to all AFNI/SUMA programs)",
            "id": "NUM_ASSIGNED_PORTS_QUIET",
            "name": "NUM_ASSIGNED_PORTS_QUIET",
            "optional": true,
            "type": "String",
            "value-key": "[NUM_ASSIGNED_PORTS_QUIET]"
        },
        {
            "command-line-flag": "-h",
            "description": "Mini help, at time, same as -help in many cases.",
            "id": "H",
            "name": "H",
            "optional": true,
            "type": "String",
            "value-key": "[H]"
        },
        {
            "command-line-flag": "-help",
            "description": "The entire help output",
            "id": "HELP",
            "name": "HELP",
            "optional": true,
            "type": "String",
            "value-key": "[HELP]"
        },
        {
            "command-line-flag": "-h_view",
            "description": "Open help in text editor. AFNI will try to find a GUI editor",
            "id": "H_VIEW",
            "name": "H_VIEW",
            "optional": true,
            "type": "String",
            "value-key": "[H_VIEW]"
        },
        {
            "command-line-flag": "-hview",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HVIEW",
            "name": "HVIEW",
            "optional": true,
            "type": "String",
            "value-key": "[HVIEW]"
        },
        {
            "command-line-flag": "-h_web",
            "description": "Open help in web browser. AFNI will try to find a browser.",
            "id": "H_WEB",
            "name": "H_WEB",
            "optional": true,
            "type": "String",
            "value-key": "[H_WEB]"
        },
        {
            "command-line-flag": "-hweb",
            "description": "on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.",
            "id": "HWEB",
            "name": "HWEB",
            "optional": true,
            "type": "String",
            "value-key": "[HWEB]"
        },
        {
            "command-line-flag": "-h_find",
            "description": "Look for lines in this programs's -help output that match (approximately) WORD.",
            "id": "H_FIND",
            "name": "H_FIND",
            "optional": true,
            "type": "String",
            "value-key": "[H_FIND]"
        },
        {
            "command-line-flag": "-h_raw",
            "description": "Help string unedited",
            "id": "H_RAW",
            "name": "H_RAW",
            "optional": true,
            "type": "String",
            "value-key": "[H_RAW]"
        },
        {
            "command-line-flag": "-h_spx",
            "description": "Help string in sphinx loveliness, but do not try to autoformat",
            "id": "H_SPX",
            "name": "H_SPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_SPX]"
        },
        {
            "command-line-flag": "-h_aspx",
            "description": "Help string in sphinx with autoformatting of options, etc.",
            "id": "H_ASPX",
            "name": "H_ASPX",
            "optional": true,
            "type": "String",
            "value-key": "[H_ASPX]"
        },
        {
            "command-line-flag": "-all_opts",
            "description": "Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.    Compile Date: Sep  7 2018  Ziad S. Saad SSCC/NIMH/NIH saadz@mail.nih.gov",
            "id": "ALL_OPTS",
            "name": "ALL_OPTS",
            "optional": true,
            "type": "String",
            "value-key": "[ALL_OPTS]"
        },
        {
            "description": "NA",
            "id": "program",
            "name": "program",
            "optional": false,
            "type": "String",
            "value-key": "[PROGRAM]"
        },
        {
            "description": "NA",
            "id": "for",
            "name": "for",
            "optional": false,
            "type": "String",
            "value-key": "[FOR]"
        },
        {
            "description": "NA",
            "id": "calculating",
            "name": "calculating",
            "optional": false,
            "type": "String",
            "value-key": "[CALCULATING]"
        },
        {
            "description": "NA",
            "id": "local",
            "name": "local",
            "optional": false,
            "type": "String",
            "value-key": "[LOCAL]"
        },
        {
            "description": "NA",
            "id": "and",
            "name": "and",
            "optional": false,
            "type": "String",
            "value-key": "[AND]"
        },
        {
            "description": "NA",
            "id": "global",
            "name": "global",
            "optional": false,
            "type": "String",
            "value-key": "[GLOBAL]"
        },
        {
            "description": "NA",
            "id": "FWHM.",
            "name": "FWHM.",
            "optional": false,
            "type": "String",
            "value-key": "[FWHM.]"
        }
    ],
    "name": "tool name",
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {},
    "tool-version": "v0.1.0"
}